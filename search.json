[{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Engbert and Kliegl (2003)","title":"Implemented Methods","text":"algorithm labels sample saccade velocity, measured units standard deviation (see ), exceeds predefined threshold (defaults \\(6\\)) duration super-threshold period exceeds minimal duration (defaults \\(12\\) milliseconds). method makes assumptions velocity units degrees per second can used data (e.g., samples encode gaze screen position units). standard deviation computed following formula #2 Engbert Kliegl (2003) However, value smaller .Machine$double.eps, recomputed via mean estimator monocular version algorithm implemented binocular saccades computed using overlapping votes two eyes. method details rationale default parameter values refer Engbert Kliegl (2003). Parameters: ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults \\(6\\). ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator() implements formula #2 Engbert Kliegl (2003). Can replaced sd(), mad(), custom function. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults \\(12\\). ek_minimal_separation_ms minimal required time gap saccades. Defaults \\(12\\).","code":"sqrt(median(x^2) - median(x)^2) sqrt(mean(x^2) - mean(x)^2)"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"otero-millan2014","dir":"Articles","previous_headings":"","what":"Otero-Millan et al. (2014)","title":"Implemented Methods","text":"algorithm: Detect local velocity peaks. Filter based minimal inter-peak interval (defaults \\(30\\) ms) maximal allowed saccade rate (defaults \\(5\\) Hz). Identify onset offset potential saccade using absolute velocity threshold degrees per second (defaults \\(3\\)). Compute peak velocity peak acceleration peak velocity reached. Rotate velocity peak acceleration via PCA retain components predefined threshold explained variance (defaults \\(0.05\\)). Perform cluster analysis remaining components \\(2\\), \\(3\\), \\(4\\) picking solution smallest silhouette. Saccades identified cluster highest average peak velocity. method details rationale default parameter values refer Otero-Millan et al. (2014). Parameters: om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults \\(30\\) om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults \\(5\\). om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s. Defaults \\(3\\). om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults \\(0.05\\).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Nyström and Holmqvist (2010)","title":"Implemented Methods","text":"algorithm: Identify physiologically implausible velocity acceleration peaks (defaults \\(1000 \\deg/s\\) \\(100000 \\deg/s^2\\)). Identify noise onset/offset samples around implausible velocity/acceleration median velocity. Exclude samples analysis. Identify velocity threshold \\(PT = mean(V_{subthreshold}) + 6 \\cdot std(V_{subthreshold})\\) via iterative method starting arbitrary \\(PT\\) value (defaults \\(100 \\deg/s\\)). Stop threshold change \\(1 \\deg/s\\). Identify saccades periods peaks peaks threshold \\(PT\\) adjacent samples \\(PT_{onset/offset} = mean(V_{subthreshold}) + 3 \\cdot std(V_{subthreshold})\\). method details rationale default parameter values refer Nyström Holmqvist (2010). Parameters: nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Implemented Methods","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/using_custom_methods.html","id":"example-implementation","dir":"Articles","previous_headings":"","what":"Example implementation","title":"Using Custom Methods","text":"example implementation overly simple custom method labels sample saccade velocity exceeds predefined threshold. expects threshold parameter \"st_velocity_threshold\" member list uses default threshold \\(50 \\deg / s\\) (arbitrary number!) threshold provided. implemented method, can pass alongside internally implemented methods:","code":"simple_threshold_method <- function(x,                                     y,                                     vel,                                     acc,                                     sample_rate,                                     trial,                                     options) {    # obtain method parameters or use defaults   velocity_threshold <- saccadr::option_or_default(options, \"st_velocity_threshold\", 50)    # vote on each sample     sample_vote <- vel[['amp']] > velocity_threshold      # return votes   sample_vote } data(\"single_trial\") saccades <- saccadr::extract_saccades(x = single_trial$x,                                       y = single_trial$y,                                       sample_rate = 500,                                       methods = list(\"ek\", \"om\", \"nh\", simple_threshold_method),                                       options = list(\"st_velocity_threshold\" = 70))"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Differentiation following Engbert and Kliegl (2003)","title":"Velocity computation","text":"method computes velocity predefined time window controlled via ek_velocity_time_window defaults 20 ms. width window converted samples based sampling_rate parameter ensured odd number equal larger 3. .e., window three samples long, velocity computed based one sample one sample current, five-samples window - two samples , etc. code always starts requested window size iteratively reduces two samples accommodate trial limits missing values. NA velocity returned even smallest window (three samples wide) used. general, horizontal vertical velocity components computed \\[v_x[] = \\frac{\\sum_{j=1}^{(N-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(N-1)/2}2j\\cdot\\Delta t}\\] \\(\\) index sample, \\(\\Delta t = \\frac{1}{sample~rate}\\) duration single sampling frame, \\(N\\) odd integer width moving average used compute velocity. Engbert Kliegl (2003), \\(N=5\\) \\(\\Delta t = 4\\) (250 Hz sampling rate) translate 20 ms moving average window (default value used method implementation). derivation shows equivalence formula formula 1 Engbert Kliegl (2003). \\(N=5\\): \\[\\frac{\\sum_{j=1}^{(5-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(5-1)/2}2j\\cdot\\Delta t}=\\] \\[\\frac{\\sum_{j=1}^{2}x[+j] - x[-j]}{\\sum_{j=1}^{2}2j\\cdot\\Delta t}=\\] \\[\\frac{x[+1] - x[-1]+x[+2] - x[-2]}{2\\Delta t + 4\\Delta t}=\\] \\[\\frac{x[+2] + x[+1] - x[-1] - x[-2]}{6\\Delta t}\\]","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Differentiation following Nyström and Holmqvist (2010)","title":"Velocity computation","text":"Horizontal vertical components velocity computed adjacent samples, amplitude computed components filtered using Savitzky-Golay filter. Filter order controlled via nh_sg_filter_order option defaults 2.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"comparing-two-methods","dir":"Articles","previous_headings":"","what":"Comparing two methods","title":"Velocity computation","text":"two methods produce comparable different velocity values. However, minor effect saccade detection, see vignette Using sample votes.","code":"# computing velocity using two methods vel_ek <- saccadr::diff_ek(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_nh <- saccadr::diff_nh(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_comparison <- na.omit(data.frame(EK = vel_ek[['amp']], NH = vel_nh[['amp']])) %>%   dplyr::filter(NH > 0) %>% # values can be negative due to filtering   dplyr::mutate(logEK = log(EK), logNH = log(NH))   # plotting amplitude comparison pearson_rho <- cor(vel_comparison[['EK']], vel_comparison[['NH']])  ggplot(data = vel_comparison, aes(x = EK, y = NH)) +   geom_abline() +   geom_point() +   scale_x_log10() +   scale_y_log10() +   labs(subtitle = sprintf(\"Pearson's ρ = %.2f\\nPearson's ρ for log transformed velocities = %.2f\", pearson_rho, cor(vel_comparison[['logEK']], vel_comparison[['logNH']])),        x = \"Vek\",        y = \"Vnh\") # plotting  ggplot(data = NULL, aes(x = vel_comparison[['EK']] - vel_comparison[['NH']])) +   geom_histogram(bins = 50) +   xlab(\"Vek - Vnh\") +   labs(title = \"Difference in velocities computed via two methods\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"implementing-and-using-a-custom-differentiation-function","dir":"Articles","previous_headings":"","what":"Implementing and using a custom differentiation function","title":"Velocity computation","text":"custom function follows Arguments passed function (vectors length): x, y vectors values, either x y gaze coordinates velocity components (acceleration). sample_rate scalar value Hz. trial vector trial index per sample. options named list method-specific options. See example use . See also option_or_default() function. function must return data.frame three columns: x (horizontal component), y (vertical component), amp (amplitude). example simple velocity function respects trial borders similar function uses optional custom_velocity_lag parameter can different 1","code":"diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # compute vertical and horizontal components   df <- data.frame(x = ..., # differentiate values of x                     y = ...) # differentiate values of y      # compute amplitude   df[['amp']] = sqrt(df[['x']]^2 + df[['y']]^2))    # return a data.frame with columns x, y, and amp   return(df) } library(dplyr)  diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x)) / delta_t_s,            y = (y - lag(y)) / delta_t_s,            amp = sqrt(x^2 + y^2)) } diff_lag_n <- function(x, y,  trial, sample_rate, options=NULL) {   # obtain lag or use default   lag_n <- saccadr::option_or_default(options, \"custom_velocity_lag\", 1)      # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x, lag_n)) / delta_t_s,            y = (y - lag(y, lag_n)) / delta_t_s,            amp = sqrt(x^2 + y^2)) }"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Velocity computation","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). saccadr: Extract Saccades via Ensemble Methods Approach. https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/.","code":"@Manual{,   title = {saccadr: Extract Saccades via an Ensemble of Methods Approach},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/}, }"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccadr","dir":"","previous_headings":"","what":"Extract Saccades via an Ensemble of Methods Approach","title":"Extract Saccades via an Ensemble of Methods Approach","text":"saccadr modular extendable R package extract (micro)saccades gaze samples via ensemble methods approach. Although agreement general definition saccade, specific details harder agree upon. Therefore, numerous algorithms extract saccades based various heuristics, differ assumptions velocity, acceleration, etc. package uses methods label individual samples applies majority vote approach identify saccades. package includes three methods (see Implemented Methods vignette) can extended via custom methods (see Using custom methods vignette). also uses modular approach compute velocity acceleration noisy samples (see Velocity computation vignette). Finally, can obtain methods votes per gaze sample instead saccades (see Using sample votes vignette). extract_saccades() function uses several methods label individual samples belonging saccade, classifies sample potential saccade proportion votes exceeds preset threshold, identifies saccades based minimal saccade duration minimal time saccades. binocular data, 1) samples can averaged velocity computation, 2) votes can merged function returns binocular saccades, 3) saccades extracted eye separately. Currently, library implements saccade detection using following saccade detection methods. using package, please cite package individual methods. method_ek : Engbert, R., & Kliegl, R. (2003). Microsaccades uncover orientation covert attention. Vision Research, 43(9), 1035–1045. https://doi.org/10.1016/S0042-6989(03)00084-1 method_om : Otero-Millan, J., Castro, J. L. ., Macknik, S. L., & Martinez-Conde, S. (2014). Unsupervised clustering method detect microsaccades. Journal Vision, 14(2), 18–18. https://doi.org/10.1167/14.2.18 method_nh : Nyström, M., & Holmqvist, K. (2010). adaptive algorithm fixation, saccade, glissade detection eye tracking data. Behavior Research Methods, 42(1), 188–204. https://doi.org/10.3758/BRM.42.1.188","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Saccades via an Ensemble of Methods Approach","text":"install github","code":"library(\"devtools\") install_github(\"alexander-pastukhov/saccadr\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Saccades via an Ensemble of Methods Approach","text":"main function extract_saccades(). Minimally, takes x y gaze samples, sampling rate returning table extracted saccades. Note function expects units gaze samples degrees visual angle, methods use physiologically plausible velocity acceleration thresholds.","code":"data(\"single_trial\") saccades <- extract_saccades(single_trial$x, single_trial$y, sample_rate = 500)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"multiple-trials","dir":"","previous_headings":"Usage","what":"Multiple trials","title":"Extract Saccades via an Ensemble of Methods Approach","text":"recording spans multiple trials, need specify via trial parameter. way velocity computation saccade detection methods respect trial boundaries.","code":"data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"binocular-data","dir":"","previous_headings":"Usage","what":"Binocular data","title":"Extract Saccades via an Ensemble of Methods Approach","text":"three ways binocular data can treated based value binocular parameter: binocular = \"merge\" (default): sample votes obtained eyes methods averaged. way binocular saccades (.e., eye movements sufficient temporal overlap eyes) detected. Eye = \"Binocular\" saccade description. binocular = \"cyclopean\": binocular data converted average cyclopean image voting saccades detection. Eye = \"Cyclopean\" saccade description. binocular = \"monocular\": saccades extracted independently eye. Eye = \"Left\" Eye = \"Right\" saccade description.","code":"data(\"single_trial_binocular\") # binocular saccades only saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000)  # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"cyclopean\")  # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"monocular\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-methods","dir":"","previous_headings":"Usage","what":"Specifying methods","title":"Extract Saccades via an Ensemble of Methods Approach","text":"default, implemented methods used saccade detection , necessary, can use subset even single method. Note can also supply saccade detection function, please see Using custom methods vignette. Parameters individual methods passed via options argument, named list <parameter-name> = <value> pairs. can find information specific parameters default values Implemented Methods vignette. example modifying velocity threshold, measured units standard deviation, Engbert & Kliegl (2003) method. default value 6 can make stricter","code":"# Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = list(method_ek, method_om)) saccades <- extract_saccades(single_trial$x, single_trial$y, 500, options = list(\"ek_velocity_threshold\" = 8))"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"altering-voting-threshold","dir":"","previous_headings":"Usage","what":"Altering voting threshold","title":"Extract Saccades via an Ensemble of Methods Approach","text":"voting threshold number methods must label sample potential saccade. default, one method must agree sample considered saccade (vote_threshold = length(methods) - 1) 1, single method passed function. can make voting less restrictive via vote_threshold parameter.","code":"# A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-velocity-computation-method","dir":"","previous_headings":"Usage","what":"Specifying velocity computation method","title":"Extract Saccades via an Ensemble of Methods Approach","text":"gaze samples tend noisy, different methods use various approaches computing velocity noisy samples. Methods Engbert & Kliegl (2003) Otero-Millan et al. (2014) used approach based averaging multiple samples compute velocity, whereas Nyström & Holmqvist (2010) compute simple derivative filter . default, package uses former approach (velocity_function = diff_ek) can also use latter (velocity_function = diff_nh) implement custom method (see Velocity computation vignette). Acceleration computed way velocity samples. example using Nyström & Holmqvist (2010) velocity computation","code":"saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-saccade-temporal-properties","dir":"","previous_headings":"Usage","what":"Specifying saccade temporal properties","title":"Extract Saccades via an Ensemble of Methods Approach","text":"votes , saccades detection based minimal duration (minimal_duration_ms parameter, defaults 12 ms) minimal time saccades (minimal_separation_ms, defaults 12 ms).","code":"# Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccade-description-table","dir":"","previous_headings":"Return values","what":"Saccade description table","title":"Extract Saccades via an Ensemble of Methods Approach","text":"extract_saccades() function returns table following columns: Trial Trial index. Eye “Monocular” monocular inputs. “Cyclopean” binocular data averaged applying algorithms. “Binocular” binocular data votes averaged applying algorithms. “Left” “Right” binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"sample-votes","dir":"","previous_headings":"Return values","what":"Sample votes","title":"Extract Saccades via an Ensemble of Methods Approach","text":"Alternatively, use parameter return_votes = TRUE function can return votes per sample method (eye, binocular data). Please see Using sample votes vignette details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Compute velocity via Engbert & Kliegl (2003) algorithm. See formula #1 manuscript.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"","code":"compute_velocity_ek(x, trial, time_window_in_samples, delta_t)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"x Vector coordinates trial Vector trial labels, velocity computed within trials. time_window_in_samples Width window velocity computation samples. delta_t Duration single frame (1 / sampling rate).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Velocity vector","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Differentiate x y compute change amplitude via algorithm proposed Engbert & Kliegl (2003)","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Method options, please refer Engbert & Kliegl (2003) details parameters rationale default values. ek_velocity_time_window Time window velocity computation milliseconds. Defaults 20 ms.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"ek_velocity_time_window\" = 20)) #>                 x             y        amp #> 1              NA            NA         NA #> 2      83.5964584  353.71929932 363.463493 #> 3      36.2506027    7.41033697  37.000261 #> 4      -1.9237646  -85.10935974  85.131099 #> 5     -51.0079002   47.53446960  69.723251 #> 6      15.9906721  118.30906677 119.384827 #> 7     -17.9623680   27.57589722  32.910132 #> 8     -18.1186352  -37.53885269  41.682735 #> 9     -34.0242195  -70.46408081  78.248541 #> 10      3.8607659 -102.30443573 102.377259 #> 11     39.4519424  -98.58553314 106.186454 #> 12    -49.2111359  -30.40192413  57.844731 #> 13     -4.3369188  128.18641663 128.259761 #> 14    140.7018127  117.41658020 183.258433 #> 15    156.8242340   47.53774261 163.870917 #> 16    -49.7212753  -43.63943100  66.155916 #> 17   -179.4933014  -94.01418304 202.624065 #> 18    -37.7476273  -60.60478973  71.399047 #> 19    -19.0446453  -13.77004623  23.501334 #> 20    -50.1590385   60.04493713  78.238888 #> 21    -84.1467438  120.39293671 146.884763 #> 22     56.5592842  105.32484436 119.550305 #> 23    100.9957504  -17.21533775 102.452474 #> 24    -15.6510620 -189.18746948 189.833755 #> 25    -72.2022781 -127.20296478 146.266070 #> 26     31.2211132  -11.67975807  33.334287 #> 27    265.7444763   49.24003601 270.267845 #> 28    221.2923279   12.76550102 221.660218 #> 29     -5.6680579   32.79402924  33.280253 #> 30   -151.5105286  113.18076324 189.117227 #> 31   -137.0838318   79.85826111 158.648413 #> 32   -151.2914429   74.79066467 168.768315 #> 33   -187.0836182  -16.23209381 187.786477 #> 34     17.0406609 -165.74623108 166.619918 #> 35    156.5747375 -179.70677185 238.348846 #> 36    140.4532623    7.01097870 140.628136 #> 37    -27.1780853  169.37025452 171.536968 #> 38    -40.7624283  101.68067169 109.546951 #> 39     88.5297318  -92.22016907 127.836118 #> 40     48.7814827  -64.69036102  81.021453 #> 41     -8.8640146   30.37243271  31.639460 #> 42    -62.0974045   64.47207642  89.513889 #> 43     64.0016937   68.18375397  93.515994 #> 44     82.8871384    0.77158552  82.890730 #> 45    -41.9130974  -39.16460800  57.363527 #> 46   -121.6546097  -53.16825485 132.765611 #> 47    -94.7093887  -63.87655258 114.236957 #> 48    -26.8081303   44.97620392  52.359667 #> 49    -42.4895668   46.66805267  63.113156 #> 50    -80.3070755   44.10061264  91.619269 #> 51     62.6301842   61.31841278  87.649802 #> 52    181.1142578  -36.29592896 184.715373 #> 53    159.2825165 -115.93933105 197.009768 #> 54    -22.1916294 -119.32911682 121.375066 #> 55   -114.7984390  -49.22388840 124.906656 #> 56    -70.9710007   -8.94394493  71.532350 #> 57     33.2290421  -45.72446060  56.523407 #> 58     49.4227371   16.67633057  52.160396 #> 59      3.4006853  128.05355835 128.098706 #> 60   -100.3439713  -53.24666214 113.596301 #> 61   -116.6013184 -158.78785706 197.001145 #> 62     -2.6708071   -6.49963808   7.026984 #> 63    128.8948975  203.88111877 241.208220 #> 64    163.2560883  179.27153015 242.468208 #> 65     84.1502151  -23.41862679  87.348101 #> 66     43.0553589  -21.36544800  48.065022 #> 67    -54.7816086    0.15178701  54.781819 #> 68   -112.0419769  -63.11496353 128.595891 #> 69   -126.7290421  -35.75094223 131.675282 #> 70    -43.8736267   90.23932648 100.339579 #> 71     39.8857574  200.98425293 204.903742 #> 72     52.7658920  136.94410706 146.758059 #> 73    -18.8162727  -24.19443703  30.650007 #> 74    -83.0406723  -94.57434845 125.857303 #> 75    -57.0097542 -138.57025146 149.839336 #> 76    101.7038040  -76.19267273 127.078665 #> 77    142.4222717   -3.39869571 142.462818 #> 78    109.0482635  -34.44440079 114.358824 #> 79     -1.2944989   45.45014572  45.468577 #> 80    -41.1319962   16.59608650  44.353931 #> 81      6.0705128  -90.73576355  90.938605 #> 82    -23.4316483 -118.72833252 121.018425 #> 83    -69.2164383   13.22089386  70.467775 #> 84   -183.9283752  126.79405212 223.397356 #> 85    -77.0902710   16.29553032  78.793745 #> 86     41.3868370 -146.63650513 152.365137 #> 87     55.2916069 -138.93598938 149.533845 #> 88     32.6053658  -20.12469673  38.315967 #> 89     41.1934395  -24.68583298  48.023846 #> 90     91.3922195   -4.52782631  91.504311 #> 91     96.9611664   -3.40769768  97.021030 #> 92     40.2726593   63.99882126  75.615714 #> 93     -7.0726838   83.68404388  83.982391 #> 94    -68.8004303   16.93660927  70.854414 #> 95    -97.0167999  -74.67823029 122.429970 #> 96    -47.0187912  -51.90851593  70.037567 #> 97    -12.9483662   66.30415344  67.556650 #> 98     35.6335182  129.56027222 134.371172 #> 99    -17.3966465  141.38569641 142.451951 #> 100    50.4268303  -46.24490356  68.421169 #> 101    82.6846771 -101.37976074 130.822826 #> 102    32.1437492  -74.53298950  81.168880 #> 103   -21.1888981   23.83857155  31.894308 #> 104   -45.8895302   91.95376587 102.768400 #> 105   -10.4918242  -23.32550240  25.576502 #> 106   -69.0387497  -13.85454655  70.415179 #> 107  -110.7522125   54.41586685 123.398295 #> 108   -69.6824417  115.49557495 134.888363 #> 109    67.0328445   62.59561539  91.714848 #> 110   120.9660950 -146.95712280 190.339676 #> 111   141.5367432 -147.61238098 204.504437 #> 112    43.0280571   16.60894012  46.122344 #> 113   -99.9705887  142.53858948 174.101603 #> 114   -99.2521362   99.05429840 140.223894 #> 115    28.0268269  -30.54415703  41.454174 #> 116   131.2266998  -49.68000793 140.315893 #> 117    89.0407562  -23.03337288  91.971694 #> 118   -20.8925362  -23.46214294  31.416082 #> 119   -87.1069794  -43.57197189  97.396830 #> 120   -39.7460747 -123.47339630 129.712875 #> 121   -65.9408340  -51.87054825  83.897243 #> 122   -69.4172592   73.83473206 101.342605 #> 123   -34.2696686  140.04449463 144.176526 #> 124   -62.1524734  102.28570557 119.688327 #> 125   -42.5893555   50.75358963  66.255415 #> 126   -57.4504051  -39.37132263  69.646609 #> 127    79.1130905 -122.52713776 145.848485 #> 128   206.9855499  -95.28136444 227.863021 #> 129    94.0290222   21.01173973  96.348068 #> 130   -49.7541237  100.40355682 112.055107 #> 131  -121.6758270   55.83302689 133.874321 #> 132   -97.2508850   28.28610992 101.280989 #> 133    42.0805321   -8.81852150  42.994622 #> 134   117.7131042  -22.32388115 119.811229 #> 135     9.1105795  -45.27533340  46.182881 #> 136   -14.0547094  -47.29813766  49.342159 #> 137    -2.1738048  -49.33021545  49.378088 #> 138    16.7503681   -5.41187811  17.602933 #> 139   -55.9012337   -9.83218575  56.759315 #> 140   -80.0961838   19.91369057  82.534561 #> 141   -48.6606064   58.13911057  75.815637 #> 142   -85.5807037  -10.57353210  86.231412 #> 143   -19.6909447  -12.33423710  23.235032 #> 144   159.3507843    2.22299767 159.366289 #> 145   255.2388153   -0.57013750 255.239452 #> 146    91.3393097   34.59766769  97.672248 #> 147  -111.7990189   -5.36026239 111.927445 #> 148  -141.2005463  -13.02712727 141.800213 #> 149     3.7758646 -104.41368866 104.481939 #> 150   124.2413788  -36.88462448 129.600909 #> 151    91.8211594  117.24235535 148.919089 #> 152   -70.7185822   -4.84669352  70.884471 #> 153   -82.6106873 -158.77243042 178.978240 #> 154   -53.1674156 -135.55189514 145.605942 #> 155   -36.6575775   92.76426697  99.744610 #> 156    20.2388325  194.10791016 195.160168 #> 157   -42.2785339   83.76420593  93.829189 #> 158   -62.7411652  -28.57018471  68.939896 #> 159   -68.1157379 -101.02299500 121.841698 #> 160    55.4656868  -88.36479187 104.330144 #> 161    92.8313904   21.38428688  95.262557 #> 162    57.2518196   36.54690170  67.922359 #> 163    27.8955269   87.82576752  92.149476 #> 164    50.1905785   17.40625191  53.123175 #> 165    51.1857452  -44.90263367  68.089845 #> 166   -40.3380852  -54.90361023  68.129051 #> 167  -112.4156723  -12.23504925 113.079529 #> 168  -122.9173355   42.81399536 130.160323 #> 169   -11.9670296  -42.72460938  44.368931 #> 170    56.5762177  -38.76630783  68.583489 #> 171    37.3342361  147.04826355 151.713668 #> 172   -32.6348228  150.90957642 154.397966 #> 173   -43.7315216  -83.47206879  94.233923 #> 174   -38.9181557 -147.06231689 152.124777 #> 175    59.4101944   18.70984840  62.286673 #> 176    95.7946930  108.88218689 145.023977 #> 177   111.0327454   16.05690765 112.187766 #> 178    66.4907608  -66.08896637  93.748455 #> 179    -5.3833032  -92.89695740  93.052806 #> 180   -81.4554367  -27.76130104  86.056249 #> 181  -143.2841644  -24.88187981 145.428538 #> 182  -164.6732330  130.85159302 210.331674 #> 183  -124.4492722   91.21720886 154.299062 #> 184   -36.9026604  -33.76340485  50.017735 #> 185   102.2727203  -17.10977936 103.694040 #> 186   186.8810883  -52.18580627 194.030666 #> 187   105.5477142   42.98226166 113.964007 #> 188     9.5038176    4.66323090  10.586230 #> 189   -74.9679337  -22.36788940  78.233711 #> 190   -86.0345764  -13.23497295  87.046613 #> 191    -8.9459982   33.19957733  34.383758 #> 192    14.1716557   58.80925369  60.492678 #> 193    32.0004730   20.03813744  37.756552 #> 194    38.0872498  -29.58199883  48.225857 #> 195    46.0789108  -56.21105957  72.683899 #> 196    46.1166992  -32.42123413  56.372745 #> 197   -21.9444962 -102.38980865 104.715012 #> 198    13.6995945  -49.47499466  51.336673 #> 199    17.8661613    7.11783838  19.231832 #> 200    -1.3027704   68.79072571  68.803061 #> 201    83.9183884   46.59579468  95.986791 #> 202    21.3223743  -81.00074768  83.760162 #> 203   -14.2809944 -103.11479950 104.099033 #> 204   -53.0888786   11.96696568  54.420927 #> 205   -54.8915558  116.71440887 128.978045 #> 206    71.4269333   37.38277435  80.618104 #> 207    90.7818832    5.78904533  90.966276 #> 208    42.2976379   57.64610672  71.499397 #> 209   -84.8083725  117.38185883 144.813538 #> 210  -118.6647034   87.14585114 147.226734 #> 211   -18.0314598   34.22853851  38.687548 #> 212   -28.7923164   28.36307907  40.416107 #> 213   -66.2289581 -130.55703735 146.394723 #> 214   -40.6946449 -190.04518127 194.353351 #> 215   -19.6708374 -148.45184326 149.749429 #> 216   -18.1602211    9.38801956  20.443301 #> 217   -83.2091980   59.61377716 102.360017 #> 218   -21.9610424  117.37867737 119.415415 #> 219    86.5766373  142.57514954 166.802840 #> 220   147.8436584   65.13146210 161.554495 #> 221    33.9878693   18.80188942  38.841811 #> 222   -96.9891434 -113.23935699 149.097438 #> 223   -13.6476269 -128.45288086 129.175850 #> 224    94.9342728 -210.20164490 230.645285 #> 225   163.8195038  -80.85556030 182.686758 #> 226    16.7928543  228.14105225 228.758256 #> 227   -56.7815895  245.11437988 251.605263 #> 228   -24.3652306   79.95312500  83.583292 #> 229    96.1388931 -138.04924011 168.226869 #> 230   140.3195953  -73.23486328 158.281187 #> 231   -35.5582314   56.29784393  66.587049 #> 232  -130.9377594   54.10880661 141.677309 #> 233   -50.8165512   59.40374374  78.173695 #> 234    71.0454407  -54.54254532  89.567538 #> 235     9.4007597  -95.94954681  96.408972 #> 236  -132.5621643  -79.37492371 154.509242 #> 237  -148.4096985  -48.70329285 156.196829 #> 238   -23.3553200   51.26379013  56.333357 #> 239    59.0662994   87.67605591 105.716217 #> 240    67.7534714   58.45033646  89.481700 #> 241     5.9081607  -81.86647034  82.079384 #> 242    -5.4913239  -96.60652161  96.762465 #> 243   -15.2783537   45.48671341  47.984051 #> 244    41.0019417   93.26740265 101.882126 #> 245    58.1964302  -76.71002197  96.287341 #> 246    -2.4931648 -158.67016602 158.689752 #> 247   -44.8687134  -32.06776047  55.150183 #> 248     2.1397357   56.37292862  56.413523 #> 249   -18.7389259   64.41403961  67.084393 #> 250    26.9712315  102.31047821 105.805866 #> 251   141.2466431  136.94068909 196.731712 #> 252    97.9345856   79.38700104 126.069342 #> 253   -20.9999752  -20.54061699  29.375430 #> 254  -166.7921295  -84.06656647 186.780090 #> 255   -68.4442444 -100.19620514 121.342054 #> 256    -3.1101296 -123.01626587 123.055575 #> 257  -136.7077179   45.43517303 144.060248 #> 258   -34.6769714   77.65416718  85.045059 #> 259   112.3130035   85.74031067 141.299723 #> 260   224.8787537   -4.17773104 224.917557 #> 261    88.6502151 -111.17916870 142.195880 #> 262  -126.7739029 -155.04444885 200.275819 #> 263  -123.9640579  -56.24002075 136.125044 #> 264   -50.4061279  170.37187195 177.672036 #> 265    45.9022865  148.46655273 155.400570 #> 266    14.4426622   72.97444153  74.389916 #> 267   -39.5041389   12.57084942  41.456040 #> 268    33.5073433   35.37828064  48.727454 #> 269    59.6390152  -18.54594994  62.456100 #> 270    22.0536766 -148.80691528 150.432253 #> 271    19.9764786 -123.53957367 125.144261 #> 272    56.6563950  -62.98833084  84.719991 #> 273    84.1867905   62.99137115 105.144322 #> 274   -12.1377859  117.97622681 118.598971 #> 275   -38.1852913   52.16507721  64.647597 #> 276   -43.6848335   10.81493378  45.003638 #> 277   -81.9223328  -77.29937744 112.634197 #> 278   -93.0114365  -26.13617134  96.613802 #> 279   -64.7565994    7.76248217  65.220191 #> 280    48.4983711   56.86454391  74.737329 #> 281    56.5669670   70.50070190  90.388997 #> 282    49.4861641   -5.75842094  49.820075 #> 283    -4.9494057  -44.45799637  44.732651 #> 284   -39.1371536 -119.52637482 125.770708 #> 285   -55.5324249  -28.50234032  62.419818 #> 286     2.0592864   33.90407562  33.966557 #> 287    54.1134109   19.72943306  57.597845 #> 288    12.3774672  -51.72109985  53.181518 #> 289   -32.9690704 -160.86483765 164.208573 #> 290  -128.4083862  -95.12213898 159.802800 #> 291   -22.7235298   16.28308678  27.955281 #> 292    68.1771622   79.37742615 104.636997 #> 293   153.1009979   89.08130646 177.131010 #> 294    45.6674309   34.86347580  57.454122 #> 295  -125.2268143  104.69649506 163.227176 #> 296   -27.9611073   68.30666351  73.808020 #> 297   106.1894989  -14.03986073 107.113619 #> 298   105.9476624  -65.41093445 124.513041 #> 299   -90.9123611  -76.48400116 118.805976 #> 300  -225.7930450    0.32669726 225.793281 #> 301  -225.7936554   25.43455887 227.221679 #> 302   -68.0328979   10.78770065  68.882869 #> 303   114.7939224  -49.89190674 125.167276 #> 304   114.1936264  -55.64629364 127.030289 #> 305    57.1300735  -24.34141350  62.099515 #> 306    38.6665382  144.20930481 149.303130 #> 307    72.6796265  213.09367371 225.147156 #> 308    79.3488617  177.41348267 194.349648 #> 309    77.5934906   34.77040100  85.027822 #> 310    49.8036995 -114.00360870 124.407521 #> 311   -19.2590084 -156.51304626 157.693510 #> 312  -135.8672943 -189.30311584 233.014144 #> 313  -148.8911438 -137.12570190 202.415491 #> 314   -43.6580467   -0.71714067  43.663936 #> 315   101.9239197   89.25527954 135.480590 #> 316   235.2789154   48.17904663 240.161172 #> 317   124.6417465    4.07052517 124.708196 #> 318   -37.5765495   30.05844498  48.119717 #> 319   -94.9339371   52.63769150 108.550352 #> 320   -27.0823307  -23.79408264  36.050118 #> 321    30.3802032  -69.45016479  75.804236 #> 322   -21.1398373    2.77409410  21.321077 #> 323  -112.6311722   87.74143219 142.773737 #> 324  -132.8941345   13.18703365 133.546804 #> 325     9.8286209 -119.49548340 119.899009 #> 326    80.8523178  -33.02212906  87.335894 #> 327   153.0110168   30.38905525 155.999570 #> 328   113.7554321   -8.53473854 114.075151 #> 329    86.0363617 -118.64096832 146.553522 #> 330   -69.8014221  -42.37222290  81.655642 #> 331  -179.4603424  135.38674927 224.801215 #> 332  -140.3579254  107.02261353 176.505487 #> 333   -60.5411987   54.85614014  81.697202 #> 334   107.5112228  -61.23849869 123.728803 #> 335   100.7055893  -94.23670959 137.920895 #> 336    31.4961166  -21.16209030  37.945216 #> 337  -100.3967056  133.80575562 167.282631 #> 338  -125.1553574  197.96586609 234.210050 #> 339   -61.0122643   58.20656204  84.323782 #> 340    23.7614403 -138.04557800 140.075650 #> 341   -46.2971573 -194.99154663 200.412400 #> 342   -47.0850296  -49.29986572  68.172405 #> 343    30.1624260   84.13680267  89.379939 #> 344   159.2349243   91.58595276 183.694714 #> 345   116.5656509   37.50329590 122.450187 #> 346   -18.5230465  -21.25127602  28.190778 #> 347    22.3406525    6.88158512  23.376505 #> 348    89.1506271    4.47213984  89.262727 #> 349    11.5853319  -52.71152496  53.969665 #> 350  -139.7593994  -23.38891792 141.702968 #> 351  -119.0064240   66.38847351 136.271634 #> 352   -38.4153175   96.44178772 103.811151 #> 353   -37.6732254   38.04404449  53.540837 #> 354   -60.8524094 -110.70909882 126.330995 #> 355    10.7191858 -104.82679749 105.373424 #> 356   133.9055939  -80.71343231 156.350140 #> 357   171.4027557  -96.16698456 196.537512 #> 358     3.5379148   33.00851440  33.197573 #> 359   -65.3148956  111.41201019 129.145931 #> 360   -89.9586334  179.96701050 201.198113 #> 361   -16.7003250   32.00393295  36.099205 #> 362   -48.0035324   12.92300606  49.712606 #> 363  -118.9486160   36.63335800 124.461947 #> 364   -57.3005371  -39.00902176  69.318506 #> 365   101.6471176  -78.04384613 128.152169 #> 366   186.8071594 -167.73942566 251.064593 #> 367   114.2499466  -11.41457844 114.818739 #> 368   -17.6588554   94.73165131  96.363483 #> 369   -50.9501457  189.07359314 195.818132 #> 370   -49.0838280  110.91436768 121.289815 #> 371  -110.5472031  -81.09359741 137.101625 #> 372  -111.6426086 -131.72462463 172.671505 #> 373   -61.0903778 -145.82363892 158.103029 #> 374    62.1180344    2.39283299  62.164104 #> 375   104.9382477    6.56835032 105.143612 #> 376   137.3597412   34.82942200 141.706694 #> 377   145.9811249   45.28936768 152.845071 #> 378    78.1532211   62.73230362 100.216106 #> 379   -68.4336472   50.32675934  84.946729 #> 380  -120.2359009   14.96143723 121.163181 #> 381   -84.1738739    5.53101921  84.355398 #> 382   -49.6635780  -10.57871437  50.777753 #> 383   -53.8854752  -30.53139877  61.933922 #> 384    29.0648918  -98.36572266 102.569895 #> 385   134.5310059  -43.27827072 141.320912 #> 386    95.6856003  -69.92468262 118.512427 #> 387   -50.7136688   -7.60549545  51.280793 #> 388  -209.6713409   42.73087311 213.981305 #> 389  -149.4402313    9.11961651 149.718236 #> 390    25.4984264  -31.05534744  40.182140 #> 391   165.3285675 -111.26795959 199.283953 #> 392   221.0568542  -45.30927658 225.652528 #> 393    84.3420715    8.96253395  84.816933 #> 394   -36.7235985   45.06487274  58.133170 #> 395  -149.6265259   88.19984436 173.687391 #> 396  -170.9530182  107.13507843 201.749497 #> 397    -6.9377403   12.37346363  14.185727 #> 398    61.5700684 -104.07921600 120.927071 #> 399    29.2146702 -176.59748840 178.997681 #> 400   -56.7082558 -177.27491760 186.124213 #> 401   -33.0058670   25.81067657  41.899622 #> 402     7.8842397  110.31368256 110.595071 #> 403     6.0709472  131.03355408 131.174116 #> 404   -12.4504805   33.88129425  36.096490 #> 405   -94.9812622   31.65414429 100.117057 #> 406   -48.0206070   51.74245834  70.592214 #> 407    44.8474197  -27.22745323  52.465467 #> 408   192.5456696  -14.51291370 193.091842 #> 409   144.2350006   36.92821884 148.887302 #> 410   -42.7991753   71.38059998  83.228357 #> 411   -84.9586639   35.97161102  92.260129 #> 412   -11.4332485   27.03132248  29.349814 #> 413    34.5739784   71.24048615  79.186911 #> 414   -27.8708477    2.61035752  27.992823 #> 415   -35.8743706  -47.68965149  59.676405 #> 416    -6.8925009  -98.43029785  98.671324 #> 417   -36.2662773  -81.18564606  88.917670 #> 418   -92.8056107   -0.39394140  92.806447 #> 419   -52.2323265   27.24114037  58.909215 #> 420    17.9682007   29.19582558  34.281955 #> 421    36.9471016  -25.13275528  44.684938 #> 422    -2.6366920  -11.14871693  11.456266 #> 423    56.5762253   -3.21412635  56.667450 #> 424    56.7289124   26.80868912  62.744524 #> 425    71.7051544  -41.89389801  83.046540 #> 426    54.9393845  -65.37674713  85.395872 #> 427    31.8091602   15.94537640  35.581986 #> 428    16.1197205   73.17456818  74.929052 #> 429   -64.3943939  137.73326111 152.043050 #> 430   -46.4279251   34.35950851  57.759225 #> 431   -27.0355015  -63.89004517  69.374752 #> 432    21.1195889 -165.06848145 166.414064 #> 433   -11.6708202 -137.98939514 138.482061 #> 434   -10.9844284   32.08378983  33.912052 #> 435    47.7716331   99.38629150 110.271319 #> 436    46.1059265  108.92401886 118.280169 #> 437   -18.9777145   39.39282990  43.725836 #> 438   -56.6279716   65.92487335  86.906939 #> 439   -57.7246704   25.41861343  63.073318 #> 440    42.6936111  -14.20941353  44.996132 #> 441    88.9130859   -7.58073473  89.235668 #> 442    -7.8545365 -115.41759491 115.684549 #> 443   -49.6012001 -142.42697144 150.816847 #> 444   -60.1692543  -43.46732712  74.227675 #> 445    -2.0122550  105.92121887 105.940331 #> 446    49.5195923   81.65150452  95.494284 #> 447    87.7206497  -68.46677399 111.277183 #> 448   156.4388733 -117.10975647 195.417031 #> 449    64.0165634  -10.09620762  64.807822 #> 450   -58.2434883   43.89039230  72.929215 #> 451   -69.6927261   33.09745026  77.152559 #> 452  -155.2043304    1.19356704 155.208920 #> 453  -176.0703278  -24.22784424 177.729426 #> 454   -30.3613148   50.08656311  58.570242 #> 455   142.2644196   64.43812561 156.177582 #> 456   177.1892090   34.32496262 180.483292 #> 457    -6.2568121  -70.14714050  70.425628 #> 458   -29.8326340  -79.19102478  84.623900 #> 459    59.5998001   61.69883728  85.783930 #> 460    74.8785019  163.66917419 179.984412 #> 461    35.3056374   40.47869492  53.712315 #> 462    -3.0417588  -62.97676849  63.050184 #> 463   -27.8608036  -66.73352051  72.315884 #> 464   -46.4419403   40.81893539  61.830731 #> 465   -66.6277618  -46.17556381  81.064427 #> 466    -1.3270563 -128.34994507 128.356805 #> 467   -26.6817932  -23.67130470  35.668596 #> 468  -145.1918182   92.72094727 172.272569 #> 469  -136.7307587  217.31539917 256.751403 #> 470   -37.7828712   81.10695648  89.475604 #> 471   155.5397644  -15.52028942 156.312180 #> 472   124.4590149  -61.31369400 138.742263 #> 473    47.3268318 -122.14013672 130.988709 #> 474   -12.5603676 -123.22706604 123.865543 #> 475   -58.4159050  -80.71937561  99.639528 #> 476   -14.4633217  -22.53883362  26.780342 #> 477    60.4352112   15.39232063  62.364560 #> 478    39.6909637   -0.20260152  39.691481 #> 479   -69.4351120  104.88651276 125.787183 #> 480  -158.4856110  182.44665527 241.670170 #> 481   -10.4412708   -1.93092012  10.618314 #> 482   147.2464447 -182.46691895 234.468957 #> 483    97.6405411 -185.63845825 209.750596 #> 484    -4.5013924    2.25362134   5.034019 #> 485   -72.0336838  160.60171509 176.016370 #> 486   -30.5319977  178.75192261 181.340709 #> 487    27.6846313   13.37137699  30.744634 #> 488    61.6097679 -121.53536224 136.259340 #> 489    19.1033115  -91.62683105  93.597076 #> 490  -116.2347717   53.50143814 127.956735 #> 491  -179.0079041   91.16770935 200.886488 #> 492   -69.8987198  -57.40713120  90.451146 #> 493    93.6198502  -15.20528984  94.846598 #> 494    74.6580505   37.04909515  83.345426 #> 495    16.7354736   46.29816055  49.230029 #> 496    -7.1853790  -27.03193474  27.970613 #> 497    13.0348206  -63.15201569  64.483204 #> 498    37.5728340   29.76360130  47.933181 #> 499    13.7159300   10.30802441  17.157567 #> 500    35.6383781    9.56806278  36.900431 #> 501     5.4869413   -7.09735394   8.971007 #> 502   -24.7587204   53.96280670  59.371531 #> 503   -46.3495941  132.35081482 140.232033 #> 504   -27.4754162   80.70433044  85.253079 #> 505   -37.6956329   35.24022675  51.602658 #> 506    -1.6862965  -30.77552986  30.821694 #> 507    36.1173019  -35.51512527  50.653565 #> 508    30.2395744   -8.87391376  31.514730 #> 509    -3.5222266  -34.42670059  34.606413 #> 510    -7.7864885  -50.53136063  51.127760 #> 511    15.2044544 -123.15292358 124.087945 #> 512   -53.9195747  -53.17428589  75.728629 #> 513   -74.1284409   72.67083740 103.807882 #> 514   -74.9365692   82.93401337 111.774505 #> 515    -3.5397546    8.89166355   9.570347 #> 516   -22.0965748  -76.99301910  80.101084 #> 517   -59.7010880  -20.25344467  63.043016 #> 518    30.0396385  -46.01666641  54.953739 #> 519    84.3136368  -85.82469940 120.310716 #> 520    70.0436249  -99.35766602 121.565025 #> 521    33.9923782  -23.72604752  41.453674 #> 522    63.8838463  -11.78269482  64.961356 #> 523   119.8960114  -79.46016693 143.836614 #> 524    18.1740093  -27.54918671  33.003823 #> 525   -91.1484222   62.20498657 110.351689 #> 526   -14.8548098  192.13780212 192.711184 #> 527    12.6472893  142.58732605 143.147125 #> 528   -71.6823883   31.80784225  78.422596 #> 529  -135.9187164   -1.23919380 135.924365 #> 530   -39.2975082   21.32375717  44.710142 #> 531   125.2388840   39.89365768 131.439271 #> 532    50.4841614   -6.58682585  50.912050 #> 533   -18.8516312   16.62634850  25.136019 #> 534   -31.3603153   73.74674225  80.137703 #> 535     7.5080624   59.44783783  59.920084 #> 536    36.3577271  -77.54874420  85.648655 #> 537   -31.6356640 -189.62280273 192.243654 #> 538     1.9634423 -168.73693848 168.748362 #> 539   109.4104919    4.17459965 109.490105 #> 540   136.2031555   49.50543213 144.920969 #> 541    28.8234806  -58.93613434  65.606867 #> 542   -97.4447021   36.94104004 104.211854 #> 543  -156.1456299   68.50159454 170.510780 #> 544   -16.8315067   26.81923676  31.663403 #> 545    -2.2511320  -57.73617935  57.780048 #> 546    31.2469845   42.27008820  52.565525 #> 547   -28.5091171  205.75358582 207.719301 #> 548  -123.1428680   52.02584839 133.681917 #> 549    15.7306128  -75.01670837  76.648279 #> 550   184.8143768 -136.21923828 229.591016 #> 551   182.2845001 -156.05897522 239.962586 #> 552     9.3592215  -71.42420959  72.034802 #> 553   -40.3714523   58.08672714  70.738406 #> 554    -6.0150137   52.22120285  52.566476 #> 555  -101.0722809   18.42146111 102.737316 #> 556   -99.8079147   52.90150070 112.961005 #> 557   -17.5215015   45.53818130  48.792714 #> 558     9.0755358    7.80321169  11.968937 #> 559    18.0194855  -52.92538071  55.908835 #> 560   122.8254852  -30.02327728 126.441674 #> 561   104.1867599  -51.23449326 116.102775 #> 562  -138.1550446  -26.24502945 140.625808 #> 563  -200.1587982  112.59050751 229.652274 #> 564    -1.9338949  120.08949280 120.105063 #> 565   173.7665863   69.39836121 187.112156 #> 566    64.7601013  -36.94757843  74.558663 #> 567    -0.8270794   51.70781708  51.714431 #> 568    27.6821270  -30.84523010  41.445487 #> 569    80.9578857 -177.69155884 195.265126 #> 570   -58.1492920  -63.65600586  86.217326 #> 571  -191.2136078   85.87374115 209.611410 #> 572   -88.9607162  148.75463867 173.326142 #> 573    96.5626907  -39.70607376 104.407498 #> 574   222.8290863 -136.36541748 261.243811 #> 575    75.5989532  -55.00630951  93.492758 #> 576    -7.9803700  -31.07775688  32.086029 #> 577   -43.0117378  -22.37997437  48.485800 #> 578    -8.7867832   31.39543915  32.601858 #> 579    65.3967209   36.71134186  74.996358 #> 580     5.2977371   -1.70826626   5.566345 #> 581   -54.6311035  -51.95933151  75.394493 #> 582   -75.3463821  -79.06707764 109.218497 #> 583   -42.0752602 -105.46029663 113.543832 #> 584   -30.0780888   -0.30986598  30.079685 #> 585     5.0201411  109.44892120 109.563991 #> 586    48.3419456  116.17124939 125.828069 #> 587    -2.0780525   78.12123108  78.148865 #> 588  -125.3302307   46.18814468 133.570249 #> 589   -49.1492348  105.03423309 115.964811 #> 590    63.5846214   -5.42267179  63.815433 #> 591   145.2703552 -106.36695099 180.048339 #> 592     7.6480598  -47.06723022  47.684557 #> 593   -87.4070206   53.71175766 102.591131 #> 594  -100.9039078  122.79978180 158.938306 #> 595   -88.2923279   49.46884155 101.206232 #> 596    14.0797634  -99.11278534 100.107862 #> 597   -57.9644470 -190.69317627 199.308215 #> 598   -32.6528435  -43.64490891  54.507672 #> 599   -42.2003822   98.84909058 107.480300 #> 600    97.5170441    2.91791654  97.560689 #> 601   131.5012512 -113.26596832 173.556212 #> 602    69.2873535   -5.96918344  69.544004 #> 603    -8.4007692  151.29113770 151.524194 #> 604    27.5223675  113.12616730 116.425987 #> 605   130.8254547  -34.34069061 135.257468 #> 606    14.6574154  -62.26845169  63.970305 #> 607   -82.9580002    9.81087399  83.536118 #> 608  -140.5053558  -16.05609894 141.419777 #> 609   -20.2583256  -97.19918060  99.287867 #> 610    40.4895325 -107.90291595 115.249475 #> 611    15.6169319  -38.16882706  41.240125 #> 612   -54.1206131   49.84659576  73.578012 #> 613  -126.5006714   36.11052322 131.553752 #> 614    22.2479649   76.53102112  79.699242 #> 615   104.7810211  107.56975555 150.167622 #> 616    19.1071930   59.38010025  62.378531 #> 617  -134.3301392  -16.52739143 135.343049 #> 618  -191.9993591  -66.28918457 203.120678 #> 619    50.0943642  -80.61018372  94.907571 #> 620   229.7772369   20.81455421 230.718062 #> 621   188.5512695   71.17938995 201.539293 #> 622    11.2592573   72.39346313  73.263800 #> 623  -161.8825226   13.76240063 162.466473 #> 624   -93.1781311  -49.95124054 105.722706 #> 625    37.0654106   35.01506042  50.989206 #> 626   140.6601715 -102.22858429 173.884925 #> 627   195.2699738  -70.09934998 207.471158 #> 628    34.8568306    8.14429951  35.795646 #> 629  -183.9811554   -1.05141044 183.984160 #> 630  -182.6408691   68.27725220 194.985821 #> 631   -31.8032627   46.25936127  56.137118 #> 632    96.4436951   76.65398407 123.195859 #> 633    89.0545425  -89.78849792 126.462192 #> 634    -5.7383189 -167.02134705 167.119893 #> 635   -57.5423622  -70.69983673  91.156955 #> 636   -55.7481728   48.28030396  73.748536 #> 637    15.6619272   88.00556946  89.388345 #> 638    12.5065355   21.25176048  24.658685 #> 639   -54.2361450   14.60653782  56.168589 #> 640   -71.7220078   -1.26922834  71.733237 #> 641    45.4569168   21.97994041  50.492069 #> 642    38.6457405   14.69994831  41.347089 #> 643   -48.1601295    5.62311316  48.487292 #> 644     1.6138332   89.96566010  89.980134 #> 645   109.4103470   93.51651001 143.930406 #> 646   134.6110382   -2.16930079 134.628517 #> 647     0.8480313 -117.94136810 117.944417 #> 648   -76.0415649  -69.91884613 103.300361 #> 649   -61.2592735  114.40133667 129.770430 #> 650   -28.3255978  100.27233887 104.196360 #> 651   -29.0958424  -30.45660019  42.120928 #> 652   -84.2030945 -158.91867065 179.848005 #> 653   -75.3944244 -112.62754822 135.533331 #> 654    31.3891163   18.34716415  36.357875 #> 655    68.8789215   78.30856323 104.290637 #> 656    88.8375397   33.25576782  94.858076 #> 657    84.3188248  -73.97174072 112.167208 #> 658   108.1730423  -81.24784851 135.287176 #> 659    14.2068090   30.37677956  33.534790 #> 660   -85.4733200  104.84680176 135.272097 #> 661   -83.7314911   55.93468857 100.695839 #> 662  -132.2292938  -88.50804901 159.117129 #> 663  -174.2733154 -102.97983551 202.425381 #> 664  -138.7221375  -34.35727692 142.913449 #> 665    95.5983810    9.31388855  96.051023 #> 666   237.7726746   27.03472710 239.304662 #> 667   183.2294006  -17.88891029 184.100588 #> 668    68.1651917   18.00237846  70.502333 #> 669   -23.9374256   38.87934875  45.657465 #> 670   -35.9954376   11.39296722  37.755413 #> 671  -116.9543076    5.56992197 117.086866 #> 672  -104.5876541  -46.31287766 114.382953 #> 673    -1.8271295  -13.21302223  13.338754 #> 674    51.3592796    0.61474198  51.362959 #> 675    65.2660828   77.59511566 101.393607 #> 676    49.2013893  112.89172363 123.147546 #> 677    20.0566769   80.92660522  83.374971 #> 678   -43.6643867  -25.04704666  50.338188 #> 679  -137.7418365  -98.69691467 169.451747 #> 680  -103.4494095   85.34954834 134.113108 #> 681    -7.0282640  119.71266937 119.918805 #> 682    63.1692200   27.58241844  68.928515 #> 683    59.4594612  -82.95883942 102.066628 #> 684   -49.1958389  -86.04809570  99.118643 #> 685    -4.8708482   39.44057083  39.740204 #> 686    52.2637024  -25.79071426  58.280833 #> 687   169.0625153 -100.51262665 196.684830 #> 688   132.1769562  -70.58987427 149.845514 #> 689   -39.8517075   78.43416595  87.977707 #> 690  -117.3011627  142.32049561 184.430709 #> 691   -70.4129257  -37.23768234  79.653155 #> 692     5.0576138 -130.50541687 130.603382 #> 693    62.7414665 -103.39685059 120.943790 #> 694    70.8412933   -5.88927794  71.085670 #> 695   177.0006866   55.45821381 185.485462 #> 696   111.9951706   66.29211426 130.144392 #> 697  -126.8248825   35.33552933 131.655423 #> 698  -214.7178192  -69.86581421 225.798525 #> 699  -183.3981628   -0.77238756 183.399789 #> 700    23.7276459   76.34977722  79.951796 #> 701    93.0550003   80.88027954 123.291738 #> 702   127.6712036   44.01086044 135.044038 #> 703    96.7854843  -51.80478668 109.777802 #> 704    38.5571136  -57.65282059  69.357759 #> 705   -57.0709419  -54.40851593  78.850358 #> 706  -112.0690002   51.22482300 123.221116 #> 707   -98.7415390   46.48808289 109.137681 #> 708    20.5829544  -72.76154327  75.616798 #> 709   109.4668732  -80.23478699 135.722575 #> 710    83.3930969  -28.12186813  88.007091 #> 711    41.6402054  -76.65395355  87.233797 #> 712   -77.4824295  -77.27952576 109.433322 #> 713  -170.3559723   75.01540375 186.140990 #> 714  -186.0869751  214.92301941 284.289055 #> 715   -72.6301041  131.42756653 150.161038 #> 716   105.8966293  -88.64528656 138.101712 #> 717   134.6324310  -86.95889282 160.273955 #> 718    44.2380486  -19.12644196  48.195702 #> 719    51.4249611  -30.87010002  59.979077 #> 720    11.7458181  -64.97853851  66.031619 #> 721    26.2503071  -31.27182007  40.828977 #> 722    52.9106712   69.32434082  87.208964 #> 723    15.9843712  172.44462585 173.183859 #> 724     1.6271659  173.26663208 173.274272 #> 725   -82.8598557   18.50565147  84.901206 #> 726   -77.0725861  -32.19221878  83.525580 #> 727   -30.4186687 -127.83921814 131.408375 #> 728   -23.0215454 -174.67655945 176.187094 #> 729   -16.6603642  -67.66413879  69.685030 #> 730   -15.7666225   30.22868347  34.093397 #> 731   152.4528961  184.13098145 239.052513 #> 732   173.1341858   79.09725952 190.346586 #> 733    19.9368629   67.93158722  70.796745 #> 734  -186.0033875  -17.79656029 186.852824 #> 735  -175.5900574 -107.18144226 205.717597 #> 736    83.4858780 -114.65119934 141.826617 #> 737   124.6319275  -96.55952454 157.660582 #> 738   111.7669220  -57.97257614 125.907365 #> 739   -41.2646866  -93.99811554 102.656807 #> 740  -100.3314819   24.20195961 103.209210 #> 741   -96.9480591  107.51243591 144.768263 #> 742   -19.8751202  130.78652954 132.288082 #> 743    78.9090500   -2.37575412  78.944806 #> 744   -27.3217449  -67.71886444  73.022752 #> 745   -61.3839836   -6.91287947  61.772011 #> 746   -59.5965080   29.36269569  66.437276 #> 747    45.2097588  -30.71806526  54.658227 #> 748   149.8528595  -97.11428070 178.569491 #> 749   112.0874863  -55.30201721 124.987670 #> 750    75.5009995   -7.23812675  75.847158 #> 751     5.1797924    9.83347893  11.114295 #> 752   -32.0203552   68.68015289  75.777744 #> 753   -10.7113819   83.78404236  84.465966 #> 754  -112.9874344   19.92040062 114.730043 #> 755  -123.2190933  -45.76586533 131.443750 #> 756   -10.4778271  -25.24215889  27.330412 #> 757    36.5383301   10.13768196  37.918626 #> 758    36.6772232  -22.40138054  42.977210 #> 759   -50.7141991  -40.39194489  64.833936 #> 760   -55.5917168   32.05152893  64.169615 #> 761   -34.3332405  111.97346497 117.118864 #> 762   -46.1355705    4.15422916  46.322225 #> 763   -13.1604919  -35.79003906  38.132997 #> 764    16.2084312   32.15732956  36.011208 #> 765   119.0135803   81.37802887 144.175642 #> 766   128.1477966    7.11335802 128.345073 #> 767    36.1984062 -127.20988464 132.259893 #> 768   -89.3464050   30.12089920  94.287055 #> 769  -103.5685120   98.09017944 142.646837 #> 770   -49.8138924   79.13164520  93.505300 #> 771   -25.9502106  -91.63839722  95.241846 #> 772    18.0621185 -160.21633911 161.231248 #> 773    23.1025772  -70.90977478  74.578316 #> 774    14.3914194  -17.55210876  22.697786 #> 775   -72.3206482   71.29862213 101.556731 #> 776    -3.7400007  -54.57344055  54.701444 #> 777    50.9085655  -61.72308350  80.008881 #> 778    31.4610500   29.09338951  42.851172 #> 779    13.2849798  135.32417297 135.974713 #> 780    62.4088058   90.71240997 110.107222 #> 781    86.7586517  -40.20917511  95.623435 #> 782   -52.0069313  -32.96717453  61.575608 #> 783  -112.8553009   67.98697662 131.751842 #> 784   -29.2935448   72.48961639  78.184757 #> 785    13.7422915    2.58801699  13.983862 #> 786     9.2948647 -122.79952240 123.150791 #> 787   -20.4895744  -59.44213104  62.874395 #> 788    25.5938339   26.37437439  36.751217 #> 789    58.9082031   45.86746216  74.659229 #> 790    -3.7834582   57.43982697  57.564297 #> 791    29.6942425   -0.99607199  29.710944 #> 792   -17.7926102   -1.49390256  17.855216 #> 793     6.7915139 -176.64994812 176.780454 #> 794   -61.0584221 -164.53779602 175.501616 #> 795   -72.1943741   -3.74798155  72.291597 #> 796   -12.9082460  108.16497803 108.932480 #> 797    40.9936104  192.95417786 197.260718 #> 798     7.8897495   57.76594925  58.302256 #> 799   -66.4138184 -139.17840576 154.212269 #> 800    70.0606995 -154.23263550 169.399550 #> 801    62.5212898  -32.47725296  70.453415 #> 802    25.7911510  154.54878235 156.686022 #> 803   -70.5499268   78.93276978 105.866304 #> 804   -68.5084381   -0.05196597  68.508458 #> 805    54.9011383   92.80934143 107.831854 #> 806    10.5692272   32.44820404  34.126156 #> 807    56.6812553  -84.85074615 102.041236 #> 808   -19.7271614 -184.33525085 185.387825 #> 809   -35.2816467  -55.47848892  65.746919 #> 810    88.6191940  121.11059570 150.070443 #> 811    16.2063923   44.49874496  47.358056 #> 812  -109.3505325  -31.98201752 113.931508 #> 813  -181.3531647  -33.86872101 184.488646 #> 814   -25.7871189   -8.16621971  27.049263 #> 815   114.7398453   66.94623566 132.842126 #> 816   109.0229263   46.97034836 118.710623 #> 817   128.2617798    5.02881718 128.360325 #> 818    25.7306328  -30.97612572  40.268919 #> 819   -68.5109787   54.67219925  87.651603 #> 820  -124.3453598  186.07548523 223.798692 #> 821     7.0576692   77.84130096  78.160596 #> 822   100.7067337  -24.03801918 103.535852 #> 823   -10.1668682  -52.92540741  53.893079 #> 824   -24.2491989  -79.49601746  83.112216 #> 825   -38.6844139 -152.94720459 157.763530 #> 826    67.2051392  -88.20837402 110.892957 #> 827    14.4319057   15.46834660  21.155369 #> 828   -29.4180737   -8.61698437  30.654127 #> 829    45.1290092    0.21561970  45.129524 #> 830    56.4098206   60.02664948  82.372729 #> 831    27.4626827   61.59896088  67.443539 #> 832   -43.4580879    2.94052291  43.557457 #> 833  -130.8421326   54.81522369 141.860398 #> 834  -121.7227478   52.30109406 132.483326 #> 835    59.5882492  -18.32297516  62.341726 #> 836   157.4215393  -59.29666519 168.219011 #> 837    29.5864315   26.37176132  39.633656 #> 838  -229.6710968   43.61085892 233.774934 #> 839  -184.2365417  -49.30099487 190.718881 #> 840    58.8981438  -17.17185402  61.350337 #> 841   115.3360977    4.86092758 115.438486 #> 842    97.7816849   28.61313248 101.882134 #> 843    25.0093842  -94.18183136  97.445814 #> 844    -8.3288527 -148.76522827 148.998198 #> 845    26.0718136  -59.56177902  65.018036 #> 846    56.4626350   48.14164734  74.200050 #> 847    87.8214111   96.43609619 130.432055 #> 848    77.2607040   36.19853973  85.320283 #> 849   -82.3505707   53.92259979  98.434055 #> 850  -109.4471130  -20.09889412 111.277294 #> 851   -75.0184326  -92.44841003 119.056599 #> 852   -17.7257462   -9.56267643  20.140677 #> 853    39.0245323  101.01403809 108.290120 #> 854    92.3139954   20.04048157  94.464251 #> 855   155.8670959 -202.89953613 255.856939 #> 856    42.4992599 -173.00849915 178.151980 #> 857  -109.0843735   38.66167450 115.732993 #> 858  -128.3490906  157.48907471 203.165690 #> 859   -25.0663300   95.90406799  99.125734 #> 860   -16.7322750  -20.03409576  26.102376 #> 861    27.0403862  -29.83960533  40.268903 #> 862    41.7719879  -49.91159439  65.085069 #> 863    51.1649590   -4.14737129  51.332774 #> 864    44.3078270  -60.05405807  74.630245 #> 865   -32.2662506  -26.37051964  41.671516 #> 866    -4.5315733  105.65487671 105.752012 #> 867   107.0349121  141.67626953 177.563053 #> 868    52.7880974  150.97978210 159.942108 #> 869   -83.5145798  -57.89480591 101.619356 #> 870  -162.2339478 -150.99514771 221.628943 #> 871   -84.5955811 -117.62879181 144.889423 #> 872    39.6866760   35.42530441  53.197598 #> 873   -26.4979973  153.21624756 155.490715 #> 874   -24.7459602   77.67240906  81.519112 #> 875    -2.5882359  -73.03876495  73.084610 #> 876    35.5626984 -145.41162109 149.697178 #> 877     3.4250724  -64.92474365  65.015025 #> 878   -84.1108780   82.08507538 117.527016 #> 879   -62.6771278   74.24530029  97.163712 #> 880    66.8728561  -53.33461761  85.536895 #> 881   120.8453827  -91.92028809 151.831966 #> 882     0.9305125   20.39293671  20.414155 #> 883   -34.8540573   81.75837708  88.877655 #> 884   -71.0721283    0.87834841  71.077556 #> 885   -28.5247631   26.99128532  39.270747 #> 886    64.4483871   36.96887589  74.298670 #> 887   128.6447296   15.07261753 129.524709 #> 888   155.2311401  -50.22849274 163.155166 #> 889    62.5088272   -9.96369457  63.297936 #> 890     6.4210076    7.93792820  10.209801 #> 891  -122.4959564  -52.38946152 133.228807 #> 892  -202.8885803  -75.70763397 216.553508 #> 893   -79.5799484   26.22938919  83.791104 #> 894    83.2540207  169.53517151 188.874049 #> 895   209.5854340  126.49894714 244.802038 #> 896   101.3797607   82.44014740 130.668412 #> 897   -20.2794876  116.65853119 118.408068 #> 898  -162.2394867  -43.48349380 167.965667 #> 899  -190.3264160 -229.73602295 298.333345 #> 900  -174.0025482 -255.91816711 309.468892 #> 901  -183.4140167   -1.56081223 183.420658 #> 902    -2.4684658  144.33927917 144.360385 #> 903   155.4639282  -54.04090881 164.588738 #> 904   234.2266846  -44.76667023 238.466338 #> 905    84.5915985   74.56131744 112.761379 #> 906   -19.7551575   87.54898834  89.750162 #> 907    -4.1776524  -13.93958759  14.552144 #> 908    49.0055809 -207.88095093 213.579111 #> 909    27.4243679  -58.83164978  64.909622 #> 910     4.8655181  105.25066376 105.363065 #> 911    -9.0758572  177.69111633 177.922747 #> 912    -3.0122936  136.91114807 136.944282 #> 913     3.0923550  -67.87599945  67.946405 #> 914   -30.7906513  -76.06844330  82.063830 #> 915   -47.1990662  -13.34436989  49.049200 #> 916   -55.3784332    1.17240632  55.390842 #> 917   -11.8270197   -3.52888656  12.342262 #> 918    13.6950855   -1.42761648  13.769294 #> 919    17.8647881   42.60732651  46.201027 #> 920   -10.7895975   88.10796356  88.766146 #> 921    51.5941391  -46.45420074  69.425845 #> 922    62.9200897  -63.05637360  89.078864 #> 923    27.2374268  -95.17897797  98.999572 #> 924   -53.2209969   11.81117916  54.515855 #> 925   -86.9746628  113.73764801 143.181160 #> 926   -40.7972946  110.25904846 117.564778 #> 927   -48.0674858   -6.99186802  48.573341 #> 928     7.2399201 -106.66944122 106.914855 #> 929    -3.6681592   -0.86765486   3.769379 #> 930    28.7754478  -30.66808701  42.054226 #> 931   -51.3247986 -134.27729797 143.751966 #> 932   -84.3175430 -151.96133423 173.786349 #> 933    46.8767586  -62.37742615  78.028032 #> 934   125.3532867  129.13464355 179.970005 #> 935    78.6933975  137.49111938 158.418619 #> 936   -27.5179005   61.81945801  67.667424 #> 937   -13.2460756   37.36479568  39.643240 #> 938    -8.0209322  -31.53678513  32.540808 #> 939   -10.7191019  119.89277649 120.370997 #> 940    49.0057449   98.60384369 110.110313 #> 941   103.9762497   -6.41156769 104.173743 #> 942    59.3661156 -181.92922974 191.370270 #> 943   -16.6194019 -293.68783569 294.157695 #> 944   -50.3360710 -145.29930115 153.771281 #> 945   -22.2826500    5.27036762  22.897451 #> 946   -58.5756760  205.36494446 213.555310 #> 947    20.5405521  241.39302063 242.265360 #> 948    50.7427940   65.28002930  82.682001 #> 949    34.7519722  -73.74512482  81.523267 #> 950    -4.4286189  -95.58882141  95.691355 #> 951   -12.0851011   53.44244385  54.791829 #> 952    -4.6490116   84.57082367  84.698510 #> 953  -106.7987289  -16.49017334 108.064306 #> 954  -125.3063660 -111.84302521 167.959958 #> 955    20.8454800 -136.31622314 137.900858 #> 956   158.0633240  -19.60743713 159.274813 #> 957    36.3882637   77.25717926  85.397760 #> 958  -191.9616241   61.19828415 201.480756 #> 959  -195.2181854   -9.81122780 195.464575 #> 960    32.8515358  -22.53733063  39.839110 #> 961   113.3392334   20.89177704 115.248636 #> 962    79.5936279   38.11619568  88.249589 #> 963   -30.0145874   21.09443092  36.685835 #> 964   -35.2751389   75.46855164  83.305688 #> 965    39.7306519   66.99158478  77.887079 #> 966    12.4576435   50.03414917  51.561701 #> 967    20.1899147  -65.29892731  68.348976 #> 968    19.5047035 -219.10140991 219.967864 #> 969    88.5096817 -193.04284668 212.366439 #> 970     4.1786437 -107.88674164 107.967634 #> 971   -21.7836952   88.63711548  91.274682 #> 972    26.0683823  134.07048035 136.581310 #> 973    87.7466431   97.93984985 131.497861 #> 974   103.5846558   37.52047729 110.170627 #> 975   -40.7527962  -95.86643982 104.168924 #> 976  -135.5520477  -14.78865814 136.356379 #> 977   -88.5272751   76.09767914 116.738748 #> 978    61.4047356  108.29721832 124.494293 #> 979    87.0911102    8.66520882  87.521125 #> 980   -22.3174458  -59.57806015  63.620859 #> 981  -103.0204086   48.38182449 113.815665 #> 982   -79.6916046    4.06521606  79.795224 #> 983   -81.7762756  -72.67581177 109.403532 #> 984    26.3790627 -110.76658630 113.864356 #> 985   138.0275421   51.70655823 147.394608 #> 986   144.7605286   90.80200195 170.881872 #> 987    52.8921623   27.22468758  59.487515 #> 988    -3.5382910  -88.60686493  88.677483 #> 989   -30.8501015 -138.92897034 142.312992 #> 990  -141.4641113    1.57533455 141.472882 #> 991   -97.8177185   41.35221481 106.199396 #> 992     5.9488869  109.06201172 109.224135 #> 993   101.5705185  -33.44538498 106.935326 #> 994    44.9607124  -50.56818771  67.665407 #> 995   -87.8767090  -27.11765671  91.965664 #> 996  -112.6401901   80.47837067 138.436197 #> 997   -98.9477310   84.07678986 129.844369 #> 998    10.9167747   39.27291489  40.761965 #> 999   143.1657562  -87.79339600 167.940805 #> 1000           NA            NA         NA"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Differentiate x y compute change amplitude via algorithm proposed Nyström  Holmqvist (2010) doi:10.3758/BRM.42.1.188 . Note components amplitude smoothed independently via Savitzky-Golay filter, components may (probably ) add amplitude. Note filtering sensitive presence NA.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"nh_sg_filter_order\" = 2)) #> # A tibble: 1,000 × 3 #>         x      y   amp #>     <dbl>  <dbl> <dbl> #>  1   NA     NA     NA  #>  2   NA     NA     NA  #>  3   NA     NA     NA  #>  4   NA     NA     NA  #>  5   NA     NA     NA  #>  6   NA     NA     NA  #>  7   NA     NA     NA  #>  8 -183.  -208.   332. #>  9 -276.    23.6  206. #> 10   51.9  -50.8  244. #> # … with 990 more rows"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from samples using votes from selected methods. — extract_saccades","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Extract saccades samples using votes selected methods. method votes whether given sample belongs saccade. Next, saccades identified via majority vote using  vote_threshold parameter, well minimum duration minimal temporal separation criteria. Please note units gaze samples must  degrees visual angle. units important methods use specific (e.g., physiologically plausible) velocity acceleration thresholds. default, ensemble includes methods proposed Engbert & Kliegl (2003) (\"ek\"), Otero-Millan et al. (\"om\"), Nyström & Holmqvist (2010) (\"nh\"),  see Implemented Methods vignette. However, can extended via custom methods, see Using Custom Methods vignette. default, function returns table identified saccades can return matrix methods' votes per sample instead (return_votes = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"extract_saccades(   x,   y,   sample_rate,   trial = NULL,   methods = list(method_ek, method_om, method_nh),   velocity_function = saccadr::diff_ek,   options = NULL,   binocular = \"merge\",   vote_threshold = ifelse(length(methods) == 1, 1, (length(methods) - 1)),   minimal_duration_ms = 12,   minimal_separation_ms = 12,   return_votes = FALSE )"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"x Horizontal coordinate, either vector monocular data two-column matrix binocular data. y Vertical coordinate, either vector monocular data two-column matrix binocular data. sample_rate Sampling rate Hz. assumed common entire time series. time series contains chunks (trials) recorded using different acquisition rate (e.g., SR Research Eyelink allows set different acquisition rate recording / trial), need split time series analyze separately. trial Optional vector trial ID. omitted, samples assumed belong single trial. Velocity, acceleration, saccades computed respecting trial borders. methods list saccade detection methods, can include external functions implement sample classification (see Using Custom Methods vignette). Package methods include Engbert & Kliegl (2003) (method_ek), Otero-Millan et al. (2014) (method_om),  Nyström Holmqvist (2010) (method_nh). Defaults list internally implemented methods: list(method_ek, method_om, method_nh). velocity_function handle function compute velocity acceleration. Defaults method suggested Engbert & Kliegl (2003) diff_ek. package also implements method proposed Nyström Holmqvist (2010) diff_nh. See vignette \"Velocity computation\" details information implement custom method. options named list options saccade detection (see method_ek, method_om, method_nh) velocity (diff_ek, diff_nh) computation. See documentation specific method details. binocular Specifies binocular data treated. Options \"cyclopean\" (binocular data converted average cyclopean image saccades extracted), \"monocular\" (saccades extracted independently eye), \"merge\" (default, sample votes obtained eyes methods averaged. way binocular saccades, .e., eye movements sufficient temporal  overlap eyes, detected.). vote_threshold Value 1 N (N number used methods) defining vote threshold saccade. default, one method \\(threshold = N-1\\) must agree sample considered saccade. Threshold 1 applied single method used. minimal_duration_ms Minimal duration saccade milliseconds. Shorter candidate saccades discarded, minimal_separation_ms Minimal time separation saccades milliseconds. Saccades separated shorter interval \"saccade\" votes, merged including period. return_votes Logical. Whether function return extracted microsaccades (FALSE, default) votes per sample (TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"data.frame saccade properties (see details), return_votes = FALSE. Alternatively, returns votes per sample (return_votes = TRUE). monocular processing (monocular input, cyclopean merged binocular data) matrix nrow(x) rows length(methods) columns 0/1 votes sample method. binocular processing, function returns two element list  similar matrices per eye.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Variables describe saccade Trial Trial index. Eye \"Monocular\" monocular inputs. \"Cyclopean\" binocular data averaged applying algorithms. \"Binocular\" binocular data votes averaged applying algorithms. \"Left\" \"Right\" binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"# Single trial data(single_trial) saccades <- extract_saccades(single_trial$x, single_trial$y, 500)  # Multiple trials data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x,                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)    # binocular saccades                              data(\"single_trial_binocular\")  saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                          single_trial_binocular[, c('yL', 'yR')],                                          sample_rate = 1000)                                            # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                         single_trial_binocular[, c('yL', 'yR')],                                         sample_rate = 1000,                                         binocular = \"cyclopean\")   # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                        single_trial_binocular[, c('yL', 'yR')],                                        sample_rate = 1000,                                        binocular = \"monocular\")                               # Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x,                              single_trial$y,                              500,                              methods = list(method_ek, method_om))  #  Alternative velocity computation method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh) #> Warning: no non-missing arguments to max; returning -Inf  # A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)  # Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"Smooths signal using Savitzky-Golay shifts filtered signal back","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(x, sg_order)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"x vector float sgOrder integer, order filter","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"vector float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(rnorm(1000), 2) #>    [1]            NA            NA            NA            NA            NA #>    [6]  0.0939122057  0.3235814242  0.5227186011  1.2787458835 -0.0476191608 #>   [11] -0.5240615423 -1.3447223403 -1.0563344229 -0.4672531578  0.7813216140 #>   [16]  2.1039099429  0.8566334061  0.3057133107 -0.0190907234 -0.2799230712 #>   [21] -1.2505457091 -1.2807202850 -0.4203832227  0.2935225028  0.8559008412 #>   [26]  0.1832646944 -0.0754239539  0.4680868926  1.0539736317  1.2963540695 #>   [31]  1.0625978184  0.3756867162  0.3989918086  0.4339394880  1.0773554170 #>   [36]  1.3852255908  1.2013447690  0.7905542078  1.0368256537  0.5232108342 #>   [41] -0.4915346062  0.0313349437  0.0489670817  0.2574483235  0.2646408272 #>   [46]  0.7029248840  0.1503145433  0.2411645956  0.4945881860  0.4221915530 #>   [51]  0.5642705788  0.2167321142 -0.3324528202 -0.4416857800 -0.1156975937 #>   [56] -0.5165258387 -0.6887052912 -0.4923963759  0.4021504210 -0.2407393388 #>   [61] -0.6755544090 -0.7361560477  0.0654167727 -0.2686568792 -0.2158129505 #>   [66] -0.7348189572 -0.2778599147  0.2512331238  0.9357534915  0.5580798785 #>   [71]  0.4752650540 -0.0448323611 -1.0415587039 -1.9065432789 -0.8962312146 #>   [76]  0.0414288452  0.8661843298  0.2591291626  0.6014617486  0.7220173214 #>   [81]  0.9591428812  0.4480420284  0.6624762291  0.5567589639  0.4281540304 #>   [86] -0.7431633419 -0.4876224707 -0.5427447009  0.2221145412  0.1025041884 #>   [91]  0.9079016159  0.5334602119  0.1587254856 -0.2684592989 -0.3364458612 #>   [96] -0.0508229419 -0.5291119719 -0.8327889262 -1.0909201682 -0.3779717438 #>  [101] -0.6211021582 -0.4539200509 -0.4858707257  0.7457214505  0.1940344123 #>  [106]  0.1633290733 -0.0309596144  0.3806529722 -0.1250502245 -0.4870914841 #>  [111]  0.5091285837  0.5854714695  0.6294944052  0.2786695797  0.6621806917 #>  [116] -0.6170635438 -1.6176548098 -1.1233122301  0.3732051751  0.3257645001 #>  [121] -0.1991983031 -0.3058326344  0.6126640180  0.3415885739 -0.3453898783 #>  [126] -0.3609020949  0.2842896579  0.1369189514 -0.6316298657  0.1364695502 #>  [131]  0.6168633346  0.4317860284 -0.3746757225  0.1098022307 -0.0478278299 #>  [136]  0.0994202685 -0.0420432739 -0.3812414757 -1.5291784348 -1.9619522678 #>  [141] -1.5236084829 -1.0188171173 -0.4875657361 -0.4178337210  0.0667379370 #>  [146]  0.9137427222  1.0683877797  0.8757085954  0.1704853611 -0.2908757112 #>  [151] -0.9630782637 -0.7831194857 -0.5848639647 -0.8390987102 -0.7484642924 #>  [156] -0.3919489849  0.0002583833 -0.1004113777 -0.9262797471 -0.8943530042 #>  [161] -0.5331109627  0.1716530116 -0.4996851207 -0.7687399078 -0.3154382451 #>  [166]  0.1760300359  0.0112848012 -0.4071481927  0.5475092875  0.4262187758 #>  [171]  0.4545647343  0.4499724757  0.9932631555  0.6054348973  0.0102749072 #>  [176] -0.4787946131  0.1907821139  0.4392466096  0.2804161818  0.1073608003 #>  [181] -0.2615703097 -1.2550708545 -0.6852252098  0.1940841290  0.1339036353 #>  [186] -0.9649887382 -0.2696810922 -0.3164233736 -0.1765017460 -1.5836182744 #>  [191] -0.8006096234 -0.3594213396  0.2071049337 -0.5753310239 -0.3198223386 #>  [196] -0.7283615840  0.1176005151  0.3814247673  0.3456663791 -0.9697085519 #>  [201] -0.2586549891 -0.0721004762 -0.9784054058 -1.3493728662 -0.5530877069 #>  [206] -0.3078170475 -1.1788487194 -0.6363407500  0.1771956752 -0.2806458512 #>  [211] -0.9914621627 -1.6903604555 -0.4763433315  1.2385490766  0.7647611963 #>  [216] -0.8834611562 -1.7690002512  0.0738420642  0.0777073265 -0.3905051722 #>  [221] -1.7063632823 -0.1712375585  1.1235503202  1.1330599505 -0.3490358433 #>  [226]  0.4750915303  1.7774571993  1.5661703122  0.2234357787  0.3568233722 #>  [231]  0.3137578546 -0.0466251382 -0.3532714404 -0.2878014285 -0.3307792855 #>  [236] -0.3065750145 -0.7151508367 -0.9099242641 -0.6289106719 -0.7046363063 #>  [241] -0.1936977244  0.3779734376  0.2990597983 -0.0354696903  0.2225532156 #>  [246]  0.5837305962  0.4651439233 -0.2499389747 -0.2338722972  0.0724291129 #>  [251]  0.6744810476  0.0437426690  0.2519320263  0.6456581677  0.1636655975 #>  [256]  0.2291546593  0.1984109587  0.2966254201 -1.2682793755 -1.2112849608 #>  [261] -0.4437655798  1.1224742488  1.1555180952  0.0671669011 -0.1035496574 #>  [266]  0.2144106897  0.1338701921 -0.8235176010 -0.9500326384 -0.5011598236 #>  [271]  0.6061051380  0.1797832180 -0.0858968462 -0.1418005672  0.3908811935 #>  [276]  0.0070258670  0.5460502936  0.4541133667  0.4359315985  0.3842256709 #>  [281]  0.2164948200  0.3065404182 -0.2922696826 -0.6509161285 -0.8299561361 #>  [286]  0.1619643733  0.0724966730 -0.4347691412 -0.8731738995  0.1763754091 #>  [291]  0.0783125239 -0.2154121086 -0.0996408617  0.0566477115 -0.9510803909 #>  [296] -0.8754037110 -0.6755238487 -1.0844909226 -1.2018360260 -0.2320040003 #>  [301]  0.2840701037 -0.5081701866 -0.3552481333 -0.7578627599 -0.7835262960 #>  [306]  0.0494379886  1.3276460438  1.3355984461 -0.1343139715  0.0700844615 #>  [311] -1.0089123285 -1.1540317959 -0.4315230828  0.3883959591  0.7787914645 #>  [316]  0.1531178896  1.0914305067 -0.0987438229 -0.4102608286 -0.6290292640 #>  [321]  1.1985947947  1.0652304807  0.5045760424  0.1054639691  0.3660945839 #>  [326] -0.0937981994 -0.6120197078  0.1346557292  1.1939239946  1.1030655658 #>  [331]  0.4528583687 -0.0458439400  0.3746900300  0.0830079500  0.0491279330 #>  [336] -0.0901979718  0.2661688970  0.8612621869  0.5818848944  0.2993568272 #>  [341]  0.0404926365  0.5814562984  0.1515584912 -0.4031729543 -1.0627489283 #>  [346] -0.2863505899  0.4267415659  0.3443312326 -0.2527140446 -0.5690432914 #>  [351]  0.8123245645  1.1571117415  1.1860897851  0.2113969880 -0.3449168192 #>  [356] -0.3528916933 -0.6360905764 -0.2792786547  0.5971682988  1.6747797492 #>  [361]  1.4862324717 -0.2931029175 -0.9880977156 -1.4601412292 -0.3503314136 #>  [366]  0.3916800409  0.6053891924 -0.1759397039 -0.4173374451 -0.1114958498 #>  [371]  0.6939990253  0.2915560950 -0.3899551679 -0.7588006422  0.6277322572 #>  [376]  0.8585984555  1.0960965683 -0.1353890078 -0.6808466936 -0.8801425758 #>  [381] -0.1629527781  0.8418142644  0.9559691006 -0.0149640644 -0.3891026757 #>  [386] -0.5575737125 -0.7886342026 -1.4042186368 -0.4640046016 -0.0841366713 #>  [391]  0.2308900585  0.2465217763 -0.6051536001 -0.4606286182 -0.2091260293 #>  [396]  0.5672518866  0.0631174491  0.1487203136 -0.2213602253 -0.1369215757 #>  [401] -0.5037076605 -0.4083672526 -0.8332198505 -0.4590104875 -0.5543883481 #>  [406] -0.9619074122 -0.5253318686  0.6618336248  1.3831041712 -0.2490374378 #>  [411] -0.9621980500 -0.5159645914  0.3709823341 -0.4732560447 -0.6953671261 #>  [416] -0.0171354276  1.1268326077  0.3038055254 -0.7761143383 -1.2662997601 #>  [421] -0.5610587609  0.0408978596  0.0659626074  0.0041486779  0.2313185154 #>  [426]  0.2127466266 -0.7699609964 -1.0213140659  0.0045756839  1.0506006645 #>  [431]  0.7109773459  0.4866445132  0.1802186745 -0.6348579486 -0.6262633986 #>  [436]  0.5961433425  1.3357671016  0.7051656586 -0.0957369885 -0.1862658953 #>  [441] -0.0827087732 -0.1658209624 -0.1494146292 -0.0202914930  0.6872663493 #>  [446]  0.8471429892  0.5381673095 -0.4643733812 -0.8706940224 -0.0780958734 #>  [451]  1.5216888132  0.4458732112 -0.0095041463 -0.5691677492  0.6404916898 #>  [456]  0.4643527589  0.8491018022 -0.1566756444 -0.8482525883 -0.8100791685 #>  [461] -0.0546775363  0.2983884456 -0.0167122046  0.0708250272 -0.5240097682 #>  [466] -0.4549490370  0.0130547713  0.2268284524 -0.8438963743 -1.3918655762 #>  [471] -0.4169468952 -0.6492785953  0.1794838735  0.0225117985  0.5111565662 #>  [476] -0.1029535590  0.3215197808 -0.0726225153  0.9597932140  0.3149660258 #>  [481] -0.2481819198 -0.6960072882 -0.0476698091 -0.2195732946  0.6282966352 #>  [486]  1.1104942281  0.1778134782 -0.4707174551 -0.7995862875 -0.6858882987 #>  [491] -0.2280911880 -0.3437773696 -0.6170256466 -0.3880618471  0.1485524345 #>  [496]  0.0812915767 -0.1659732634  0.4099079944  1.2702995199  1.1189782506 #>  [501]  0.4119570877 -0.2014329137  0.3284662887 -0.2969818497  0.1164074453 #>  [506]  0.8853584508  1.4519132597  0.5714255079  0.7469213230  0.5911062377 #>  [511]  0.2385409220 -0.7705602250 -0.0539693554  0.1255639980  0.5968576048 #>  [516] -0.0868737368 -0.6078563804 -0.5121735524 -0.0201443835 -0.0502222704 #>  [521]  0.1222172094  0.7797914659  1.6971238256  0.5456235737 -1.0433620213 #>  [526] -1.0732964272  0.3145187675  0.9876822190  0.3978219333  0.4151607287 #>  [531] -0.3852413887 -0.0047559482  0.0600831263  0.3690620638  0.8390047025 #>  [536]  0.9675216410  0.3701401866 -1.0301301434 -0.3002127617 -0.5256503943 #>  [541]  0.3378927141  0.2075767589  0.4977856063 -0.9657561912 -1.3499898214 #>  [546] -1.4998930026 -0.6829804395 -1.0952813348 -0.9025974427 -0.7684364627 #>  [551]  0.0823073418  0.0903000010  0.0963207439 -0.6377819219 -1.2309856849 #>  [556] -0.4576455906 -0.0488805539 -0.2552461645 -0.0284349576 -0.1770475136 #>  [561] -1.1267258210 -1.4778229854 -0.4240816220  0.1228360276  1.0926520237 #>  [566]  1.0790199893  0.1850058709 -0.8894958259 -0.5786378372 -0.1666526235 #>  [571] -0.4747676571 -0.7469883227 -0.9193229439 -0.8328938137 -1.2677324788 #>  [576] -0.4556700512  0.1097641583  0.5275850472  0.3134251114  0.5944648976 #>  [581]  0.0926570678 -0.6056844920 -0.7888717033 -0.4485257989  0.3401195907 #>  [586]  0.3080587939  0.3479247131 -0.5724970156 -1.2124063237 -1.2966397981 #>  [591] -0.6185203020 -0.2717688970 -0.4999838855  0.3577352311  0.7361797343 #>  [596]  1.1455944978  0.4100753711 -0.1709083647 -0.7424261304 -0.2933824122 #>  [601] -0.0588885335 -0.6338513438 -0.3043325496  0.0483135934 -0.8242828619 #>  [606] -1.4908657807 -0.9990865724 -0.1946357969  0.2031148689  0.5380881763 #>  [611]  0.3944482724 -0.1183522570 -0.0235708447 -0.4907941539  0.4647952077 #>  [616]  1.0331561192  0.7869316600 -0.8083418948 -0.1173105774  0.3544713679 #>  [621]  0.0164483136 -0.2993507401 -0.2495925882  0.0464008167  0.2194903295 #>  [626]  1.1705492352  1.1822840395  0.6235348436  0.6451063613 -0.0994773793 #>  [631]  0.3769385939 -0.0121185684  0.9175187604  0.2603039733 -0.4585422594 #>  [636]  0.0004330444  0.3547490598  0.1131789170  0.1564214298  1.5002153195 #>  [641]  0.4779461100 -0.9661803006 -1.2312564187 -0.2937397477 -0.1877244960 #>  [646] -0.6094604309 -1.9891345449 -2.0567991443 -0.6989761373  0.2346753269 #>  [651] -0.0347759162 -0.2663252797  0.2709276009  1.5555880272  0.9964911531 #>  [656] -0.0007997457 -0.8158284492  0.4615564709  1.2352867010  0.8840512331 #>  [661] -0.6175209655 -1.4929992864 -0.4246675933  0.3394824937  0.5417238513 #>  [666]  0.1207487061  0.7660654825  0.4347440338 -0.6015257475 -1.3246437016 #>  [671] -1.4868012688 -0.9759742131 -0.1992352155  0.0993007625  0.5433632161 #>  [676]  0.6322845436  0.5262896434 -0.9073547752 -1.0595236547 -0.0016822058 #>  [681]  0.4104780022  0.0376470345 -0.5511425596 -0.2080130755  0.3624353614 #>  [686]  0.9406082768  1.0565943595  0.7766385877  0.5137998177 -0.3742368476 #>  [691] -0.9350207098 -0.8446780384 -0.2684230852  0.1547542803  0.9217209681 #>  [696]  0.9897309433 -0.0345910002 -1.0134649571 -0.3314596585  0.0732662119 #>  [701] -0.6404907948 -0.8374874435 -0.0898099241  0.1984325468 -0.4584870249 #>  [706] -0.3637815174 -0.1874976651  0.6206177715  0.5302150045  0.3101564858 #>  [711]  0.2179357410  0.6235623107  0.8046576133  0.6566776913 -0.4976036907 #>  [716] -0.5279094576 -0.0197231071  1.0003672378  0.0113726280 -0.7021274148 #>  [721] -1.2487316310 -0.8063017359  0.0202786106  0.2949972827  0.6838525169 #>  [726]  0.6173064113  1.0401305396  1.5095202729  1.1316593936 -0.6071149985 #>  [731] -1.5449745667 -0.5232677723  0.9220531857  1.1242921671  0.8217309648 #>  [736]  0.6792206030  0.5158891696  0.2694282863 -0.7586106994 -0.0233963865 #>  [741]  0.0976478686  0.5023486441 -0.2767132428 -0.3996318817 -0.6248714083 #>  [746]  0.9327863273  1.7904896773  1.7719989819 -0.4430998264 -1.3319866236 #>  [751] -1.8887109474 -1.1861164435 -0.6996233004  0.2844626906  0.1737995916 #>  [756] -0.5320487037 -0.5689183628 -0.0587141483  0.1687734486 -0.1593664398 #>  [761] -0.4125926571 -1.3232325010 -0.4583802513 -0.4916692543  0.4019960582 #>  [766]  0.3560758315  0.9693065984 -0.1600524303 -0.9106438671 -0.1337453201 #>  [771]  0.6568869774  0.7966638800  0.1903281409 -0.2381589768 -0.7197207135 #>  [776] -0.3475222388  0.0248995468 -0.5465229323 -0.4334084043 -0.0606847144 #>  [781]  0.0822297009 -1.0903234158 -0.2551093378  0.2935801585  0.6502779560 #>  [786]  0.0284604995  0.2434098781 -0.0184447787 -1.0269845959 -1.0384517999 #>  [791] -1.0368606925 -0.8472729268 -0.7251557862 -0.0234847414  0.2174839946 #>  [796]  0.2641549487  0.0451221323 -0.6959589133 -0.7514988306 -0.7845717968 #>  [801] -0.0401974280 -0.0276716248 -0.3655428610 -0.9126072854  0.2645639214 #>  [806]  0.8179685902 -0.1412618232 -1.0545922095 -0.2293871097  0.0864531181 #>  [811] -0.0601305559 -0.3093554998 -0.1480000805 -0.4306051235 -0.7787055396 #>  [816] -0.3267242241 -0.7775389248 -0.7537712096 -0.6578183873 -0.6377852845 #>  [821] -0.8639943045 -1.2128960275 -0.6709421617  0.5110531966  1.4330805485 #>  [826]  0.9805327059 -0.3346449837 -1.0510167324 -1.0724987421 -0.7481306177 #>  [831] -0.2291848164 -0.0448731207  0.8127445466  0.1812623790 -0.5730401162 #>  [836] -0.5174902710  0.1812134449 -0.2846327680 -0.6723627117 -1.2227163529 #>  [841] -0.3603670325  0.6933282521  1.0496063727  0.3167380584 -0.4475063600 #>  [846] -0.2703933498 -0.0473809266  0.3410688331  0.5546992059  0.3694805168 #>  [851]  0.8164268720  0.8357655461  0.5818150061 -0.6116160597 -0.5386535167 #>  [856]  0.3012714384  0.1570061929 -0.4511478394 -0.8427943838 -0.3638311253 #>  [861]  0.3133293119  0.8153865666  0.6433754216  0.4729990065  0.3569093748 #>  [866]  0.2901704532  0.2600280907  0.0956669334  0.4972096823  0.2996331745 #>  [871] -0.2924595044 -0.9761141654 -0.3563434417  0.0530747644  1.0531143019 #>  [876]  1.5542037401  1.2474640031  0.4896640468  0.5601036107  0.1121042513 #>  [881] -0.6391996671 -0.4478582731 -0.6216051635 -0.5164405750 -0.9756580756 #>  [886] -0.7081698937 -0.8907025474  0.2566318295  0.4166723281 -0.0111157917 #>  [891] -0.0628573425  0.0742666627 -0.8226731443 -1.1097498801 -0.2529844007 #>  [896] -0.1524044455 -0.0737713863 -0.5751990813  0.1936906484  0.1116728155 #>  [901]  0.8284301108 -0.4176518384 -0.6945668207 -1.2995179532 -0.8819729456 #>  [906] -0.9298530122  0.0244066178 -0.2217463887 -0.3175927901  0.1657671803 #>  [911]  0.4718764038 -0.0358870712 -0.7141290983  0.2212187117 -0.1165710205 #>  [916]  1.1278048605  2.1141956084  2.9164641234  1.5780514978  0.8603463160 #>  [921]  1.1238538349  0.7286728380 -0.0951565762 -0.3633726833  0.1512416439 #>  [926]  0.5436371179  1.1346828459  1.3794748230  0.7981143506  0.4927687351 #>  [931]  0.2313046640 -0.0046769477  0.3192610204  0.2106635582 -0.2438121477 #>  [936] -0.2692664168  1.2391961895  1.6435537156  1.5178882011  0.2598716281 #>  [941] -0.2706445185 -0.6365692673 -0.2768869376  0.0565761619  0.2314743630 #>  [946]  0.1408182022  0.5874777421  0.0535803149 -0.2013070902 -0.2950338888 #>  [951]  0.3713810589  0.1849808450  0.2539537854  0.8585594568  0.1777257304 #>  [956] -0.5116665855 -0.7830428835 -0.2785447630 -0.7689818820 -0.2842874926 #>  [961]  0.2898801118  0.0073693204 -0.6785021676 -0.6361048483  0.5534128826 #>  [966]  1.1203563950  1.5787185739  0.6420694784  0.6921683775  0.6039446631 #>  [971]  1.3628511402  0.7655351960  0.4368657539 -0.4583893656  0.2346690433 #>  [976]  0.1509325675 -0.4187327060 -0.3909466968  1.1841833450  1.4113123197 #>  [981]  0.1399244780 -0.3699966280  0.7512175109  0.8456753245  0.0711936832 #>  [986] -0.2837564734  0.4401995330  0.3625863045 -0.3810357620  0.1605375963 #>  [991]  0.1921210558  0.0223462164 -1.0801908523 -1.0669909820 -1.3166824446 #>  [996]  0.7671710083  0.8466254701  0.7111323658 -0.3146425940  0.0709084514"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts inputs to matrix — input_to_matrix","title":"Converts inputs to matrix — input_to_matrix","text":"Converts inputs (vector, matrix, data.frame/tibble)  matrix preserving number columns","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(x)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts inputs to matrix — input_to_matrix","text":"x vector, matrix, data.frame/tibble","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts inputs to matrix — input_to_matrix","text":"matrix","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(1:5) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 #> [5,]    5"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Extract saccades using algorithm proposed Engbert Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"method_ek(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Method options, please refer Engbert Kliegl (2003) details parameters rationale default values. ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults 6. ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator, per formula #2 Engbert Kliegl (2003). Can replaced mad, sd, etc. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults 12. ek_minimal_separation_ms minimal required time gap saccades. Defaults 12.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Extract saccades using algorithm proposed Nyström Holmqvist (2010) doi:10.3758/BRM.42.1.188 .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"method_nh(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze y coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details  information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2. nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Extract saccades using algorithm proposed Otero-Millan et al. (2014) doi:10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"method_om(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Method options, please refer Otero-Millan et al. (2014) details parameters rationale default values. om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults 30. om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults 5. om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s.  Defaults 3. om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults 0.05.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"A monocular multi-trial recording — monocular_ten_trials","title":"A monocular multi-trial recording — monocular_ten_trials","text":"monocular recording, 10 trials, sampling rate 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A monocular multi-trial recording — monocular_ten_trials","text":"","code":"monocular_ten_trials"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A monocular multi-trial recording — monocular_ten_trials","text":"data frame 14353 rows 4 variables: trial Trial index. x X coordinate degrees visual angle. y Y coordinate degrees visual angle. time Sample time milliseconds.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract value for a named list or use default if key is missing — option_or_default","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Extract value named list use default key missing","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(options, key, default)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"options Named list key String key default Default value returned, key missing.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Value list default value","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(list(\"A\" = 25), \"A\", 20) #> [1] 25 option_or_default(list(\"A\" = 25), \"B\", 20) #> [1] 20"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/saccadr.html","id":null,"dir":"Reference","previous_headings":"","what":"saccadr — saccadr","title":"saccadr — saccadr","text":"Extract (Micro)Saccades Gaze Samples.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard deviation via median estimator. — sd_via_median_estimator","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"Compute standard deviation via median estimator. Please refer formula #2 Engbert & Kliegl (2003). Falls back mean estimator, computed standard deviation smaller .Machine$double.eps. Raises error results using mean estimator still smaller .Machine$double.eps.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(x, na.rm = FALSE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"x Numeric values na.rm Whether exclude NA values, defaults FALSE.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(rnorm(100)) #> [1] 0.5893481"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial monocular samples recorded at 500 Hz. — single_trial","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"single trial monocular samples recorded 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"","code":"single_trial"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"data frame 1006 rows 2 variables: x X coordinate degrees visual angle. y Y coordinate degrees visual angle.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial binocular recording. — single_trial_binocular","title":"A single trial binocular recording. — single_trial_binocular","text":"single trial binocular recording sampled 1000 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial binocular recording. — single_trial_binocular","text":"","code":"single_trial_binocular"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial binocular recording. — single_trial_binocular","text":"data frame 2000 rows 6 variables: trial Trial index. time_rel Sample time milliseconds relative trial start. xL X coordinate left eye degrees visual angle. xR X coordinate right eye degrees visual angle. yL Y coordinate left eye degrees visual angle. yR Y coordinate right eye degrees visual angle.","code":""}]
