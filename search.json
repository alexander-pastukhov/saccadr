[{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Engbert and Kliegl (2003)","title":"Implemented Methods","text":"algorithm labels sample saccade velocity, measured units standard deviation (see ), exceeds predefined threshold (defaults \\(6\\)) duration super-threshold period exceeds minimal duration (defaults \\(12\\) milliseconds). method makes assumptions velocity units degrees per second can used data (e.g., samples encode gaze screen position units). standard deviation computed following formula #2 Engbert Kliegl (2003) However, value smaller .Machine$double.eps, recomputed via mean estimator monocular version algorithm implemented binocular saccades computed using overlapping votes two eyes. method details rationale default parameter values refer Engbert Kliegl (2003). Parameters: ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults \\(6\\). ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator() implements formula #2 Engbert Kliegl (2003). Can replaced sd(), mad(), custom function. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults \\(12\\). ek_minimal_separation_ms minimal required time gap saccades. Defaults \\(12\\).","code":"sqrt(median(x^2) - median(x)^2) sqrt(mean(x^2) - mean(x)^2)"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"otero-millan2014","dir":"Articles","previous_headings":"","what":"Otero-Millan et al. (2014)","title":"Implemented Methods","text":"algorithm: Detect local velocity peaks. Filter based minimal inter-peak interval (defaults \\(30\\) ms) maximal allowed saccade rate (defaults \\(5\\) Hz). Identify onset offset potential saccade using absolute velocity threshold degrees per second (defaults \\(3\\)). Compute peak velocity peak acceleration peak velocity reached. Rotate velocity peak acceleration via PCA retain components predefined threshold explained variance (defaults \\(0.05\\)). Perform cluster analysis remaining components \\(2\\), \\(3\\), \\(4\\) picking solution smallest silhouette. Saccades identified cluster highest average peak velocity. method details rationale default parameter values refer Otero-Millan et al. (2014). Parameters: om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults \\(30\\) om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults \\(5\\). om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s. Defaults \\(3\\). om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults \\(0.05\\).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Nyström and Holmqvist (2010)","title":"Implemented Methods","text":"algorithm: Identify physiologically implausible velocity acceleration peaks (defaults \\(1000 \\deg/s\\) \\(100000 \\deg/s^2\\)). Identify noise onset/offset samples around implausible velocity/acceleration median velocity. Exclude samples analysis. Identify velocity threshold \\(PT = mean(V_{subthreshold}) + 6 \\cdot std(V_{subthreshold})\\) via iterative method starting arbitrary \\(PT\\) value (defaults \\(100 \\deg/s\\)). Stop threshold change \\(1 \\deg/s\\). Identify saccades periods peaks peaks threshold \\(PT\\) adjacent samples \\(PT_{onset/offset} = mean(V_{subthreshold}) + 3 \\cdot std(V_{subthreshold})\\). method details rationale default parameter values refer Nyström Holmqvist (2010). Parameters: nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Implemented Methods","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/using_custom_methods.html","id":"example-implementation","dir":"Articles","previous_headings":"","what":"Example implementation","title":"Using Custom Methods","text":"example implementation overly simple custom method labels sample saccade velocity exceeds predefined threshold. expects threshold parameter \"st_velocity_threshold\" member list uses default threshold \\(50 \\deg / s\\) (arbitrary number!) threshold provided. implemented method, can pass alongside internally implemented methods:","code":"simple_threshold_method <- function(x,                                     y,                                     vel,                                     acc,                                     sample_rate,                                     trial,                                     options) {    # obtain method parameters or use defaults   velocity_threshold <- saccadr::option_or_default(options, \"st_velocity_threshold\", 50)    # vote on each sample     sample_vote <- vel[['amp']] > velocity_threshold      # return votes   sample_vote } data(\"single_trial\") saccades <- saccadr::extract_saccades(x = single_trial$x,                                       y = single_trial$y,                                       sample_rate = 500,                                       methods = list(\"ek\", \"om\", \"nh\", simple_threshold_method),                                       options = list(\"st_velocity_threshold\" = 70))"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Differentiation following Engbert and Kliegl (2003)","title":"Velocity computation","text":"method computes velocity predefined time window controlled via ek_velocity_time_window defaults 20 ms. width window converted samples based sampling_rate parameter ensured odd number equal larger 3. .e., window three samples long, velocity computed based one sample one sample current, five-samples window - two samples , etc. code always starts requested window size iteratively reduces two samples accommodate trial limits missing values. NA velocity returned even smallest window (three samples wide) used. general, horizontal vertical velocity components computed \\[v_x[] = \\frac{\\sum_{j=1}^{(N-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(N-1)/2}2j\\cdot\\Delta t}\\] \\(\\) index sample, \\(\\Delta t = \\frac{1}{sample~rate}\\) duration single sampling frame, \\(N\\) odd integer width moving average used compute velocity. Engbert Kliegl (2003), \\(N=5\\) \\(\\Delta t = 4\\) (250 Hz sampling rate) translate 20 ms moving average window (default value used method implementation). derivation shows equivalence formula formula 1 Engbert Kliegl (2003). \\(N=5\\): \\[\\frac{\\sum_{j=1}^{(5-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(5-1)/2}2j\\cdot\\Delta t}=\\] \\[\\frac{\\sum_{j=1}^{2}x[+j] - x[-j]}{\\sum_{j=1}^{2}2j\\cdot\\Delta t}=\\] \\[\\frac{x[+1] - x[-1]+x[+2] - x[-2]}{2\\Delta t + 4\\Delta t}=\\] \\[\\frac{x[+2] + x[+1] - x[-1] - x[-2]}{6\\Delta t}\\]","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Differentiation following Nyström and Holmqvist (2010)","title":"Velocity computation","text":"Horizontal vertical components velocity computed adjacent samples, amplitude computed components filtered using Savitzky-Golay filter. Filter order controlled via nh_sg_filter_order option defaults 2.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"comparing-two-methods","dir":"Articles","previous_headings":"","what":"Comparing two methods","title":"Velocity computation","text":"two methods produce comparable different velocity values. However, minor effect saccade detection, see vignette Using sample votes.","code":"# computing velocity using two methods vel_ek <- saccadr::diff_ek(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_nh <- saccadr::diff_nh(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_comparison <- na.omit(data.frame(EK = vel_ek[['amp']], NH = vel_nh[['amp']])) %>%   dplyr::filter(NH > 0) %>% # values can be negative due to filtering   dplyr::mutate(logEK = log(EK), logNH = log(NH))   # plotting amplitude comparison pearson_rho <- cor(vel_comparison[['EK']], vel_comparison[['NH']])  ggplot(data = vel_comparison, aes(x = EK, y = NH)) +   geom_abline() +   geom_point() +   scale_x_log10() +   scale_y_log10() +   labs(subtitle = sprintf(\"Pearson's ρ = %.2f\\nPearson's ρ for log transformed velocities = %.2f\", pearson_rho, cor(vel_comparison[['logEK']], vel_comparison[['logNH']])),        x = \"Vek\",        y = \"Vnh\") # plotting  ggplot(data = NULL, aes(x = vel_comparison[['EK']] - vel_comparison[['NH']])) +   geom_histogram(bins = 50) +   xlab(\"Vek - Vnh\") +   labs(title = \"Difference in velocities computed via two methods\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"implementing-and-using-a-custom-differentiation-function","dir":"Articles","previous_headings":"","what":"Implementing and using a custom differentiation function","title":"Velocity computation","text":"custom function follows Arguments passed function (vectors length): x, y vectors values, either x y gaze coordinates velocity components (acceleration). sample_rate scalar value Hz. trial vector trial index per sample. options named list method-specific options. See example use . See also option_or_default() function. function must return data.frame three columns: x (horizontal component), y (vertical component), amp (amplitude). example simple velocity function respects trial borders similar function uses optional custom_velocity_lag parameter can different 1","code":"diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # compute vertical and horizontal components   df <- data.frame(x = ..., # differentiate values of x                     y = ...) # differentiate values of y      # compute amplitude   df[['amp']] = sqrt(df[['x']]^2 + df[['y']]^2))    # return a data.frame with columns x, y, and amp   return(df) } library(dplyr)  diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x)) / delta_t_s,            y = (y - lag(y)) / delta_t_s,            amp = sqrt(x^2 + y^2)) } diff_lag_n <- function(x, y,  trial, sample_rate, options=NULL) {   # obtain lag or use default   lag_n <- saccadr::option_or_default(options, \"custom_velocity_lag\", 1)      # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x, lag_n)) / delta_t_s,            y = (y - lag(y, lag_n)) / delta_t_s,            amp = sqrt(x^2 + y^2)) }"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Velocity computation","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). saccadr: Extract Saccades via Ensemble Methods Approach. https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/.","code":"@Manual{,   title = {saccadr: Extract Saccades via an Ensemble of Methods Approach},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/}, }"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccadr","dir":"","previous_headings":"","what":"Extract Saccades via an Ensemble of Methods Approach","title":"Extract Saccades via an Ensemble of Methods Approach","text":"saccadr modular extendable R package extract (micro)saccades gaze samples via ensemble methods approach. Although agreement general definition saccade, specific details harder agree upon. Therefore, numerous algorithms extract saccades based various heuristics, differ assumptions velocity, acceleration, etc. package uses methods label individual samples applies majority vote approach identify saccades. package includes three methods (see Implemented Methods vignette) can extended via custom methods (see Using custom methods vignette). also uses modular approach compute velocity acceleration noisy samples (see Velocity computation vignette). Finally, can obtain methods votes per gaze sample instead saccades (see Using sample votes vignette). extract_saccades() function uses several methods label individual samples belonging saccade, classifies sample potential saccade proportion votes exceeds preset threshold, identifies saccades based minimal saccade duration minimal time saccades. binocular data, 1) samples can averaged velocity computation, 2) votes can merged function returns binocular saccades, 3) saccades extracted eye separately. Currently, library implements saccade detection using following saccade detection methods. using package, please cite package individual methods. method_ek : Engbert, R., & Kliegl, R. (2003). Microsaccades uncover orientation covert attention. Vision Research, 43(9), 1035–1045. https://doi.org/10.1016/S0042-6989(03)00084-1 method_om : Otero-Millan, J., Castro, J. L. ., Macknik, S. L., & Martinez-Conde, S. (2014). Unsupervised clustering method detect microsaccades. Journal Vision, 14(2), 18–18. https://doi.org/10.1167/14.2.18 method_nh : Nyström, M., & Holmqvist, K. (2010). adaptive algorithm fixation, saccade, glissade detection eye tracking data. Behavior Research Methods, 42(1), 188–204. https://doi.org/10.3758/BRM.42.1.188","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Saccades via an Ensemble of Methods Approach","text":"current stable version use install development version github","code":"install.packages(\"saccadr\") library(\"devtools\") install_github(\"alexander-pastukhov/saccadr\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Saccades via an Ensemble of Methods Approach","text":"main function extract_saccades(). Minimally, takes x y gaze samples, sampling rate returning table extracted saccades. Note function expects units gaze samples degrees visual angle, methods use physiologically plausible velocity acceleration thresholds.","code":"data(\"single_trial\") saccades <- extract_saccades(single_trial$x, single_trial$y, sample_rate = 500)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"multiple-trials","dir":"","previous_headings":"Usage","what":"Multiple trials","title":"Extract Saccades via an Ensemble of Methods Approach","text":"recording spans multiple trials, need specify via trial parameter. way velocity computation saccade detection methods respect trial boundaries.","code":"data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"binocular-data","dir":"","previous_headings":"Usage","what":"Binocular data","title":"Extract Saccades via an Ensemble of Methods Approach","text":"three ways binocular data can treated based value binocular parameter: binocular = \"merge\" (default): sample votes obtained eyes methods averaged. way binocular saccades (.e., eye movements sufficient temporal overlap eyes) detected. Eye = \"Binocular\" saccade description. binocular = \"cyclopean\": binocular data converted average cyclopean image voting saccades detection. Eye = \"Cyclopean\" saccade description. binocular = \"monocular\": saccades extracted independently eye. Eye = \"Left\" Eye = \"Right\" saccade description.","code":"data(\"single_trial_binocular\") # binocular saccades only saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000)  # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"cyclopean\")  # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"monocular\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-methods","dir":"","previous_headings":"Usage","what":"Specifying methods","title":"Extract Saccades via an Ensemble of Methods Approach","text":"default, implemented methods used saccade detection , necessary, can use subset even single method. Note can also supply saccade detection function, please see Using custom methods vignette. Parameters individual methods passed via options argument, named list <parameter-name> = <value> pairs. can find information specific parameters default values Implemented Methods vignette. example modifying velocity threshold, measured units standard deviation, Engbert & Kliegl (2003) method. default value 6 can make stricter","code":"# Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = list(method_ek, method_om)) saccades <- extract_saccades(single_trial$x, single_trial$y, 500, options = list(\"ek_velocity_threshold\" = 8))"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"altering-voting-threshold","dir":"","previous_headings":"Usage","what":"Altering voting threshold","title":"Extract Saccades via an Ensemble of Methods Approach","text":"voting threshold number methods must label sample potential saccade. default, one method must agree sample considered saccade (vote_threshold = length(methods) - 1) 1, single method passed function. can make voting less restrictive via vote_threshold parameter.","code":"# A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-velocity-computation-method","dir":"","previous_headings":"Usage","what":"Specifying velocity computation method","title":"Extract Saccades via an Ensemble of Methods Approach","text":"gaze samples tend noisy, different methods use various approaches computing velocity noisy samples. Methods Engbert & Kliegl (2003) Otero-Millan et al. (2014) used approach based averaging multiple samples compute velocity, whereas Nyström & Holmqvist (2010) compute simple derivative filter . default, package uses former approach (velocity_function = diff_ek) can also use latter (velocity_function = diff_nh) implement custom method (see Velocity computation vignette). Acceleration computed way velocity samples. example using Nyström & Holmqvist (2010) velocity computation","code":"saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-saccade-temporal-properties","dir":"","previous_headings":"Usage","what":"Specifying saccade temporal properties","title":"Extract Saccades via an Ensemble of Methods Approach","text":"votes , saccades detection based minimal duration (minimal_duration_ms parameter, defaults 12 ms) minimal time saccades (minimal_separation_ms, defaults 12 ms).","code":"# Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccade-description-table","dir":"","previous_headings":"Return values","what":"Saccade description table","title":"Extract Saccades via an Ensemble of Methods Approach","text":"extract_saccades() function returns table following columns: Trial Trial index. Eye “Monocular” monocular inputs. “Cyclopean” binocular data averaged applying algorithms. “Binocular” binocular data votes averaged applying algorithms. “Left” “Right” binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"sample-votes","dir":"","previous_headings":"Return values","what":"Sample votes","title":"Extract Saccades via an Ensemble of Methods Approach","text":"Alternatively, use parameter return_votes = TRUE function can return votes per sample method (eye, binocular data). Please see Using sample votes vignette details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Compute velocity via Engbert & Kliegl (2003) algorithm. See formula #1 manuscript.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"","code":"compute_velocity_ek(x, trial, time_window_in_samples, delta_t)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"x Vector coordinates trial Vector trial labels, velocity computed within trials. time_window_in_samples Width window velocity computation samples. delta_t Duration single frame (1 / sampling rate).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Velocity vector","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Differentiate x y compute change amplitude via algorithm proposed Engbert & Kliegl (2003)","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Method options, please refer Engbert & Kliegl (2003) details parameters rationale default values. ek_velocity_time_window Time window velocity computation milliseconds. Defaults 20 ms.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"ek_velocity_time_window\" = 20)) #>                  x             y        amp #> 1               NA            NA         NA #> 2     -11.62659264 -221.10606384 221.411538 #> 3      37.57501221 -145.34518433 150.123630 #> 4     -11.23289108  -53.92872620  55.086163 #> 5      -2.65315509   13.09821701  13.364225 #> 6      20.42486954   44.21826553  48.707600 #> 7      54.94564056   94.71674347 109.500159 #> 8     -81.63528442   83.10099030 116.490747 #> 9     -71.81179047   54.89812088  90.392129 #> 10     15.81649876  -57.86772156  59.990289 #> 11    132.25834656  -78.85546112 153.981992 #> 12    183.98120117  -58.92249298 193.186290 #> 13     53.47090912  -34.31711197  63.535835 #> 14    -26.20038033   17.55119133  31.535761 #> 15    -33.95602798  138.06448364 142.178808 #> 16    -34.38060760  163.05555725 166.640754 #> 17    -80.16552734    3.65184116  80.248662 #> 18   -130.84626770 -142.49060059 193.453656 #> 19    -68.43847656 -160.53092957 174.510757 #> 20     17.14113808  -35.89296341  39.775915 #> 21    -28.33662415    4.27410984  28.657151 #> 22    -56.89721298  -64.21452332  85.795092 #> 23    -38.03211594    1.20789421  38.051292 #> 24     -4.00315237  110.65121460 110.723604 #> 25     93.43762207   98.97879028 136.115356 #> 26      5.91299868   -2.49458385   6.417671 #> 27     29.25422287  -91.22911072  95.804803 #> 28    -37.65559769   90.29235077  97.829712 #> 29    -35.57464600  133.33384705 137.998080 #> 30     64.73757935   25.25759506  69.490289 #> 31     92.65534210  -79.43210602 122.042910 #> 32     36.12227249  -27.56826973  45.440379 #> 33    -82.83351898  142.23295593 164.595278 #> 34    -42.75104523  104.44562531 112.856283 #> 35     66.85378265  -18.48061371  69.361094 #> 36    122.23027802  -70.09384155 140.902049 #> 37     24.91992378  -19.30869484  31.525042 #> 38    -15.10664272  -48.40733719  50.709772 #> 39    -37.31196213 -140.71537781 145.578158 #> 40    -58.33001328  -41.60097122  71.645176 #> 41    -35.20264053   46.14692307  58.041058 #> 42     95.12914276   90.91958618 131.589988 #> 43    123.02776337   31.05568695 126.886903 #> 44    -47.79397964  -46.03904343  66.361570 #> 45   -192.30923462  -14.67992020 192.868716 #> 46   -104.00576019  -94.94944000 140.828244 #> 47    107.55908203  -66.75359344 126.589883 #> 48    194.66355896   33.40449905 197.508890 #> 49     60.00160217   37.51146317  70.762293 #> 50    -89.07268524  -36.22076797  96.155537 #> 51    -92.04049683  -80.37359619 122.193977 #> 52      0.91788405   70.74608612  70.752040 #> 53     45.69659424  166.63710022 172.789183 #> 54     -5.33990574    5.34388590   7.554582 #> 55    -23.44446373 -150.37976074 152.196305 #> 56    -37.75878143 -138.48150635 143.536940 #> 57    -59.57186127   70.44366455  92.255713 #> 58     38.51902008  114.10148621 120.427838 #> 59    151.11840820   53.42106628 160.282824 #> 60    121.45092010   43.73869705 129.086791 #> 61    -52.62277985   27.94956398  59.584688 #> 62   -199.05938721   74.90555573 212.686346 #> 63   -140.26579285 -103.31650543 174.209050 #> 64     29.80171394 -102.97506714 107.200777 #> 65    110.58442688  -14.73829842 111.562238 #> 66     71.87817383   52.22287369  88.846499 #> 67    -21.98427200   89.04812622  91.721737 #> 68    -93.88592529    9.11739159  94.327588 #> 69    -70.33529663  -29.52573395  76.281209 #> 70    -40.18397522 -116.15119934 122.905870 #> 71     15.21653461  -83.67574310  85.048062 #> 72     20.45831108   58.43297195  61.910861 #> 73    -14.03492641  218.46510315 218.915464 #> 74     62.53508759  136.47755432 150.122483 #> 75    122.44557190  -85.49720764 149.340854 #> 76    139.19500732 -139.48849487 197.059103 #> 77     39.46053314  -16.38280296  42.726220 #> 78    -57.38694382   48.76130676  75.305553 #> 79   -142.95878601   -6.75500107 143.118289 #> 80   -171.85073853  -46.99096680 178.159556 #> 81   -203.99890137  -10.30475998 204.259002 #> 82    -80.72316742   10.51783085  81.405494 #> 83    104.51172638   45.62702179 114.037389 #> 84    145.16598511  103.29114532 178.163475 #> 85     21.57912445    8.36582184  23.144018 #> 86    -37.71080399 -156.49107361 160.970683 #> 87    148.15101624 -187.75709534 239.168247 #> 88    136.51419067  -55.66883850 147.428436 #> 89    -53.77163315  117.77364349 129.468219 #> 90   -147.77186584  165.21360779 221.657530 #> 91     14.63858891   42.87332153  45.303532 #> 92    122.77432251  -68.33930969 140.512617 #> 93     11.00418472  -99.85717773 100.461674 #> 94    -79.96327209  -22.26130676  83.004161 #> 95    -39.83066559   92.13819122 100.378923 #> 96     54.15953827   61.01828766  81.587297 #> 97     16.70676231   -6.45245218  17.909496 #> 98    -10.19363785   50.70363617  51.718169 #> 99    -50.58022308   36.55038834  62.404245 #> 100   -81.40003967  -28.97420502  86.402957 #> 101  -149.81590271 -123.30822754 194.035367 #> 102  -115.79919434 -126.83206940 171.743493 #> 103    54.66851044   62.99218369  83.406602 #> 104    97.19639587   88.70392609 131.588472 #> 105    55.72159576   58.85397339  81.047433 #> 106    54.39649963  -41.59960175  68.479968 #> 107    65.24604797  -52.22867203  83.575600 #> 108   -71.54875183   27.19087601  76.541281 #> 109  -136.96942139    1.14088035 136.974173 #> 110   -72.58485413  -92.06012726 117.233221 #> 111   103.33557129 -107.66462708 149.231070 #> 112   167.67056274  -15.25222778 168.362846 #> 113   103.65841675  102.28134918 145.624661 #> 114   -47.85977173  124.85044861 133.709357 #> 115  -154.93093872  108.09642792 188.913826 #> 116   -60.38843536   23.43601990  64.776617 #> 117    76.93256378  -80.33814240 111.233253 #> 118   163.74765015  -66.54750824 176.753681 #> 119    47.67818069  -22.88037109  52.884027 #> 120    60.83607101   76.48411560  97.728437 #> 121   101.19454956   34.61231613 106.950219 #> 122    55.16546249   -5.67576456  55.456673 #> 123   -60.43079376   30.21803665  67.564862 #> 124  -172.72175598   52.03100967 180.388556 #> 125    43.74956894  -17.62939453  47.168001 #> 126   100.18190002  -60.39786911 116.979980 #> 127    -2.52077961  -97.14836121  97.181060 #> 128  -137.65498352 -123.16905975 184.714677 #> 129   -46.79396057  -61.20032120  77.039951 #> 130   144.57788086   49.08909225 152.684323 #> 131    83.56990051  149.12963867 170.949049 #> 132   -47.88711548   59.02478027  76.007240 #> 133  -171.36152649  -18.73904800 172.383075 #> 134   -62.42066956    2.70770431  62.479370 #> 135    32.05221939   40.26439285  51.464222 #> 136     8.94421864   33.57593918  34.746838 #> 137   -49.65415192   52.76636887  72.455673 #> 138   -36.74377823   50.95045090  62.817622 #> 139    64.78625488   39.05715942  75.648665 #> 140    59.59397125  -50.64139175  78.204808 #> 141   -39.11506653 -205.13949585 208.835345 #> 142   -55.41257095 -116.88881683 129.358218 #> 143    17.16761589  -21.34117508  27.389282 #> 144    41.95885849   72.11415100  83.432587 #> 145   -19.20898438   31.10900307  36.561662 #> 146   -37.75675201   12.44782925  39.755764 #> 147     1.74342453   22.88331795  22.949635 #> 148   -27.29423904   22.13694954  35.142852 #> 149    17.06854820  115.14705658 116.405240 #> 150     3.76379204   75.69738007  75.790893 #> 151   -53.76263428    5.45221233  54.038389 #> 152   -48.60807419 -103.15320587 114.032139 #> 153    29.63697052  -82.31091309  87.483921 #> 154    23.85073853  -82.34737396  85.731836 #> 155    -7.57689667  -29.70662498  30.657673 #> 156   -33.60434723   45.71012497  56.733303 #> 157    85.37512207   69.01058197 109.778741 #> 158    15.47241974   22.55709648  27.353581 #> 159  -102.58435059   10.41591740 103.111786 #> 160   -39.37471390   58.46478653  70.487583 #> 161    40.40021133   38.12215042  55.547056 #> 162   137.80136108   50.39422226 146.726933 #> 163    96.67439270   22.25287247  99.202462 #> 164    85.17324066 -110.86930084 139.808736 #> 165    99.43761444 -174.73703003 201.049419 #> 166    84.58567810 -122.50820923 148.872423 #> 167   -28.50720596   15.42907715  32.414768 #> 168   -72.07962036   99.42038727 122.800184 #> 169   -80.06836700   48.32616806  93.521986 #> 170   -31.91189194   61.00539398  68.847854 #> 171   -58.12084961   39.96039581  70.532733 #> 172  -119.04746246   33.03592682 123.546229 #> 173   -53.00669861    1.25517404  53.021557 #> 174   -43.44281387  -30.97815132  53.356574 #> 175    -1.87250161  -19.26874733  19.359517 #> 176    16.25916672  -64.40415192  66.424809 #> 177    60.33338547 -130.64704895 143.905416 #> 178    21.26903152  -81.22439575  83.962933 #> 179   -41.24859619  -33.29961777  53.012369 #> 180   -15.22807980  -12.55825233  19.738392 #> 181     5.73246670   51.74625397  52.062808 #> 182     6.31440496  109.03849792 109.221178 #> 183   -15.38595676   85.32751465  86.703589 #> 184    63.82126236  -41.03305054  75.874006 #> 185    25.30247688   -9.00058079  26.855647 #> 186   -41.75249100   83.88237000  93.699106 #> 187   -19.59477043   65.80116272  68.656741 #> 188    46.00837708  -56.01183701  72.485148 #> 189   145.50840759 -104.78661346 179.312384 #> 190    34.49399185  -42.20246124  54.505809 #> 191    13.03320599   33.98307037  36.396614 #> 192    -9.91011620   64.78739929  65.540961 #> 193    -0.41631657  -13.74722385  13.753526 #> 194    33.54128265   10.03904438  35.011427 #> 195  -118.98147583   40.69783020 125.749374 #> 196  -171.41662598   -4.19001484 171.467828 #> 197  -150.00718689  -68.45847321 164.890020 #> 198   100.82685852  -42.31880951 109.347780 #> 199   205.50959778  104.30682373 230.464983 #> 200    18.12378120   69.13121796  71.467452 #> 201   -32.17167664  -57.47272873  65.864492 #> 202   -10.17906666  -23.42475700  25.540803 #> 203    27.14066696   41.84230042  49.873780 #> 204   -77.42701721   17.83856392  79.455380 #> 205   -96.60838318 -101.97249603 140.469106 #> 206    41.63218689 -134.25459290 140.561498 #> 207    82.25580597  -89.48851776 121.549218 #> 208    45.88671494  -36.55036163  58.664466 #> 209    26.93107414   31.50530624  41.447160 #> 210     1.39174521  125.38427734 125.392001 #> 211   -28.64696503  154.91792297 157.544316 #> 212   -55.77079391   61.83555603  83.270748 #> 213   -44.51401901   14.60372543  46.848337 #> 214    55.30084610   14.14176273  57.080408 #> 215    20.11773300   22.03590965  29.837971 #> 216    27.00564957   -4.26387119  27.340185 #> 217    74.37500763  -78.30981445 108.000319 #> 218   113.81530762  -84.38800049 141.687187 #> 219    -6.95455790  -35.91031265  36.577540 #> 220  -132.55201721 -103.49296570 168.169055 #> 221   -78.65300751 -108.35585785 133.892821 #> 222    24.44087410  -41.29942703  47.989572 #> 223    47.29740906   65.80929565  81.042633 #> 224    85.16950989  196.89376831 214.525060 #> 225    56.74518585   90.04063416 106.429939 #> 226   -42.67319107  -30.26461029  52.315847 #> 227  -126.75776672 -123.89401245 177.249140 #> 228   -48.15781403   12.08217907  49.650318 #> 229    55.39116669  147.57040405 157.623620 #> 230   -48.89060593   93.43272400 105.451246 #> 231   -91.61549377   24.76522636  94.903715 #> 232    -9.04533958  -34.45578766  35.623300 #> 233     2.84473896  -49.93273163  50.013700 #> 234    11.31811142  -76.65518188  77.486235 #> 235    58.27523041    2.51802564  58.329606 #> 236   120.68989563   69.23888397 139.140483 #> 237   126.65831757  103.37431335 163.488770 #> 238  -103.54281616   48.53452682 114.353466 #> 239  -144.62161255   14.53810883 145.350499 #> 240   -33.48325729  -67.54814148  75.391511 #> 241    60.51821518 -104.58213806 120.829955 #> 242    57.91065598  -93.13397217 109.670328 #> 243   -17.22136116  -25.19226265  30.515986 #> 244    -5.52811670   37.52158356  37.926631 #> 245    50.82038116   85.09210968  99.112957 #> 246    80.10853577   66.10702515 103.862969 #> 247    84.09963989    5.75545168  84.296350 #> 248    50.00827026   42.37288666  65.546080 #> 249   -81.78052521  -35.27708435  89.064735 #> 250  -115.91516876  -51.20880508 126.722800 #> 251   -31.47186852  -86.48790741  92.036062 #> 252     2.93320751  -39.52742386  39.636107 #> 253   -65.97778320    7.56616926  66.410201 #> 254   -67.19158936   12.93541527  68.425395 #> 255   -31.38292885   81.34199524  87.186056 #> 256    22.69365120  104.42299652 106.860489 #> 257    33.00522232   84.86633301  91.058438 #> 258    23.12311935  -20.55811882  30.940506 #> 259    49.23894501  -92.15886688 104.487944 #> 260   -56.30620193 -112.12905884 125.472364 #> 261   -34.83274460 -103.41632080 109.124954 #> 262     8.14363289    4.31191111   9.214735 #> 263    52.63050842   88.73981476 103.173277 #> 264   -33.65990829   68.83385468  76.623032 #> 265   -86.92826843   -4.28847885  87.033987 #> 266   -41.16833115    7.32407856  41.814754 #> 267    47.20074844   24.74983788  53.296014 #> 268    91.08226776  -61.52858353 109.916996 #> 269    71.68186951 -113.46485901 134.210896 #> 270    27.25442314  -41.44441223  49.602852 #> 271   -49.78190231   90.87254333 103.614945 #> 272     8.08046532  -76.85758972  77.281194 #> 273   -36.81880188 -128.70635986 133.869157 #> 274   -67.32272339   62.83023071  92.086845 #> 275   -56.36174393  130.04820251 141.736309 #> 276    47.72683334   23.46363068  53.182634 #> 277   144.17451477  -87.37561035 168.584661 #> 278    43.66642380   -6.24409056  44.110602 #> 279   -17.64082336   75.88631439  77.909764 #> 280   -84.09486389   -0.03783329  84.094872 #> 281  -142.71412659   11.27254486 143.158626 #> 282  -124.81470490   79.89624786 148.196225 #> 283   -40.56971741   24.90569115  47.604574 #> 284   147.20240784  -32.63299942 150.776197 #> 285   224.80906677  -91.47926331 242.708822 #> 286   183.55863953  -42.86841965 188.497946 #> 287   -32.91354370   19.93205833  38.478414 #> 288   -85.77320099   26.18533897  89.681180 #> 289   -97.36453247   34.15365601 103.181027 #> 290   -46.19074249    5.66645193  46.537011 #> 291   -42.51327515    2.67696714  42.597473 #> 292   -40.29206848  -30.97614288  50.822950 #> 293   134.12455750   -3.72084403 134.176159 #> 294    87.71527863   98.39126587 131.813547 #> 295     5.25532103   -2.04321146   5.638538 #> 296  -104.16301727  -38.80751419 111.157354 #> 297   -59.37385941  -62.76331329  86.397272 #> 298    21.52990723   62.23721695  65.855965 #> 299    82.40974426  186.13175964 203.559323 #> 300   103.42457581   15.39837456 104.564587 #> 301    74.14587402 -126.65591431 146.762840 #> 302   -58.22384644 -144.39752197 155.694125 #> 303  -141.03414917   -4.62918758 141.110101 #> 304   -35.65464020   85.95182800  93.053587 #> 305    82.33187866   29.57123947  87.481406 #> 306    78.31652832   23.44736481  81.751193 #> 307   -48.44343185   15.87420940  50.978001 #> 308   -81.01362610  -26.84378052  85.345159 #> 309   -87.17185974    6.58475304  87.420204 #> 310   -25.04164124  -59.64841080  64.691705 #> 311   -41.51992035 -104.63102722 112.568005 #> 312     9.12679195  -13.79535961  16.541169 #> 313    70.04244995   91.74844360 115.428427 #> 314    29.31330490   27.10766029  39.926120 #> 315    27.07387924 -117.73852539 120.811238 #> 316    -2.76882792  -41.04704666  41.140326 #> 317   -43.33816528   67.55987549  80.265393 #> 318   -60.70969772   52.19283295  80.060972 #> 319   -83.24902344  -13.91397762  84.403784 #> 320   -30.77949142  -26.69350815  40.742122 #> 321    54.33811569  -22.86683655  58.953567 #> 322    60.17578506   91.10937500 109.188110 #> 323   137.28079224  100.89526367 170.369804 #> 324    50.09967041   65.89162445  82.774894 #> 325  -102.59543610  -74.94383240 127.052751 #> 326  -159.57226562 -116.92467499 197.824891 #> 327  -138.71981812    3.85062265 138.773251 #> 328    89.41265106  -58.40935135 106.800161 #> 329   135.66775513  -28.51283073 138.631603 #> 330    22.46899414   -8.46514606  24.010714 #> 331   -14.90100193  102.79298401 103.867403 #> 332    83.66868591  100.14116669 130.494070 #> 333   177.51571655  -46.92904663 183.614174 #> 334   -13.39937878  -81.49095154  82.585220 #> 335  -208.03782654  -42.32398605 212.299451 #> 336  -175.63360596    1.93064952 175.644217 #> 337   -18.83211136  -17.35075760  25.606585 #> 338    66.35896301  -11.19776821  67.297117 #> 339    29.08527565  -62.10205460  68.575640 #> 340    -1.46593809  -98.06489563  98.075852 #> 341   -14.69189644 -107.20617676 108.208207 #> 342    71.64373779   -9.54378891  72.276615 #> 343   127.00988770  118.83891296 173.937342 #> 344    20.39437866  132.97035217 134.525259 #> 345   -19.66340065   95.94435120  97.938592 #> 346    -4.06092644   42.62424088  42.817252 #> 347    85.53274536  -47.76708221  97.967059 #> 348    -3.39304471   -9.74673748  10.320448 #> 349  -143.18618774   47.65852356 150.909308 #> 350  -102.72026062   81.69274139 131.244642 #> 351     8.58690453   -2.67350292   8.993472 #> 352   110.76647186 -106.32401276 153.538292 #> 353     7.28075647  -75.02671814  75.379161 #> 354   -70.14134216    5.59243202  70.363934 #> 355   -69.81311798   63.84563828  94.605164 #> 356   -19.88590813   90.39441681  92.555929 #> 357   -53.51765442   24.52610970  58.869936 #> 358   -18.07306862  -72.15883636  74.387724 #> 359    83.69824219   -1.43304491  83.710509 #> 360   144.82656860  -32.42929077 148.412917 #> 361    89.33890533  -17.21792412  90.982948 #> 362    29.94916534  -60.46448517  67.475229 #> 363   -69.19332123    7.50622463  69.599275 #> 364  -167.14918518  119.74293518 205.614252 #> 365   -45.77281570  130.20524597 138.016509 #> 366    -5.98937941   26.99004364  27.646611 #> 367    40.11558914  -77.10428619  86.915657 #> 368     9.20448780 -110.82424927 111.205831 #> 369    16.84873390  -90.88732910  92.435850 #> 370    44.72581100  -18.34647369  48.342438 #> 371   -69.28186798   11.27805042  70.193815 #> 372   -20.37448692   68.44639587  71.414486 #> 373    10.89561462  -58.53425598  59.539680 #> 374    59.81833267 -119.50035095 133.635949 #> 375    86.24524689   -3.59484673  86.320134 #> 376    59.27936172   97.07030487 113.739557 #> 377   -30.18540382   99.59355164 104.067450 #> 378   -19.89329529  -48.67932510  52.587260 #> 379   -33.08840179   -5.57461023  33.554711 #> 380    10.23501492   55.62978363  56.563490 #> 381    65.82101440  -28.98612404  71.920799 #> 382    16.68972588  -75.92815399  77.740797 #> 383   -39.67893600  -85.81240845  94.541988 #> 384  -100.25400543   42.37347412 108.841063 #> 385   -15.64279079   32.01850128  35.635394 #> 386     1.83439779    1.96582186   2.688768 #> 387     8.67442799  -21.95258141  23.604269 #> 388    29.05195999  -87.00616455  91.728344 #> 389     8.70209885  -37.64079666  38.633614 #> 390   -52.31593323   32.74855804  61.720539 #> 391    -3.12347698  181.00898743 181.035935 #> 392    41.74579239  112.85919189 120.332491 #> 393    70.24581909   38.01684189  79.873371 #> 394    27.45185852  -77.02014160  81.766171 #> 395    31.64413261 -112.92843628 117.278228 #> 396    12.85752773  -69.58824158  70.766089 #> 397    25.25354195  -35.46259308  43.535467 #> 398   -13.43893147   60.86901855  62.334920 #> 399  -149.73794556   51.43841934 158.326761 #> 400  -220.42189026  131.87406921 256.859066 #> 401   -94.32823181   59.29648209 111.417629 #> 402   130.44934082   28.45726967 133.517215 #> 403   124.73035431   11.76664639 125.284138 #> 404    92.16893005   29.31257820  96.717831 #> 405    13.25335217    5.98785019  14.543235 #> 406    52.94648743 -129.58412170 139.983482 #> 407    91.26811218 -138.72682190 166.057217 #> 408    95.47007751  -47.14662933 106.476948 #> 409    12.12379551    9.00999928  15.105181 #> 410   -68.43601227   56.21109009  88.561698 #> 411   -11.60608101   21.62810326  24.545386 #> 412  -104.24508667  -62.05085754 121.315073 #> 413  -158.37850952  -60.07873917 169.390694 #> 414  -143.62135315  -52.85330582 153.037790 #> 415   115.06463623   44.85939407 123.499942 #> 416   243.84716797  -13.42822361 244.216622 #> 417    16.52178192  -74.00265503  75.824549 #> 418  -154.71827698    3.19201922 154.751201 #> 419  -139.54052734   -0.19500472 139.540664 #> 420   -28.59981155    6.41195583  29.309766 #> 421     6.03660202  -57.59132004  57.906828 #> 422   -81.66593170  -61.67186356 102.336421 #> 423    33.51206207   42.27215195  53.944352 #> 424   167.87510681   96.85216522 193.810199 #> 425   110.52513123  134.15332031 173.818635 #> 426    24.42427635   34.08279419  41.930683 #> 427   -14.05195141    2.29534221  14.238186 #> 428    31.45372009   52.53807831  61.233865 #> 429    88.04232025   63.00099182 108.261605 #> 430    63.77066803   67.13162994  92.592407 #> 431    23.53393936  -49.24836731  54.582488 #> 432   -78.59223175 -115.81924438 139.967269 #> 433  -186.63905334  -92.44580841 208.279533 #> 434  -214.45710754   38.08604050 217.812758 #> 435  -144.36654663  135.09190369 197.715761 #> 436   121.19444275   67.10386658 138.531664 #> 437   247.53163147  -27.36900711 249.040099 #> 438   180.24172974  -72.53979492 194.291284 #> 439     6.74777269  -61.53343582  61.902311 #> 440  -143.74172974  -67.86172485 158.955650 #> 441  -110.60444641    8.80693436 110.954521 #> 442   -77.30387878  137.22897339 157.504542 #> 443   -24.09970665   80.51799011  84.047264 #> 444    92.12236786   -6.68191481  92.364380 #> 445   124.75943756  -72.25606537 144.173008 #> 446    68.99926758  -63.28023529  93.623112 #> 447   -40.50508881   -3.56728458  40.661871 #> 448   -95.89334869  -10.46851730  96.463072 #> 449   -85.07156372   47.77600479  97.569040 #> 450   -65.99888611  -11.99031830  67.079212 #> 451   -28.86519051 -123.08331299 126.422708 #> 452   107.94511414  -33.77291870 113.105074 #> 453   125.94364166   43.89279175 133.373078 #> 454   -28.81476212   16.72416687  33.316487 #> 455    -1.12702787  -97.86059570  97.867085 #> 456    40.15901566  -90.26622772  98.796449 #> 457    86.52510071  101.97663879 133.737908 #> 458    68.87376404  154.34782410 169.017295 #> 459   -44.41003799  153.12997437 159.439771 #> 460  -156.44822693   48.48669815 163.789522 #> 461  -210.87329102  -41.62352371 214.941998 #> 462   -72.12610626  -82.87763977 109.867549 #> 463   129.81230164  -51.75159454 139.747849 #> 464    79.66927338   20.89033318  82.362608 #> 465   -48.17162323   -2.75786161  48.250503 #> 466   -18.87126160  -64.76105499  67.454568 #> 467   -26.10991287  -46.29496765  53.150274 #> 468    -6.97115993   36.33373642  36.996452 #> 469     9.17943954   98.36758423  98.794958 #> 470    21.96909523   45.01817703  50.092688 #> 471    -1.37858927  -71.71824646  71.731495 #> 472   -25.80020714  -42.24514389  49.500534 #> 473    61.16593933   33.38007736  69.681430 #> 474    30.27335739   82.68235779  88.050261 #> 475   -10.43209934   21.13091660  23.565745 #> 476   -38.95117188   23.32436752  45.400660 #> 477    38.45721054   69.11723328  79.095821 #> 478   118.37351990   22.98821449 120.585025 #> 479    87.88486481  -20.14524269  90.164185 #> 480    20.06972885  -46.28493500  50.448877 #> 481  -110.82324982  -15.67286110 111.926008 #> 482  -109.22587585  -47.40728760 119.070327 #> 483    -3.40776181   13.44507790  13.870218 #> 484   105.80588531   49.59766388 116.853813 #> 485    62.97797775   -0.12471335  62.978101 #> 486   -16.44810677   -2.08659196  16.579930 #> 487  -101.13269806   45.34913635 110.834863 #> 488  -100.44512939   41.13620377 108.542210 #> 489   -14.26091194 -123.93083191 124.748646 #> 490   -32.69884109 -171.57608032 174.664151 #> 491   -26.50124359  -41.52653503  49.262247 #> 492    48.70246124   26.72295952  55.552194 #> 493   100.00659943   -9.52837181 100.459493 #> 494    58.53819656   26.84697914  64.400937 #> 495   -47.23855972   84.23902893  96.579995 #> 496    14.57029533   47.85115433  50.020261 #> 497    59.34279251  -13.95980644  60.962638 #> 498   -77.81711578   15.58378601  79.362194 #> 499  -127.61170197   13.57653618 128.331870 #> 500   -41.27878571 -117.28736877 124.339314 #> 501    66.09920502  -74.23372650  99.396937 #> 502    46.89427185    5.73934317  47.244183 #> 503    18.82621193   -0.97031277  18.851201 #> 504    94.99562836 -149.67776489 177.278320 #> 505   101.72956848 -157.01388550 187.088924 #> 506    51.38082886  101.12434387 113.428931 #> 507   -63.06459045  253.22250366 260.957427 #> 508  -127.32286072  178.42564392 219.195851 #> 509    -8.68623734  -68.93282318  69.477945 #> 510    54.23188782 -193.79931641 201.244311 #> 511    41.11597443 -127.92362976 134.368815 #> 512   -23.00713158   41.05570221  47.062711 #> 513    14.66761971  143.27308655 144.021930 #> 514    83.86999512  130.79852295 155.378344 #> 515     6.46447611   26.46239853  27.240558 #> 516   -67.14691925 -111.83283997 130.442680 #> 517   -97.00524902 -187.74563599 211.325441 #> 518   -39.84664536 -104.69882965 112.024998 #> 519    66.54091644  135.20149231 150.688875 #> 520   129.62879944  309.72320557 335.755997 #> 521   159.66250610  144.25788879 215.180051 #> 522    96.36022186  -79.04471588 124.632899 #> 523   -21.04705238 -196.64869690 197.771809 #> 524  -111.00110626  -51.44096756 122.341402 #> 525  -111.21102142   95.65653992 146.690371 #> 526   -33.83334351  116.79567719 121.597390 #> 527   -96.18516541   93.12741089 133.881667 #> 528   -93.47311401  -27.99176979  97.574393 #> 529    -0.05982983  -27.29317093  27.293237 #> 530   124.89114380  -72.26457977 144.291259 #> 531    78.19527435 -139.24032593 159.694613 #> 532   -29.99504471 -131.78527832 135.155696 #> 533    12.99599648  -45.88156509  47.686622 #> 534   -17.28785706   68.24786377  70.403415 #> 535   -50.24109268    3.65985346  50.374219 #> 536   -95.16686249  -31.71220207 100.311492 #> 537   -73.04141998    8.29992199  73.511480 #> 538    13.90826321   73.03618622  74.348667 #> 539    26.62594032   32.17407608  41.762565 #> 540    65.70945740  -60.53650665  89.344286 #> 541   -16.66707611  -74.21447754  76.063001 #> 542   -79.58473969    8.29026985  80.015370 #> 543   -10.51445961   81.70745850  82.381203 #> 544    24.70509529   16.02575111  29.447690 #> 545    -1.74572897    6.15068531   6.393630 #> 546    41.08879089  -10.77761269  42.478767 #> 547   182.48265076    0.04731501 182.482657 #> 548   172.19561768  -28.70577240 174.571911 #> 549     8.71352291  -21.90675545  23.576077 #> 550  -104.90503693  -14.44124889 105.894365 #> 551   -85.26345062  -25.05768013  88.869249 #> 552   -77.94915009   22.51384544  81.135339 #> 553   -48.81436157  126.53455353 135.623874 #> 554    75.55788422  153.36228943 170.964867 #> 555    84.67538452  112.00021362 140.406441 #> 556   -44.83696747   42.15751648  61.543561 #> 557   -70.14104462  -36.86555099  79.239100 #> 558    13.34177589 -154.23246765 154.808453 #> 559    94.08802795 -153.11529541 179.713246 #> 560   -60.33071899  -36.92029953  70.731211 #> 561  -153.77090454   82.08776093 174.309758 #> 562   -29.18435669   93.74170685  98.179602 #> 563    45.08523178  -29.03791809  53.627221 #> 564    94.98421478  -63.86969376 114.461080 #> 565   -40.26226807   -2.82875299  40.361517 #> 566   -61.70139694   99.96316528 117.472111 #> 567   -50.13307953  116.40643311 126.742981 #> 568    53.07511902   51.71849823  74.106486 #> 569   176.96730042  -48.97219467 183.618358 #> 570    94.83998108 -162.44235229 188.101408 #> 571     4.66095638 -101.17665100 101.283953 #> 572  -119.67239380   20.68872452 121.447541 #> 573  -152.91465759   26.17865372 155.139339 #> 574   -54.25918579  -53.65686035  76.309357 #> 575   132.18322754  -68.98577881 149.102124 #> 576   126.86019135   56.57078934 138.901988 #> 577   -10.26379013  124.56575012 124.987885 #> 578  -169.94337463   71.48867035 184.367515 #> 579  -100.90350342  -29.27580452 105.064693 #> 580    38.50471497  -89.82862854  97.733288 #> 581     6.60057783   -1.13203776   6.696950 #> 582  -100.16057587   64.23252869 118.987221 #> 583  -181.19918823   27.32560539 183.248014 #> 584   -14.51354504   31.18301392  34.395106 #> 585   131.61679077    4.72966623 131.701744 #> 586    59.44584656  -13.34845257  60.926102 #> 587    46.83681870 -108.81491089 118.466757 #> 588   145.04100037 -127.96046448 193.418645 #> 589   161.53939819  -52.75661087 169.935980 #> 590    53.26617813   -1.62992311  53.291110 #> 591  -134.33450317   23.31348801 136.342501 #> 592   -99.45222473   10.79847908 100.036754 #> 593    17.95348358  -52.91335678  55.876210 #> 594    78.24604797  -73.43975830 107.311892 #> 595     8.16126442   50.46339417  51.119080 #> 596   -31.23771095   87.80894470  93.199814 #> 597   -48.39439011  106.88611603 117.331406 #> 598   -16.76768112   39.13901901  42.579548 #> 599    45.70510864   93.12734222 103.738415 #> 600    26.08951187   99.13555908 102.511081 #> 601     5.59094667   19.66412163  20.443492 #> 602  -135.54129028   23.69564247 137.596965 #> 603   -71.03837585  -49.84299850  86.780040 #> 604    31.32436562 -118.47753143 122.548526 #> 605   135.23544312 -143.32083130 197.051987 #> 606   175.84001160   11.81545353 176.236530 #> 607    39.31386566  150.84692383 155.885774 #> 608   -79.67611694  150.87126160 170.617763 #> 609  -166.78617859   38.29925919 171.127037 #> 610   -83.53504181  -45.34209824  95.047404 #> 611    18.31995010 -152.37820435 153.475528 #> 612    15.56239986  -40.70268250  43.576331 #> 613   101.67198181   65.19857788 120.780985 #> 614    63.00641632  -29.40491867  69.530265 #> 615    38.94959259  -80.88945770  89.778478 #> 616   -84.95876312 -181.45062256 200.355484 #> 617  -159.56181335 -101.75903320 189.248179 #> 618    10.31528187  -42.58941650  43.820811 #> 619    39.64271545   71.14680481  81.445766 #> 620    47.83625793  217.80502319 222.996268 #> 621   -31.52000046  114.53610229 118.794062 #> 622   -37.21648407   19.03615952  41.802417 #> 623     7.42490149  -83.37500763  83.704964 #> 624    24.28145981  -63.03229523  67.547461 #> 625    10.32353115   27.71688271  29.577033 #> 626   -49.30120850  -21.51939011  53.793060 #> 627   -76.90431976    6.27755594  77.160107 #> 628   -39.18487930   59.47889709  71.226357 #> 629    49.23028183   96.20763397 108.071872 #> 630    22.50787926   34.82870865  41.468585 #> 631     8.27268505  -90.51039886  90.887676 #> 632    -6.59831095  -97.60314941  97.825930 #> 633    32.83495331  -54.56072617  63.678937 #> 634    49.26848221  -25.15211105  55.317375 #> 635    48.53191376  -42.06927109  64.227488 #> 636    37.75801849  -10.24060154  39.122089 #> 637   -26.26220894   52.02227783  58.275389 #> 638     3.42547631   52.93716431  53.047877 #> 639     2.51778460  -78.97619629  79.016320 #> 640    42.44393158 -105.27374268 113.507921 #> 641   -82.66739655   78.05281830 113.693188 #> 642  -155.76228333  193.30902100 248.254439 #> 643   -93.65982819  127.55937958 158.251568 #> 644     8.52234173  -55.75648499  56.404042 #> 645   124.51387024 -145.11062622 191.208780 #> 646    89.79693604 -144.66589355 170.269523 #> 647    73.16889191  -53.86597443  90.858296 #> 648    32.57668304   66.99851990  74.498604 #> 649   -14.68336296   70.20796967  71.726983 #> 650   -43.25064087   94.97751617 104.361614 #> 651   -32.99354935   12.29429245  35.209714 #> 652   -62.82257843  -14.96839714  64.581184 #> 653   -74.52397156  -17.54945946  76.562431 #> 654   -27.19171143 -109.31084442 112.642132 #> 655    73.04672241 -138.68432617 156.745545 #> 656    25.95678902 -139.31317139 141.710672 #> 657   -62.52130127  -47.01173782  78.224143 #> 658    -9.29044628  -32.55734253  33.856948 #> 659    84.60537720  -54.81041336 100.807992 #> 660    75.56538391  113.47809601 136.335636 #> 661   -47.63891220  288.02407837 291.937212 #> 662   -58.92575073  171.76727295 181.593613 #> 663    54.11035919  -70.73763275  89.060337 #> 664   137.53909302 -117.75737762 181.062978 #> 665    73.06482697  -70.33623505 101.418218 #> 666    29.53673363   -1.63964772  29.582209 #> 667    13.80336666  -13.40216160  19.239305 #> 668    23.39941406   96.12495422  98.931994 #> 669   -41.87068176   59.78461456  72.988726 #> 670   -66.15396118   -1.24736607  66.165720 #> 671   -29.52023506   -8.73087883  30.784290 #> 672   -53.57234573   -9.51747608  54.411199 #> 673   -80.05014038   -3.86172199  80.143233 #> 674    14.99285126   25.17040062  29.297349 #> 675   101.70918274  140.08955383 173.117997 #> 676    28.15961075   87.89675140  92.297360 #> 677   -23.51550293  -48.25397873  53.678910 #> 678    16.74365997 -122.16441345 123.306505 #> 679    40.55296326  -66.60783386  77.981705 #> 680     4.22721815  -11.38758278  12.146869 #> 681   -57.87931442  123.63450623 136.511927 #> 682   -43.29711533  123.17365265 130.561820 #> 683   -57.03191757   32.89144135  65.836817 #> 684   -37.58251953 -104.73263550 111.271608 #> 685    77.19779968 -122.76048279 145.015987 #> 686    10.82631588   -9.47832203  14.389152 #> 687  -158.36994934  -20.72175407 159.719855 #> 688  -110.49295044   -7.55399084 110.750869 #> 689    90.24384308  -18.62001610  92.144757 #> 690   145.32115173  -52.36230087 154.466979 #> 691    68.27388000   65.25650024  94.444341 #> 692   -13.19952583  114.47613525 115.234600 #> 693    20.45154190  128.40370178 130.022214 #> 694   -59.91720200  -46.07968521  75.587092 #> 695   -79.97176361 -146.99742126 167.343135 #> 696    16.84753799  -82.83750153  84.533373 #> 697    19.17965317   66.45447540  69.166874 #> 698    -4.75405455   94.77760315  94.896760 #> 699    26.43308258    8.38420773  27.730900 #> 700   109.51280212  -60.48536301 125.106087 #> 701   -52.70072174  -64.02845764  82.927736 #> 702  -164.30798340   80.12905121 182.805301 #> 703   -46.13421631  -40.50395584  61.391664 #> 704   100.38563538  -80.09845734 128.425226 #> 705   157.38363647  -34.34419632 161.087345 #> 706   -35.60499954   49.28367615  60.799644 #> 707  -125.06841278   82.73339081 149.956400 #> 708   -51.15097809  -25.22308540  57.031803 #> 709    72.55444336    3.69053054  72.648243 #> 710    86.37786102   76.66910553 115.495829 #> 711   -71.05093384    3.78585720  71.151725 #> 712  -127.99076080  -12.06775093 128.558413 #> 713   -42.06110001  -39.19908905  57.495258 #> 714    25.48969078  -26.23170853  36.576316 #> 715    27.63719559  -78.11753082  82.862315 #> 716    86.51737976 -102.90132904 134.439356 #> 717    59.11045074   68.41153717  90.411193 #> 718   -49.54826736  177.33398438 184.125970 #> 719   -40.37028885  204.04592896 208.001205 #> 720   -41.33780670   76.22864532  86.715746 #> 721    40.56668854 -109.80505371 117.058985 #> 722    21.06079865 -145.83988953 147.352742 #> 723   -19.45284081  -10.89235497  22.294762 #> 724   -37.86110687  138.32511902 143.413047 #> 725   -12.54169178   42.65317917  44.458832 #> 726    49.00381470 -129.44439697 138.409630 #> 727   -27.93229675 -150.15667725 152.732580 #> 728   -41.05122757  -59.99954605  72.699029 #> 729   -43.88299942  -12.40995979  45.603999 #> 730     4.94224310   -5.99270868   7.767775 #> 731    55.21606445   41.31168747  68.959911 #> 732    82.00843048    1.88104212  82.030001 #> 733    79.46675110  -27.87602615  84.214235 #> 734   -62.75357819  -19.49486923  65.711959 #> 735   -78.62962341   16.11346817  80.263700 #> 736    42.22054291  -16.26889992  45.246562 #> 737    31.22259331  -76.70475769  82.815881 #> 738   -34.47046661   30.50145531  46.027729 #> 739  -117.79575348   77.81726837 141.178493 #> 740    10.90311337  104.83818054 105.403615 #> 741   126.26706696   78.66688538 148.767776 #> 742   184.18025208   50.31511688 190.929244 #> 743    63.95394516   48.84292603  80.471974 #> 744  -121.28723907   29.21407890 124.755989 #> 745   -96.07393646   50.07135391 108.339013 #> 746   -14.76234818   35.42868423  38.381227 #> 747    63.43251801    9.31987286  64.113527 #> 748   -22.59085846  -44.57124710  49.969420 #> 749   -30.81736374 -129.16665649 132.792075 #> 750    -8.01641083 -123.61531067 123.874969 #> 751   -32.68339539   -5.02556705  33.067517 #> 752   -78.60231781  146.95289612 166.653767 #> 753    28.89378357  113.79899597 117.409805 #> 754   183.29003906   26.33748245 185.172626 #> 755   127.13836670  -87.41665649 154.291400 #> 756   -23.33377075 -156.83569336 158.561974 #> 757  -100.21578217 -118.09307861 154.884403 #> 758   -16.02277756  -38.28721619  41.504702 #> 759   -37.26052856   48.52905655  61.183464 #> 760  -116.62381744   50.42569733 127.058513 #> 761  -175.52525330  -25.76574898 177.406281 #> 762   -58.63358688  -73.44291687  93.977442 #> 763   111.91447449   19.59305573 113.616625 #> 764   155.32740784   50.21345901 163.242136 #> 765    74.77164459   42.28440857  85.899767 #> 766   -48.92903900  -59.00756836  76.654706 #> 767     4.08257771  -14.99215508  15.538087 #> 768   -58.01536942   65.91535187  87.810117 #> 769  -110.57716370  133.90931702 173.663509 #> 770   -20.11196136  108.53258514 110.380311 #> 771    22.34291077  -39.97265625  45.793219 #> 772    25.83448029 -157.68127441 159.783618 #> 773    28.08787918 -116.19979858 119.546318 #> 774   148.64268494  -38.90910339 153.650793 #> 775    85.75090790   30.15785408  90.899474 #> 776  -143.58444214   51.06830978 152.395749 #> 777  -116.19598389    1.56626725 116.206540 #> 778     8.65464401   -0.09906838   8.655211 #> 779    65.75527191  -36.47388077  75.193748 #> 780    30.34040070   27.97102737  41.266431 #> 781    78.07027435  -11.16968060  78.865262 #> 782   132.70275879  -59.23735046 145.324072 #> 783    65.97493744   39.33000946  76.808476 #> 784   -10.03827858   81.79497528  82.408647 #> 785  -139.93257141   90.48955536 166.641784 #> 786  -177.01753235   -4.19191837 177.067159 #> 787   -49.11605835 -113.95363617 124.087946 #> 788   140.17599487  -79.47710419 161.139442 #> 789   113.38711548  -91.52369690 145.716248 #> 790   -75.11293793 -113.70023346 136.270674 #> 791  -170.81156921   -3.61102653 170.849734 #> 792   -82.41165924  120.88485718 146.303897 #> 793    23.97335243  173.98280334 175.626699 #> 794   115.40427399    9.21865368 115.771888 #> 795   159.98780823  -60.49707794 171.043840 #> 796    76.41973877   63.91266251  99.623315 #> 797    31.67017555   74.07806396  80.564009 #> 798   -68.55724335    7.43101454  68.958796 #> 799   -22.81621170  -35.57799911  42.265512 #> 800   -24.64127350  -10.87579346  26.934648 #> 801   -22.49381447  -64.69613647  68.494976 #> 802   -18.61738586  -83.19847107  85.256042 #> 803   -65.91907501   -0.20799731  65.919403 #> 804    -7.23017454  124.62425995 124.833816 #> 805   -34.80879593   43.81245422  55.956978 #> 806   -75.91017914    8.54619408  76.389742 #> 807    60.49903107  -29.69121170  67.392142 #> 808   128.29196167  -46.40010834 136.425062 #> 809   101.94896698   -4.22580957 102.036510 #> 810    98.63510895   28.76813889 102.744783 #> 811    -3.03991365  165.45097351 165.478898 #> 812    -9.37145042   -1.99578154   9.581609 #> 813  -153.09609985  -74.61282349 170.309980 #> 814  -150.34548950 -218.64115906 265.344536 #> 815   -37.97883224 -161.01786804 165.436228 #> 816    15.35665989   69.77539062  71.445309 #> 817    75.36982727  113.05590057 135.875853 #> 818    44.79362106  150.95138550 157.457262 #> 819    18.05767059    3.25181246  18.348127 #> 820    56.79021072   -9.08800316  57.512780 #> 821    33.56640244  -24.71457100  41.683491 #> 822   -34.76181412 -116.01631927 121.112221 #> 823   -77.94577026  -43.95378494  89.484514 #> 824   -21.75624847   95.13338470  97.589422 #> 825    85.68266296  129.44689941 155.235365 #> 826    45.20008469  -39.66656876  60.137213 #> 827    38.05239105 -129.61680603 135.087012 #> 828   -19.06553650   -5.65364838  19.886136 #> 829   -38.36513901  128.74368286 134.338452 #> 830   -59.90127563   99.91482544 116.495215 #> 831    13.03228951    6.80833483  14.703537 #> 832    83.28607178   47.94528198  96.100571 #> 833   -17.15739250    6.50765753  18.350088 #> 834   -58.49084091  -18.57802963  61.370365 #> 835   -14.02857494  -29.05680656  32.266065 #> 836    26.19239235    2.07401896  26.274379 #> 837   -69.44931030   -7.72288990  69.877391 #> 838  -116.22426605  -57.08013916 129.484448 #> 839     2.29924631  -76.30566406  76.340297 #> 840   142.16087341 -113.04527283 181.628598 #> 841   149.12709045  -15.99256706 149.982170 #> 842    15.06596756   71.69535828  73.261230 #> 843  -115.09529877   77.21415710 138.596370 #> 844  -147.49559021  -55.65400696 157.646179 #> 845   -20.17903519  -64.65913391  67.734755 #> 846    26.68965912   53.50327301  59.790786 #> 847     5.30933189  150.31100464 150.404744 #> 848     9.61325932  156.00827026 156.304175 #> 849     9.68706417   81.56748962  82.140700 #> 850    36.91756439  -49.66031647  61.879347 #> 851   -53.49604797 -135.96736145 146.112801 #> 852   -50.37472916 -101.62264252 113.422991 #> 853    -2.03023314  -69.98823547  70.017676 #> 854   -30.46509552   11.29657650  32.492071 #> 855   -11.61387157   19.41865349  22.626668 #> 856    69.98097992   21.58728218  73.234884 #> 857    86.57492828   19.19300270  88.676883 #> 858    -0.48921198  -89.17676544  89.178107 #> 859   -58.12649918  -14.61793232  59.936415 #> 860   -50.26218796   40.55476761  64.583099 #> 861    77.97845459   77.63108063 110.032832 #> 862    68.84764099   65.88711548  95.294856 #> 863    44.53255844  -38.07771683  58.592331 #> 864    27.70919609  -64.34365845  70.056448 #> 865   -71.58100128 -121.62820435 141.128522 #> 866   -68.15018463   26.49433136  73.119062 #> 867    -0.30068752   66.90499878  66.905674 #> 868    65.95797729   59.10549164  88.565873 #> 869    76.67872620  -44.21905136  88.515262 #> 870   -47.24660110  -35.46365738  59.075480 #> 871   -94.10164642   67.47482300 115.792796 #> 872   -49.51909256   -4.30790901  49.706122 #> 873   -37.33414078   10.95703125  38.908799 #> 874    80.03781891  -39.17832565  89.112253 #> 875     5.13763714  -29.86920547  30.307833 #> 876   -65.11968994   71.46881104  96.686943 #> 877   -14.46733379  111.70946503 112.642391 #> 878    -1.32809746   31.90773201  31.935360 #> 879   -58.41996765 -115.92459869 129.812962 #> 880  -154.02195740 -180.99865723 237.662107 #> 881    42.44060135  -59.91357040  73.422344 #> 882   153.86425781   92.05966949 179.301959 #> 883    54.98603439  142.37689209 152.625828 #> 884   -37.05253601   14.47847557  39.780858 #> 885   -11.37016678 -127.64553070 128.150935 #> 886    54.00441360  -84.65938568 100.417570 #> 887   -48.10185242   32.18431091  57.875885 #> 888   -10.25988960   63.18938065  64.016897 #> 889    45.91882324  -34.04330826  57.161921 #> 890    76.35962677  -47.83564377  90.105724 #> 891    64.29415131   90.82571411 111.279146 #> 892    78.72482300   72.96112061 107.335562 #> 893    83.08228302  -43.87615204  93.956280 #> 894   -49.02255630 -156.24636841 163.756339 #> 895   -97.02822113  -98.27821350 138.105333 #> 896   -27.38301277   94.57853699  98.462831 #> 897    15.97739220  146.86766052 147.734176 #> 898   -10.51274204  108.55272675 109.060590 #> 899   -82.56497955   -0.05913021  82.565001 #> 900   -67.22653961    5.30364275  67.435423 #> 901    14.26495743   36.95734787  39.614828 #> 902    68.31423950   10.23621941  69.076881 #> 903    71.51341248  -97.88029480 121.221781 #> 904   -10.58254910 -193.96519470 194.253667 #> 905   -23.84971046  -77.44863892  81.037648 #> 906   -16.06828880   60.11917114  62.229452 #> 907   -99.74293518   71.79843140 122.896981 #> 908  -108.65807343   -2.18980908 108.680137 #> 909    21.49862289  -51.92247391  56.197278 #> 910   173.18304443   31.32865524 175.993896 #> 911   147.28436279   -9.78763294 147.609218 #> 912    22.60436630  -48.87754822  53.851389 #> 913   -36.54486084    9.42555523  37.740799 #> 914     6.15495205   22.16579437  23.004475 #> 915    28.60566711   55.62847137  62.552466 #> 916   -58.11803818    2.36507034  58.166141 #> 917  -118.73042297   16.01051140 119.805049 #> 918   -49.37841415  -21.24464417  53.754653 #> 919    22.76794052  -18.13657570  29.108667 #> 920    -4.72956371   22.80528069  23.290547 #> 921   -12.54792786   18.45740509  22.318743 #> 922    68.93797302    7.75785065  69.373110 #> 923   118.20181274  -30.07293510 121.967414 #> 924    16.54583359  -69.71925354  71.655697 #> 925   -57.22065735   16.07646751  59.436154 #> 926   -27.59093475   54.13452911  60.760241 #> 927    10.74528980   -1.77366114  10.890690 #> 928    52.79579163  -91.24989319 105.422667 #> 929   -20.02615929 -109.58593750 111.400739 #> 930  -110.37002563   61.98468781 126.584533 #> 931  -127.85457611  103.46168518 164.472225 #> 932   -95.56276703   99.58271027 138.017965 #> 933    37.66080856   15.26785755  40.637962 #> 934    81.30148315  -24.76577759  84.989852 #> 935    74.37947845  -44.02164078  86.430386 #> 936    59.67578888   15.35005856  61.618375 #> 937    47.15624237   82.54293823  95.063389 #> 938    38.42236710   83.94200897  92.317599 #> 939   -40.57361221   -0.20835547  40.574147 #> 940   -73.03038025  -76.72831726 105.927669 #> 941    21.65474701 -147.28929138 148.872642 #> 942    52.11041641 -165.49789429 173.508065 #> 943   -36.27015686  -34.47885895  50.043141 #> 944   -86.75305939   16.49835396  88.307921 #> 945    52.70376587   71.54042053  88.857857 #> 946   116.07716370  -15.15082741 117.061759 #> 947     7.28078938   66.97296143  67.367555 #> 948   -72.02360535   77.23693848 105.607502 #> 949    -4.61683178  -26.46659470  26.866257 #> 950    45.89289474  -31.80497551  55.836496 #> 951   -71.84606171   13.92028713  73.182177 #> 952  -128.23002625  200.15896606 237.711067 #> 953   -23.42918968  245.94329834 247.056740 #> 954    43.45116425   41.80357361  60.295460 #> 955    87.61547852  -67.28988647 110.473530 #> 956   126.41314697 -155.49574280 200.397629 #> 957    70.49267578 -113.10137177 133.270918 #> 958   -24.48332596  -55.20981979  60.395012 #> 959  -114.05984497  -61.17141724 129.427936 #> 960   -70.02024078   34.80216980  78.192232 #> 961    27.74257278   39.96072769  48.646789 #> 962   -14.87911510   52.32492447  54.399318 #> 963   -18.05287170   63.74614334  66.253128 #> 964   -36.10786057    6.03061390  36.608003 #> 965   -19.81472778  -98.79724884 100.764675 #> 966   117.74131775  -78.58773804 141.559353 #> 967    18.45608330   23.86853409  30.171741 #> 968   -77.46539307   76.96199799 109.197236 #> 969   -94.21755981  -11.92087078  94.968709 #> 970   -21.05066681  -98.61328888 100.835070 #> 971   115.71840668  -48.95837021 125.649002 #> 972    78.87981415   -9.62617779  79.465014 #> 973    38.42720413   40.59972000  55.901586 #> 974    28.21814919   55.89040756  62.609916 #> 975   -18.22324371   18.91838646  26.267698 #> 976   -48.07498550  -12.94199467  49.786539 #> 977   -68.43933105  -12.28102779  69.532479 #> 978   -42.27766800   -8.69292831  43.162115 #> 979    34.26105881   30.71782684  46.015270 #> 980    77.86547852   52.99994278  94.191436 #> 981    14.22305870   86.12832642  87.294811 #> 982   -80.54345703   44.25643921  91.901474 #> 983   -90.19578552  -19.11716652  92.199489 #> 984   -63.81469727   97.54783630 116.567131 #> 985    44.51755142   96.67222595 106.429938 #> 986    59.05020523   23.27466011  63.471541 #> 987    57.28279114 -139.73178101 151.017512 #> 988    32.95298386 -230.47901917 232.822846 #> 989  -123.28675079 -139.40156555 186.097876 #> 990  -102.89952087   15.24464130 104.022644 #> 991    -8.43126488  144.59460449 144.840208 #> 992   105.89252472  126.41860199 164.908731 #> 993    31.30424500   24.87885857  39.986415 #> 994   -99.81827545  -30.34928131 104.330087 #> 995    -8.19162846  -62.37284470  62.908462 #> 996   129.68522644  -72.92395020 148.782259 #> 997    70.06220245   -3.70625377  70.160163 #> 998  -123.29978943   45.35039139 131.375401 #> 999  -365.97384644   -0.90696245 365.974970 #> 1000            NA            NA         NA"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Differentiate x y compute change amplitude via algorithm proposed Nyström  Holmqvist (2010) doi:10.3758/BRM.42.1.188 . Note components amplitude smoothed independently via Savitzky-Golay filter, components may (probably ) add amplitude. Note filtering sensitive presence NA.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"nh_sg_filter_order\" = 2)) #> # A tibble: 1,000 × 3 #>         x      y   amp #>     <dbl>  <dbl> <dbl> #>  1   NA     NA     NA  #>  2   NA     NA     NA  #>  3   NA     NA     NA  #>  4   NA     NA     NA  #>  5   NA     NA     NA  #>  6   NA     NA     NA  #>  7   NA     NA     NA  #>  8  -34.5  -31.0  674. #>  9 -140.   147.   364. #> 10   89.5 -298.   207. #> # … with 990 more rows"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from samples using votes from selected methods. — extract_saccades","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Extract saccades samples using votes selected methods. method votes whether given sample belongs saccade. Next, saccades identified via majority vote using  vote_threshold parameter, well minimum duration minimal temporal separation criteria. Please note units gaze samples must  degrees visual angle. units important methods use specific (e.g., physiologically plausible) velocity acceleration thresholds. default, ensemble includes methods proposed Engbert & Kliegl (2003) (\"ek\"), Otero-Millan et al. (\"om\"), Nyström & Holmqvist (2010) (\"nh\"),  see Implemented Methods vignette. However, can extended via custom methods, see Using Custom Methods vignette. default, function returns table identified saccades can return matrix methods' votes per sample instead (return_votes = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"extract_saccades(   x,   y,   sample_rate,   trial = NULL,   methods = list(method_ek, method_om, method_nh),   velocity_function = saccadr::diff_ek,   options = NULL,   binocular = \"merge\",   vote_threshold = ifelse(length(methods) == 1, 1, (length(methods) - 1)),   minimal_duration_ms = 12,   minimal_separation_ms = 12,   return_votes = FALSE )"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"x Horizontal coordinate, either vector monocular data two-column matrix binocular data. y Vertical coordinate, either vector monocular data two-column matrix binocular data. sample_rate Sampling rate Hz. assumed common entire time series. time series contains chunks (trials) recorded using different acquisition rate (e.g., SR Research Eyelink allows set different acquisition rate recording / trial), need split time series analyze separately. trial Optional vector trial ID. omitted, samples assumed belong single trial. Velocity, acceleration, saccades computed respecting trial borders. methods list saccade detection methods, can include external functions implement sample classification (see Using Custom Methods vignette). Package methods include Engbert & Kliegl (2003) (method_ek), Otero-Millan et al. (2014) (method_om),  Nyström Holmqvist (2010) (method_nh). Defaults list internally implemented methods: list(method_ek, method_om, method_nh). velocity_function handle function compute velocity acceleration. Defaults method suggested Engbert & Kliegl (2003) diff_ek. package also implements method proposed Nyström Holmqvist (2010) diff_nh. See vignette \"Velocity computation\" details information implement custom method. options named list options saccade detection (see method_ek, method_om, method_nh) velocity (diff_ek, diff_nh) computation. See documentation specific method details. binocular Specifies binocular data treated. Options \"cyclopean\" (binocular data converted average cyclopean image saccades extracted), \"monocular\" (saccades extracted independently eye), \"merge\" (default, sample votes obtained eyes methods averaged. way binocular saccades, .e., eye movements sufficient temporal  overlap eyes, detected.). vote_threshold Value 1 N (N number used methods) defining vote threshold saccade. default, one method \\(threshold = N-1\\) must agree sample considered saccade. Threshold 1 applied single method used. minimal_duration_ms Minimal duration saccade milliseconds. Shorter candidate saccades discarded, minimal_separation_ms Minimal time separation saccades milliseconds. Saccades separated shorter interval \"saccade\" votes, merged including period. return_votes Logical. Whether function return extracted microsaccades (FALSE, default) votes per sample (TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"data.frame saccade properties (see details), return_votes = FALSE. Alternatively, returns votes per sample (return_votes = TRUE). monocular processing (monocular input, cyclopean merged binocular data) matrix nrow(x) rows length(methods) columns 0/1 votes sample method. binocular processing, function returns two element list  similar matrices per eye.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Variables describe saccade Trial Trial index. Eye \"Monocular\" monocular inputs. \"Cyclopean\" binocular data averaged applying algorithms. \"Binocular\" binocular data votes averaged applying algorithms. \"Left\" \"Right\" binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"# Single trial data(single_trial) saccades <- extract_saccades(single_trial$x, single_trial$y, 500)  # Multiple trials data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x,                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)    # binocular saccades                              data(\"single_trial_binocular\")  saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                          single_trial_binocular[, c('yL', 'yR')],                                          sample_rate = 1000)                                            # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                         single_trial_binocular[, c('yL', 'yR')],                                         sample_rate = 1000,                                         binocular = \"cyclopean\")   # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                        single_trial_binocular[, c('yL', 'yR')],                                        sample_rate = 1000,                                        binocular = \"monocular\")                               # Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x,                              single_trial$y,                              500,                              methods = list(method_ek, method_om))  #  Alternative velocity computation method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh) #> Warning: no non-missing arguments to max; returning -Inf  # A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)  # Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"Smooths signal using Savitzky-Golay shifts filtered signal back","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(x, sg_order)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"x vector float sgOrder integer, order filter","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"vector float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(rnorm(1000), 2) #>    [1]            NA            NA            NA            NA            NA #>    [6]  1.6202346033 -0.5294401555 -1.0509347430  0.3831928970  1.4544312427 #>   [11]  1.2532619008 -0.6970583361 -0.8735707494 -0.7545367421  0.9390387842 #>   [16]  0.5096102647 -0.4213092940 -0.6644660213  0.2876362651 -0.1982718955 #>   [21] -1.1656098662 -0.6052868168  0.5909873901  1.1706783566  0.1797669361 #>   [26]  0.0826536775  0.6004781542  0.9569765772  1.1949845451  1.1001295658 #>   [31]  0.7402799391 -0.8675828266 -1.6906820927 -1.4024389564 -0.1765483435 #>   [36] -0.2390191450 -1.0420066524 -1.0766403223 -0.2690884901  0.0413001380 #>   [41]  0.1080101937 -0.6836668414 -0.1927309526 -0.4996797238  0.1528509685 #>   [46]  0.0700752355  0.3850957367  0.0958377314  0.2943085573  0.5258627601 #>   [51]  0.1101468134  0.4192627964  0.3721041139  0.4201856251 -0.4107749147 #>   [56] -0.6651497653 -0.4606647218  0.8374413985  0.6454939258 -0.0968227071 #>   [61] -0.4777392711  1.1356362519  0.9233969899  0.5922680142 -0.7803420236 #>   [66] -0.7113876347 -0.8269452770  0.1064189619  0.0511436893  0.1335932042 #>   [71] -0.6134625963 -0.3555388782 -0.2836091390  0.3086266808 -0.0190652679 #>   [76]  0.3872504479  0.3913751443  1.4101072269  1.7797386239  1.7010644011 #>   [81]  0.0114969980 -0.8077634019 -0.4360641280  1.0128211100  1.0804869495 #>   [86]  0.6840057869  0.3350066016 -0.3449898777 -1.1279907853 -0.6857263403 #>   [91] -0.1815054862  0.2516909346 -0.2413905803  0.2940461511 -0.4567829004 #>   [96] -0.0461354936 -0.7792963921 -0.7340370438 -0.6871331078 -0.0001611077 #>  [101]  1.1635512758  0.9162442754  0.3883165830 -0.6673293689 -0.1123134724 #>  [106] -0.5378762821 -0.5718969304 -0.6403464664  0.5261189981  0.1421606484 #>  [111] -0.2002981050 -1.1532619358 -0.2565702025 -0.0594338167  0.2097793186 #>  [116] -0.4688941108  0.4748134984  0.7511519052  1.0547539049 -0.4893195679 #>  [121] -0.5806439732 -0.0595243824  1.0145275602  0.6105409601 -0.1964869336 #>  [126] -0.2044227204  0.0488952885  0.4118469905  0.4234884543  0.3253270011 #>  [131]  0.2308702697  0.1853109906  0.4211575596 -0.0471124877 -0.0562210117 #>  [136]  0.7312754838  0.7038054128  0.5790398400 -0.4882387709  0.0511627564 #>  [141] -0.9033107021 -1.1526906651 -1.4804364750 -0.0737283868  0.2494544338 #>  [146]  1.0122352136  1.0672313155  0.5955358955 -0.2503781542 -0.1185683343 #>  [151]  0.2965268439  0.1619707991  0.0752108668  0.1553696350  0.1742361386 #>  [156] -0.2254545398 -0.4707230024 -0.2041540397 -0.2720264250 -0.9608301153 #>  [161]  0.1279106275  0.9327418070  0.6550037935 -0.6885844726 -1.2988784262 #>  [166] -0.3185113349  0.5690077455  0.8917247527 -0.7200035070 -0.5418991405 #>  [171] -0.4895325747 -0.6175708455 -0.2420750891  1.0257277980  1.5437325622 #>  [176]  0.3775221697 -0.3707582051 -0.8114786734 -0.2469454190  0.3385648236 #>  [181]  0.5853514390  0.6738707086  0.1217943594  0.0333304404 -0.2795716245 #>  [186]  0.4986500631  0.5808423629  0.5394600707 -0.7013559000 -0.9406760764 #>  [191] -1.3173006415 -1.0613759965 -0.1613508892  0.8445833690  1.1898906392 #>  [196]  0.9871278143 -0.1371816295 -1.3036583734 -0.5535865311  0.5496262116 #>  [201]  0.0030928930 -0.7313365597 -0.3785688981  0.2639624371  0.0335627031 #>  [206]  0.4266079014  0.1295323740  0.3123220827 -1.1501632817 -0.6394076450 #>  [211] -0.2967260548  1.0135256198  0.3149152320  0.0807852881 -1.0558941780 #>  [216] -1.5054334571 -1.1033493730  0.3863843465  0.8586473077  0.6363983333 #>  [221] -0.1003926586 -0.2728759910  0.1733466668  0.5205022745  0.4006074183 #>  [226]  0.8883670298  0.9831099115  0.8063449060 -0.0590430348 -0.5535439242 #>  [231] -0.5887083359  0.3021446313  0.6175747819  0.4325496328  0.4940260119 #>  [236] -0.5021999536 -1.2036635310 -0.7132352820  0.1498736927  0.7511017616 #>  [241] -0.0274609412  0.6378380585  0.1080802661  0.7151493307 -0.5224137098 #>  [246] -0.5764312676 -0.9016277899  0.3018409217  0.9763098846  0.8950385476 #>  [251] -0.4540104309 -0.7097624808 -0.8026835618 -0.1559996263  0.3451214919 #>  [256]  0.8350733187  1.0271919833 -0.1640533122  0.4413043604  0.3010135485 #>  [261]  0.3704603950 -0.8394334364 -0.6220268896 -0.4143834120  0.1365931674 #>  [266]  1.2044215992  1.6966682767  1.2004849980  0.4548024585  0.1133224684 #>  [271]  0.9329636827  1.4335290516  0.8898684162 -0.7143760723 -0.4031218294 #>  [276] -0.7751446106 -0.3834026822 -0.7752646808  0.1547625147 -0.4468801877 #>  [281] -0.5965199608 -1.5223034576 -0.6272994566  0.5498700096  1.7741208157 #>  [286]  1.8639997360  1.1806197824  0.3985028148  0.4295185219  0.4092917165 #>  [291] -0.6884269298 -0.3921012978  0.6609785536  0.3837128691 -0.3478292229 #>  [296]  0.5952521392  0.6816171617 -0.1722072113 -0.3637943581  0.6823745792 #>  [301]  0.4860321553  0.2947964170  0.2396173200  0.4130966084  0.1281940842 #>  [306]  0.2144017883 -0.0793129066 -0.4089237174 -1.0985114414 -1.0005414568 #>  [311] -0.2043619264  0.3749396335  0.1653092142 -0.8970289435 -1.5609371272 #>  [316] -1.2557135417  0.5221291858  0.9849253861  0.1818433749 -0.9218851086 #>  [321] -0.7943178308  0.6130465966  0.9073027518 -0.4105863516 -1.2486488428 #>  [326]  0.3332260430  0.6569821183  0.2721848484 -0.4429037571  0.1854804314 #>  [331] -0.7506650797 -0.4805274859 -0.4422565176  0.7163265828  0.7312201310 #>  [336]  1.1605726888  1.5891381231  1.0293381478  0.1732874681 -0.7586771114 #>  [341] -1.0303221547 -0.6409350871 -0.3374656851 -0.6478954658  0.2075856912 #>  [346]  1.8116211041  1.4192979966 -0.2717303218 -0.6646505154 -0.6685259874 #>  [351] -0.8160105867 -0.2445307559  0.8920884080  0.9155033724  1.6629495893 #>  [356]  2.0418647833  1.3070098458  0.0865465305 -0.1648075675  0.2571503521 #>  [361] -0.5210606629 -0.1431650258  0.1298234732  0.0574330983 -1.0711754551 #>  [366] -1.1345048914 -0.9334969679 -0.3408259753  0.0672920353  0.8795845673 #>  [371]  0.6564343490  0.4384230092 -0.2901652148 -0.8783035440 -0.2553639943 #>  [376] -0.2713342146 -0.4213013703 -0.7554903249  0.7771661228  1.1094906435 #>  [381]  0.7972212291 -0.1792917087 -0.5993618177 -0.4944212827 -0.2962555959 #>  [386] -0.5020444307 -0.6985411367 -0.1954849605  0.2564477777  0.1366914568 #>  [391]  0.1250997732 -0.4210451561 -0.3280376662 -0.3734698968  0.6413846880 #>  [396]  1.0455859926  1.5890725736  1.2563267080  0.8589282095  0.1129392814 #>  [401] -0.1462133756 -0.4782072025 -0.7139090131 -0.7195549134 -0.5183528167 #>  [406]  0.3679866745  0.5602675808  0.8485826633  0.3988130885 -0.2683479850 #>  [411] -0.3799057018  0.1929708670  0.4010793093 -0.5965393250 -0.0346147752 #>  [416]  0.4696994009  0.2001733320 -0.0563129116 -0.0896864789  0.2981254769 #>  [421]  0.5897539060  1.4080045822  0.2076267691 -0.3023967367  0.2080859276 #>  [426]  0.6223445091 -0.5496498500 -1.0503277691 -0.1169929165  0.5171374645 #>  [431]  0.7131655689  0.8218227455  1.5133172168  0.5474934412 -0.4468671791 #>  [436] -1.3809357978 -0.6076693840  0.0635117515  1.5122529862  1.0789620323 #>  [441] -0.3911117967 -1.1473358477 -0.9939684307 -0.6154611298 -0.1549173028 #>  [446]  0.9611676208  1.0007248982  0.4467583271 -0.0518288909  0.2755063380 #>  [451] -0.3606226745 -0.5074142292  0.1036969105  1.4128063325  0.8212324860 #>  [456]  0.4097508941 -0.4400251736  0.0351333033 -0.0764585172 -0.2778170335 #>  [461] -0.7148686658 -0.4337983062 -0.5127977671 -0.0885149627  0.1874797490 #>  [466]  0.5789806725  0.1110780440  0.6692973334  0.4790377022  0.3724439157 #>  [471] -0.7960716793 -0.2815836883 -0.1688051925 -0.1311855349 -0.1348925647 #>  [476]  0.3210128122 -0.8133838827 -2.1736436957 -1.8872104630 -1.0009249758 #>  [481] -0.1489179419 -0.4366621678 -0.2249146817 -0.2572778559  0.1452093932 #>  [486] -0.0170271396  0.4784074697  0.9635126428  0.8911204552 -0.0603998159 #>  [491] -0.5982815322  0.1034756825  0.1227234511  0.2449401720 -0.4105621931 #>  [496]  0.4265888783  0.1682060435 -0.0667735214 -0.7163588826 -0.1387109351 #>  [501]  1.0940140180  0.7120410452  0.6548374185  0.8731021274  0.4262939585 #>  [506] -0.2637200907 -0.8043313042  0.3058765325  0.4700085864  0.4634001223 #>  [511] -0.1032155398  0.2930360336  0.3293561794 -0.0850549342 -0.0429230233 #>  [516] -0.0766053167 -0.1461477073 -0.3835178813  0.9907767841  0.1813059286 #>  [521] -0.5682844993 -0.9697309058  0.2727555695  0.4591402179 -0.2265776394 #>  [526] -0.2202725786 -0.7015786544  0.3236656360  0.1432892476 -0.1423780627 #>  [531] -0.6482759303 -0.4461871817 -0.5496301655 -0.0673248213  1.8407454301 #>  [536]  1.2027253055  0.2466607405 -0.2556315058 -0.3822889223 -1.1488396332 #>  [541] -1.1527652913 -0.4283996917 -0.3836666980 -0.0953102775  0.8147943665 #>  [546]  1.3879761679  0.6909190508 -0.3743409684 -1.2890570708 -1.2540429664 #>  [551] -1.8914613448 -1.0384261124 -0.8528663772  0.0894134757 -0.1698938888 #>  [556]  0.1225596068  0.4405948218  0.2170523426 -0.0002493185 -0.3251598320 #>  [561]  1.0580978781  1.6639438277  0.6613891621 -1.0810178100 -0.7358831649 #>  [566]  0.0095775027  0.2053359983  0.1417867313  0.0744699195 -0.6729347775 #>  [571] -0.4676023829 -0.6151719099  0.0851996415  0.2803428964 -0.1836930046 #>  [576] -1.2354549229 -1.0738194976 -0.2022160379 -0.3761236350 -0.6375766827 #>  [581]  0.0385808243  1.0225466812  1.4732689165 -0.3441361093 -0.7712179297 #>  [586] -0.8949395958 -0.3019393120 -0.1615712336  0.6161296709  1.1379284585 #>  [591]  0.4380052501  1.0227300480  1.3981647929  1.4424253926  0.1327391370 #>  [596]  0.4743259218  0.6839880218  0.5271117430  0.0607632202  0.5047687463 #>  [601]  0.3120656688 -0.2090319557 -0.7889015762 -0.5173675323 -0.2145075398 #>  [606]  0.1998291394  0.6800401317  0.5919781994  0.0725577874 -0.2466571988 #>  [611]  0.2392216743  0.1159338765  0.2114210221 -0.5067428464 -0.6119303149 #>  [616] -0.8063887522 -0.0952322416  0.0112446031  0.1994892588 -0.8049772243 #>  [621] -0.8613597867 -0.8314347514 -0.9844449745 -1.1884398372 -0.5953806266 #>  [626] -0.0990568683 -0.0791633267  0.5443707206  0.8205971605  0.4677384924 #>  [631]  0.4459309014  0.4895663550  0.4304038776 -0.6746273680 -0.6093086140 #>  [636]  0.7296546293  1.4109977618  1.1730681993  0.0712137845  0.4020744849 #>  [641]  0.7171333271  0.2526945594 -0.2467943103 -0.9345885773  0.0721240391 #>  [646] -0.1025008036  0.8263416956  0.3715963160  0.7076971342 -0.2329642792 #>  [651] -0.2232051399 -0.3379256247 -0.5581037904 -1.3070603245 -0.6221805502 #>  [656]  0.6792040463 -0.0045246216 -0.3688778388  0.0929599792  1.0760451323 #>  [661]  0.2148435348 -0.4834333752 -0.6658952313 -0.1232969638 -0.0325567663 #>  [666] -1.1286690445 -1.3338221580 -0.0897995859  0.6788331943  0.2848852087 #>  [671] -0.9215779129  0.3249627189  0.5612988386  0.8776394209  0.7979058948 #>  [676]  1.2364078376  0.2341904640 -0.6257519357  0.0516109099 -0.1957379786 #>  [681]  0.3297471567 -0.3472181920 -0.0782769224  0.2361399406  1.1191579100 #>  [686]  0.2153815614  0.5918346315  1.5325253992  1.2274235957 -0.8786354436 #>  [691] -1.2813779260 -0.4356628098 -0.2314152791 -0.4213636057 -0.1017141045 #>  [696]  1.4256544475  1.2319913490  0.8503310084 -0.7811546013 -1.6305911219 #>  [701] -1.6084945266  0.0228167395  0.1370778502 -0.5920421858  0.0527844199 #>  [706]  0.8937983137  1.1925974178  0.9022291157  0.9471893612  0.2357036064 #>  [711]  0.7642223289  0.7446212549  0.1790862191 -0.8283179351 -0.6288001792 #>  [716] -0.6313752472 -0.5702597378 -0.4428113032 -0.2914861436  1.3283783228 #>  [721]  1.8534604800  1.9522021007  0.2260043809  0.5206886159  0.5514375640 #>  [726]  0.2817823779  0.1815576268  0.3279697352  0.6367723722  0.0266140658 #>  [731]  0.4978911482  0.0589005756 -0.5045066131 -1.2464617747 -1.0211876697 #>  [736] -0.8721098369 -0.7019422753 -1.0410889142 -0.5394304410  0.5918040320 #>  [741]  0.9593313479  0.4314142071 -0.3780552489 -0.7295640098 -1.0763911932 #>  [746] -0.9936040773 -0.9489300550 -0.7666017583 -1.2288353705 -1.3609205790 #>  [751] -0.3691460062  1.0823742296  0.5098097729 -1.0803783071 -1.0673784508 #>  [756] -0.5261403953  0.1218275505 -0.1707162186 -0.5225083415 -0.8663550458 #>  [761] -0.1194708239 -0.1983409535 -1.3544234090 -1.4666146120 -0.1925372413 #>  [766]  0.6210768870  0.6072624124  0.0330635256  0.2358219672  0.1528206845 #>  [771] -0.0856298490  0.0019335431  0.0543314612  0.0331870468  0.0581157146 #>  [776]  1.0597292178  0.7791878171  0.3133669700 -0.6436626446 -0.6493323933 #>  [781] -0.0681539831 -0.3117601236 -1.3545545393  0.1651844980  1.4697819910 #>  [786]  1.8142225902  0.0435443151  0.3167756450 -0.5351856037  0.4864219705 #>  [791]  0.5951488671  0.6637803919 -0.7479751425 -1.6630436693 -1.3549783103 #>  [796]  0.4048948898  0.7718675666  0.5704708979 -0.0037029162  0.5540260717 #>  [801]  0.4417506319 -0.0528140500 -0.3653653446 -1.0041231208 -0.8573350841 #>  [806] -1.3306931113 -0.3415158595 -0.2600451654  0.1458133020  0.0601042267 #>  [811]  0.7340448510  0.8798681795  1.2288866267  0.8600944386  0.2186972510 #>  [816] -0.0869174263  0.1695271019  0.1762026734  0.0578743883  0.5644946872 #>  [821]  1.2364131442  0.6451148373  0.0532051493 -1.2362062673 -1.1476784342 #>  [826] -0.7993104095  0.1455080179  0.7573634385  1.1009635081  1.3816619460 #>  [831]  1.0411937791  0.6141910129 -0.2388978194 -0.6798461506 -1.1056120568 #>  [836] -1.5678913307 -0.6258421208 -0.3306835442 -0.7515867105 -0.9301877332 #>  [841] -0.4341755311  0.0294631144  0.4147738775  0.5470312909 -0.4489942339 #>  [846] -0.6594499602 -0.3348367392  0.0398694322  0.2909301237  0.8300777053 #>  [851]  1.7588298120  1.9476851898  1.0408703478  0.0349639998 -0.7619777706 #>  [856] -0.3930729248 -0.2141339113 -0.1392457233 -1.0157271686 -0.9058563564 #>  [861] -0.2074459782 -0.2330839367  0.0520219137 -0.1070867935  0.1835310395 #>  [866]  0.0332054382  0.7510338132  0.5735014636 -0.1375033084 -0.1781639274 #>  [871] -0.5042457541  0.2759625547  0.4098589834  0.4841336036 -1.0592379652 #>  [876] -0.6427361164  0.0597723146  1.1084508121  0.9058402212  0.7579076890 #>  [881]  0.7920876255  1.1309926048 -0.0541548033 -0.7333911899 -0.1648317785 #>  [886]  0.4111667837 -0.2338731868 -0.4517786404 -0.1238007648  0.6264299548 #>  [891]  0.6657766890  0.6819697876 -0.3802013218 -0.7298675807 -0.1502018567 #>  [896]  0.9864288531  0.1005085762  0.1101360216 -0.6223289158  0.2445080748 #>  [901] -0.0535517843  0.7456387892  0.3642912832  0.8080755959  0.7893447095 #>  [906]  0.5820695637  0.1594931438  0.3598359166  0.7749750914  0.9126753178 #>  [911]  0.1757616430  0.2842293379  0.2577028591  0.3842218007  1.0205909290 #>  [916]  0.2249944301 -0.5547280862  0.0582866181  2.1709660326  2.2787382099 #>  [921]  1.1644650843 -0.2557723312 -0.5659945450  0.0203215758  0.1742232169 #>  [926]  0.1341120138 -0.4403031159 -0.7754336899 -0.2176617452  0.6132373408 #>  [931]  0.0483176206 -0.3397389607  0.0300110990 -0.0420114686 -0.9219362282 #>  [936] -1.0708424835 -0.4270012533  0.1086457617  1.3295016949  1.0492693510 #>  [941]  0.9139372190 -0.0797353276  0.5591507060 -1.1100584087 -1.3991816906 #>  [946] -1.2035430360  0.3259719345 -0.1949178190 -0.2762775278 -1.1359988622 #>  [951] -1.6367745775 -1.3539556439 -0.2797079363  0.1703679497 -0.7128693270 #>  [956] -1.2738132394 -1.4964135016 -0.5197402398 -0.2257987250 -0.4101893750 #>  [961] -0.3171739419 -0.9530522248 -1.2744137552 -1.3905091147  0.3214924110 #>  [966]  0.7812785854 -0.1176406653 -0.4526054984 -0.9245615410 -0.4403661421 #>  [971] -1.0381380212  0.2936401433 -0.2696150199  0.3604603637  0.4344374441 #>  [976]  1.0139003230  0.0953041896 -0.3198370312 -0.0251807335 -0.8769847372 #>  [981] -0.9319758965 -1.1575955797  0.0001175563 -0.4231001354  0.5107635511 #>  [986]  0.6493051243  0.4664615049 -0.3731506836  0.5511451261  1.5204128870 #>  [991] -0.1137948577 -1.1967835726 -1.2950729379  0.0802180941  0.4623698201 #>  [996]  1.0676371695 -0.1472424356  0.1121989070  0.7975442855  0.6271788786"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts inputs to matrix — input_to_matrix","title":"Converts inputs to matrix — input_to_matrix","text":"Converts inputs (vector, matrix, data.frame/tibble)  matrix preserving number columns","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(x)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts inputs to matrix — input_to_matrix","text":"x vector, matrix, data.frame/tibble","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts inputs to matrix — input_to_matrix","text":"matrix","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(1:5) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 #> [5,]    5"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Extract saccades using algorithm proposed Engbert Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"method_ek(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Method options, please refer Engbert Kliegl (2003) details parameters rationale default values. ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults 6. ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator, per formula #2 Engbert Kliegl (2003). Can replaced mad, sd, etc. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults 12. ek_minimal_separation_ms minimal required time gap saccades. Defaults 12.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Extract saccades using algorithm proposed Nyström Holmqvist (2010) doi:10.3758/BRM.42.1.188 .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"method_nh(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze y coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details  information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2. nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Extract saccades using algorithm proposed Otero-Millan et al. (2014) doi:10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"method_om(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Method options, please refer Otero-Millan et al. (2014) details parameters rationale default values. om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults 30. om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults 5. om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s.  Defaults 3. om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults 0.05.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"A monocular multi-trial recording — monocular_ten_trials","title":"A monocular multi-trial recording — monocular_ten_trials","text":"monocular recording, 10 trials, sampling rate 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A monocular multi-trial recording — monocular_ten_trials","text":"","code":"monocular_ten_trials"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A monocular multi-trial recording — monocular_ten_trials","text":"data frame 14353 rows 4 variables: trial Trial index. x X coordinate degrees visual angle. y Y coordinate degrees visual angle. time Sample time milliseconds.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract value for a named list or use default if key is missing — option_or_default","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Extract value named list use default key missing","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(options, key, default)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"options Named list key String key default Default value returned, key missing.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Value list default value","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(list(\"A\" = 25), \"A\", 20) #> [1] 25 option_or_default(list(\"A\" = 25), \"B\", 20) #> [1] 20"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/saccadr.html","id":null,"dir":"Reference","previous_headings":"","what":"saccadr — saccadr","title":"saccadr — saccadr","text":"Extract (Micro)Saccades Gaze Samples.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard deviation via median estimator. — sd_via_median_estimator","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"Compute standard deviation via median estimator. Please refer formula #2 Engbert & Kliegl (2003). Falls back mean estimator, computed standard deviation smaller .Machine$double.eps. Raises error results using mean estimator still smaller .Machine$double.eps.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(x, na.rm = FALSE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"x Numeric values na.rm Whether exclude NA values, defaults FALSE.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(rnorm(100)) #> [1] 0.5747993"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial monocular samples recorded at 500 Hz. — single_trial","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"single trial monocular samples recorded 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"","code":"single_trial"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"data frame 1006 rows 2 variables: x X coordinate degrees visual angle. y Y coordinate degrees visual angle.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial binocular recording. — single_trial_binocular","title":"A single trial binocular recording. — single_trial_binocular","text":"single trial binocular recording sampled 1000 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial binocular recording. — single_trial_binocular","text":"","code":"single_trial_binocular"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial binocular recording. — single_trial_binocular","text":"data frame 2000 rows 6 variables: trial Trial index. time_rel Sample time milliseconds relative trial start. xL X coordinate left eye degrees visual angle. xR X coordinate right eye degrees visual angle. yL Y coordinate left eye degrees visual angle. yR Y coordinate right eye degrees visual angle.","code":""}]
