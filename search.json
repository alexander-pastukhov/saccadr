[{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Engbert and Kliegl (2003)","title":"Implemented Methods","text":"algorithm labels sample saccade velocity, measured units standard deviation (see ), exceeds predefined threshold (defaults \\(6\\)) duration super-threshold period exceeds minimal duration (defaults \\(12\\) milliseconds). method makes assumptions velocity units degrees per second can used data (e.g., samples encode gaze screen position units). standard deviation computed following formula #2 Engbert Kliegl (2003) However, value smaller .Machine$double.eps, recomputed via mean estimator monocular version algorithm implemented binocular saccades computed using overlapping votes two eyes. method details rationale default parameter values refer Engbert Kliegl (2003). Parameters: ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults \\(6\\). ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator() implements formula #2 Engbert Kliegl (2003). Can replaced sd(), mad(), custom function. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults \\(12\\). ek_minimal_separation_ms minimal required time gap saccades. Defaults \\(12\\).","code":"sqrt(median(x^2) - median(x)^2) sqrt(mean(x^2) - mean(x)^2)"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"otero-millan2014","dir":"Articles","previous_headings":"","what":"Otero-Millan et al. (2014)","title":"Implemented Methods","text":"algorithm: Detect local velocity peaks. Filter based minimal inter-peak interval (defaults \\(30\\) ms) maximal allowed saccade rate (defaults \\(5\\) Hz). Identify onset offset potential saccade using absolute velocity threshold degrees per second (defaults \\(3\\)). Compute peak velocity peak acceleration peak velocity reached. Rotate velocity peak acceleration via PCA retain components predefined threshold explained variance (defaults \\(0.05\\)). Perform cluster analysis remaining components \\(2\\), \\(3\\), \\(4\\) picking solution smallest silhouette. Saccades identified cluster highest average peak velocity. method details rationale default parameter values refer Otero-Millan et al. (2014). Parameters: om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults \\(30\\) om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults \\(5\\). om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s. Defaults \\(3\\). om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults \\(0.05\\).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Nyström and Holmqvist (2010)","title":"Implemented Methods","text":"algorithm: Identify physiologically implausible velocity acceleration peaks (defaults \\(1000 \\deg/s\\) \\(100000 \\deg/s^2\\)). Identify noise onset/offset samples around implausible velocity/acceleration median velocity. Exclude samples analysis. Identify velocity threshold \\(PT = mean(V_{subthreshold}) + 6 \\cdot std(V_{subthreshold})\\) via iterative method starting arbitrary \\(PT\\) value (defaults \\(100 \\deg/s\\)). Stop threshold change \\(1 \\deg/s\\). Identify saccades periods peaks peaks threshold \\(PT\\) adjacent samples \\(PT_{onset/offset} = mean(V_{subthreshold}) + 3 \\cdot std(V_{subthreshold})\\). method details rationale default parameter values refer Nyström Holmqvist (2010). Parameters: nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/using_custom_methods.html","id":"example-implementation","dir":"Articles","previous_headings":"","what":"Example implementation","title":"Using Custom Methods","text":"example implementation overly simple custom method labels sample saccade velocity exceeds predefined threshold. expects threshold parameter \"st_velocity_threshold\" member list uses default threshold \\(50 \\deg / s\\) (arbitrary number!) threshold provided. implemented method, can pass alongside internally implemented methods:","code":"simple_threshold_method <- function(x,                                     y,                                     vel,                                     acc,                                     sample_rate,                                     trial,                                     options) {    # obtain method parameters or use defaults   velocity_threshold <- saccadr::option_or_default(options, \"st_velocity_threshold\", 50)    # vote on each sample     sample_vote <- vel[['amp']] > velocity_threshold      # return votes   sample_vote } data(\"single_trial\") saccades <- saccadr::extract_saccades(x = single_trial$x,                                       y = single_trial$y,                                       sample_rate = 500,                                       methods = list(\"ek\", \"om\", \"nh\", simple_threshold_method),                                       options = list(\"st_velocity_threshold\" = 70))"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Differentiation following Engbert and Kliegl (2003)","title":"Velocity computation","text":"method computes velocity predefined time window controlled via ek_velocity_time_window defaults 20 ms. width window converted samples based sampling_rate parameter ensured odd number equal larger 3. .e., window three samples long, velocity computed based one sample one sample current, five-samples window - two samples , etc. code always starts requested window size iteratively reduces two samples accommodate trial limits missing values. NA velocity returned even smallest window (three samples wide) used. general, horizontal vertical velocity components computed \\[v_x[] = \\frac{\\sum_{j=1}^{(N-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(N-1)/2}2j\\cdot\\Delta t}\\] \\(\\) index sample, \\(\\Delta t = \\frac{1}{sample~rate}\\) duration single sampling frame, \\(N\\) odd integer width moving average used compute velocity. Engbert Kliegl (2003), \\(N=5\\) \\(\\Delta t = 4\\) (250 Hz sampling rate) translate 20 ms moving average window (default value used method implementation). derivation shows equivalence formula formula 1 Engbert Kliegl (2003). \\(N=5\\): \\[\\frac{\\sum_{j=1}^{(5-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(5-1)/2}2j\\cdot\\Delta t}=\\] \\[\\frac{\\sum_{j=1}^{2}x[+j] - x[-j]}{\\sum_{j=1}^{2}2j\\cdot\\Delta t}=\\] \\[\\frac{x[+1] - x[-1]+x[+2] - x[-2]}{2\\Delta t + 4\\Delta t}=\\] \\[\\frac{x[+2] + x[+1] - x[-1] - x[-2]}{6\\Delta t}\\]","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Differentiation following Nyström and Holmqvist (2010)","title":"Velocity computation","text":"Horizontal vertical components velocity computed adjacent samples, amplitude computed components filtered using Savitzky-Golay filter. Filter order controlled via nh_sg_filter_order option defaults 2.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"comparing-two-methods","dir":"Articles","previous_headings":"","what":"Comparing two methods","title":"Velocity computation","text":"two methods produce comparable different velocity values. However, minor effect saccade detection, see vignette Using sample votes.","code":"# computing velocity using two methods vel_ek <- saccadr::diff_ek(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_nh <- saccadr::diff_nh(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_comparison <- na.omit(data.frame(EK = vel_ek[['amp']], NH = vel_nh[['amp']])) %>%   dplyr::filter(NH > 0) %>% # values can be negative due to filtering   dplyr::mutate(logEK = log(EK), logNH = log(NH))   # plotting amplitude comparison pearson_rho <- cor(vel_comparison[['EK']], vel_comparison[['NH']])  ggplot(data = vel_comparison, aes(x = EK, y = NH)) +   geom_abline() +   geom_point() +   scale_x_log10() +   scale_y_log10() +   labs(subtitle = sprintf(\"Pearson's ρ = %.2f\\nPearson's ρ for log transformed velocities = %.2f\", pearson_rho, cor(vel_comparison[['logEK']], vel_comparison[['logNH']])),        x = \"Vek\",        y = \"Vnh\") # plotting  ggplot(data = NULL, aes(x = vel_comparison[['EK']] - vel_comparison[['NH']])) +   geom_histogram(bins = 50) +   xlab(\"Vek - Vnh\") +   labs(title = \"Difference in velocities computed via two methods\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"implementing-and-using-a-custom-differentiation-function","dir":"Articles","previous_headings":"","what":"Implementing and using a custom differentiation function","title":"Velocity computation","text":"custom function follows Arguments passed function (vectors length): x, y vectors values, either x y gaze coordinates velocity components (acceleration). sample_rate scalar value Hz. trial vector trial index per sample. options named list method-specific options. See example use . See also option_or_default() function. function must return data.frame three columns: x (horizontal component), y (vertical component), amp (amplitude). example simple velocity function respects trial borders similar function uses optional custom_velocity_lag parameter can different 1","code":"diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # compute vertical and horizontal components   df <- data.frame(x = ..., # differentiate values of x                     y = ...) # differentiate values of y      # compute amplitude   df[['amp']] = sqrt(df[['x']]^2 + df[['y']]^2))    # return a data.frame with columns x, y, and amp   return(df) } library(dplyr)  diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x)) / delta_t_s,            y = (y - lag(y)) / delta_t_s,            amp = sqrt(x^2 + y^2)) } diff_lag_n <- function(x, y,  trial, sample_rate, options=NULL) {   # obtain lag or use default   lag_n <- saccadr::option_or_default(options, \"custom_velocity_lag\", 1)      # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x, lag_n)) / delta_t_s,            y = (y - lag(y, lag_n)) / delta_t_s,            amp = sqrt(x^2 + y^2)) }"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). saccadr: Extract Saccades via Ensemble Methods Approach. https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/.","code":"@Manual{,   title = {saccadr: Extract Saccades via an Ensemble of Methods Approach},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/}, }"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccadr","dir":"","previous_headings":"","what":"Extract Saccades via an Ensemble of Methods Approach","title":"Extract Saccades via an Ensemble of Methods Approach","text":"saccadr modular extendable R package extract (micro)saccades gaze samples via ensemble methods approach. Although agreement general definition saccade, specific details harder agree upon. Therefore, numerous algorithms extract saccades based various heuristics, differ assumptions velocity, acceleration, etc. package uses methods label individual samples applies majority vote approach identify saccades. package includes three methods (see Implemented Methods vignette) can extended via custom methods (see Using custom methods vignette). also uses modular approach compute velocity acceleration noisy samples (see Velocity computation vignette). Finally, can obtain methods votes per gaze sample instead saccades (see Using sample votes vignette). extract_saccades() function uses several methods label individual samples belonging saccade, classifies sample potential saccade proportion votes exceeds preset threshold, identifies saccades based minimal saccade duration minimal time saccades. binocular data, 1) samples can averaged velocity computation, 2) votes can merged function returns binocular saccades, 3) saccades extracted eye separately. Currently, library implements saccade detection using following saccade detection methods. using package, please cite package individual methods. method_ek : Engbert, R., & Kliegl, R. (2003). Microsaccades uncover orientation covert attention. Vision Research, 43(9), 1035–1045. https://doi.org/10.1016/S0042-6989(03)00084-1 method_om : Otero-Millan, J., Castro, J. L. ., Macknik, S. L., & Martinez-Conde, S. (2014). Unsupervised clustering method detect microsaccades. Journal Vision, 14(2), 18–18. https://doi.org/10.1167/14.2.18 method_nh : Nyström, M., & Holmqvist, K. (2010). adaptive algorithm fixation, saccade, glissade detection eye tracking data. Behavior Research Methods, 42(1), 188–204. https://doi.org/10.3758/BRM.42.1.188","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Saccades via an Ensemble of Methods Approach","text":"install github","code":"library(\"devtools\") install_github(\"alexander-pastukhov/saccadr\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Saccades via an Ensemble of Methods Approach","text":"main function extract_saccades(). Minimally, takes x y gaze samples, sampling rate returning table extracted saccades. Note function expects units gaze samples degrees visual angle, methods use physiologically plausible velocity acceleration thresholds.","code":"data(\"single_trial\") saccades <- extract_saccades(single_trial$x, single_trial$y, sample_rate = 500)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"multiple-trials","dir":"","previous_headings":"Usage","what":"Multiple trials","title":"Extract Saccades via an Ensemble of Methods Approach","text":"recording spans multiple trials, need specify via trial parameter. way velocity computation saccade detection methods respect trial boundaries.","code":"data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"binocular-data","dir":"","previous_headings":"Usage","what":"Binocular data","title":"Extract Saccades via an Ensemble of Methods Approach","text":"three ways binocular data can treated based value binocular parameter: binocular = \"merge\" (default): sample votes obtained eyes methods averaged. way binocular saccades (.e., eye movements sufficient temporal overlap eyes) detected. Eye = \"Binocular\" saccade description. binocular = \"cyclopean\": binocular data converted average cyclopean image voting saccades detection. Eye = \"Cyclopean\" saccade description. binocular = \"monocular\": saccades extracted independently eye. Eye = \"Left\" Eye = \"Right\" saccade description.","code":"data(\"single_trial_binocular\") # binocular saccades only saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000)  # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"cyclopean\")  # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"monocular\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-methods","dir":"","previous_headings":"Usage","what":"Specifying methods","title":"Extract Saccades via an Ensemble of Methods Approach","text":"default, implemented methods used saccade detection , necessary, can use subset even single method. Note can also supply saccade detection function, please see Using custom methods vignette. Parameters individual methods passed via options argument, named list <parameter-name> = <value> pairs. can find information specific parameters default values Implemented Methods vignette. example modifying velocity threshold, measured units standard deviation, Engbert & Kliegl (2003) method. default value 6 can make stricter","code":"# Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = list(method_ek, method_om)) saccades <- extract_saccades(single_trial$x, single_trial$y, 500, options = list(\"ek_velocity_threshold\" = 8))"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"altering-voting-threshold","dir":"","previous_headings":"Usage","what":"Altering voting threshold","title":"Extract Saccades via an Ensemble of Methods Approach","text":"voting threshold number methods must label sample potential saccade. default, one method must agree sample considered saccade (vote_threshold = length(methods) - 1) 1, single method passed function. can make voting less restrictive via vote_threshold parameter.","code":"# A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-velocity-computation-method","dir":"","previous_headings":"Usage","what":"Specifying velocity computation method","title":"Extract Saccades via an Ensemble of Methods Approach","text":"gaze samples tend noisy, different methods use various approaches computing velocity noisy samples. Methods Engbert & Kliegl (2003) Otero-Millan et al. (2014) used approach based averaging multiple samples compute velocity, whereas Nyström & Holmqvist (2010) compute simple derivative filter . default, package uses former approach (velocity_function = diff_ek) can also use latter (velocity_function = diff_nh) implement custom method (see Velocity computation vignette). Acceleration computed way velocity samples. example using Nyström & Holmqvist (2010) velocity computation","code":"saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-saccade-temporal-properties","dir":"","previous_headings":"Usage","what":"Specifying saccade temporal properties","title":"Extract Saccades via an Ensemble of Methods Approach","text":"votes , saccades detection based minimal duration (minimal_duration_ms parameter, defaults 12 ms) minimal time saccades (minimal_separation_ms, defaults 12 ms).","code":"# Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccade-description-table","dir":"","previous_headings":"Return values","what":"Saccade description table","title":"Extract Saccades via an Ensemble of Methods Approach","text":"extract_saccades() function returns table following columns: Trial Trial index. Eye “Monocular” monocular inputs. “Cyclopean” binocular data averaged applying algorithms. “Binocular” binocular data votes averaged applying algorithms. “Left” “Right” binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"sample-votes","dir":"","previous_headings":"Return values","what":"Sample votes","title":"Extract Saccades via an Ensemble of Methods Approach","text":"Alternatively, use parameter return_votes = TRUE function can return votes per sample method (eye, binocular data). Please see Using sample votes vignette details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Compute velocity via Engbert & Kliegl (2003) algorithm. See formula #1 manuscript.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"","code":"compute_velocity_ek(x, trial, time_window_in_samples, delta_t)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"x Vector coordinates trial Vector trial labels, velocity computed within trials. time_window_in_samples Width window velocity computation samples. delta_t Duration single frame (1 / sampling rate).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Velocity vector","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Differentiate x y compute change amplitude via algorithm proposed Engbert & Kliegl (2003)","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Method options, please refer Engbert & Kliegl (2003) details parameters rationale default values. ek_velocity_time_window Time window velocity computation milliseconds. Defaults 20 ms.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"ek_velocity_time_window\" = 20)) #>                x             y        amp #> 1             NA            NA         NA #> 2    106.7516174   91.94919586 140.892024 #> 3     53.3004799   18.61266136  56.456818 #> 4    109.1394119   10.67230988 109.659972 #> 5    105.9767227   51.76063156 117.941633 #> 6     25.6791229  129.72520447 132.242376 #> 7   -155.8343811    9.72913647 156.137793 #> 8   -180.6348724 -171.37490845 248.994611 #> 9    127.6012039 -126.55084229 179.714170 #> 10   236.2662201  -13.81827831 236.669963 #> 11   112.6465759   65.20629120 130.158025 #> 12   -69.2707825   36.97498703  78.521277 #> 13  -156.7835693   13.31303120 157.347782 #> 14   -79.8174973   20.88633347  82.504980 #> 15  -149.4924164   66.45052338 163.596010 #> 16   -58.9960403  115.30646515 129.522638 #> 17    62.6837006   46.31139374  77.935817 #> 18   154.9259644  -26.97948647 157.257582 #> 19   142.0158691  -57.86450577 153.351909 #> 20    21.1152859   61.13862610  64.682199 #> 21   -47.7940292   43.76888275  64.807286 #> 22   -57.7906609 -102.71272278 117.854418 #> 23    39.0038986 -133.93426514 139.497998 #> 24   -27.6583176 -180.80284119 182.906123 #> 25   -45.4522514 -105.55448151 114.924565 #> 26    -9.3410063 -103.32279205 103.744175 #> 27    35.7686234   66.39331818  75.415298 #> 28    29.5135136  319.32540894 320.686396 #> 29   -64.7138977  279.02752686 286.433673 #> 30   -25.1183453  112.30078125 115.075613 #> 31   -12.6419039  -46.95597839  48.627992 #> 32    43.6694870  -87.32222748  97.632963 #> 33    92.0733337 -128.67953491 158.227436 #> 34   101.2466507 -132.97612000 167.133278 #> 35    40.4890480  -17.28809547  44.025461 #> 36   -88.3164825   65.64364624 110.040399 #> 37   -74.6542435    6.82351875  74.965435 #> 38   -94.7940903 -134.09165955 164.214776 #> 39   -73.7760468 -172.19802856 187.336772 #> 40  -105.8735428  -75.57508087 130.079975 #> 41   -24.7069416   40.70814514  47.619177 #> 42    98.8846283  150.81417847 180.341582 #> 43   113.0360260  182.19302368 214.409517 #> 44    76.7205811  148.93452454 167.533699 #> 45    95.4782562   61.16926575 113.392136 #> 46   190.5465698  -67.82389832 202.257451 #> 47    94.4112701 -142.22612000 170.709570 #> 48   -70.3674545  -78.98133087 105.781044 #> 49  -107.6598129  -19.99911690 109.501598 #> 50   -61.6820183  -25.83128166  66.872464 #> 51   -89.1706314   87.66160583 125.043827 #> 52  -138.7463989   49.24409103 147.226165 #> 53   -75.9893570   53.39793777  92.874766 #> 54   124.3157806  -27.46423531 127.313383 #> 55   158.0284882  -78.59442902 176.493873 #> 56    67.0959625   45.36847305  80.994855 #> 57   -33.6729393   85.06634521  91.488523 #> 58   -30.6555386   98.64482880 103.298423 #> 59     3.6978617   -5.80703354   6.884462 #> 60   -73.5140762 -122.16608429 142.579352 #> 61  -161.3286896  -71.56325531 176.488656 #> 62  -105.9239426   54.28927612 119.026077 #> 63   116.3796997    1.17513013 116.385632 #> 64   196.0454712 -102.82321930 221.373985 #> 65   146.9974213 -181.63169861 233.662825 #> 66    20.5162907 -122.11919403 123.830593 #> 67   -36.0090141  -10.74420071  37.577745 #> 68    48.2878418   47.21875000  67.537590 #> 69    -8.4584723   86.60034180  87.012441 #> 70   -45.1687622  111.47686005 120.280121 #> 71   -98.9624786   95.52130890 137.542330 #> 72  -101.0283432   20.03461647 102.995689 #> 73   -53.9543839   26.55123329  60.133547 #> 74   -83.4858627   44.85530090  94.772819 #> 75     0.9832157   22.42127037  22.442818 #> 76    53.1224785   -8.63454533  53.819635 #> 77    31.5943565  -17.58770943  36.159797 #> 78    32.9135666  -16.19085884  36.680332 #> 79    37.7306747 -140.49708557 145.475204 #> 80    39.4178963 -130.96089172 136.764490 #> 81   -68.6016541   -8.74560738  69.156869 #> 82   -74.4640808   94.90097809 120.627920 #> 83    35.5141220  130.24406433 134.999145 #> 84    66.1794510   42.97882462  78.910703 #> 85    11.8221369    4.19083786  12.542968 #> 86  -156.1737213  -71.94383240 171.948092 #> 87  -102.5512619  -51.14920044 114.599311 #> 88    26.7806892  -68.04792786  73.128146 #> 89   146.4012909  -17.88956261 147.490252 #> 90    76.1436615  128.16345215 149.076248 #> 91    41.8920555  192.85852051 197.355905 #> 92    39.7094727   91.04534149  99.328226 #> 93    35.3583183  -82.79096222  90.025297 #> 94   -55.8011360  -68.87567902  88.643251 #> 95   -98.4705963   28.85358810 102.610857 #> 96   -33.4966049  -13.77598286  36.218783 #> 97   -23.4417591  -49.73769760  54.985040 #> 98   129.6645355    4.75125742 129.751556 #> 99   105.1044617   35.82201004 111.041273 #> 100   44.5983391   44.66936874  63.121822 #> 101 -137.2423096  -42.21774673 143.588961 #> 102 -223.5696869  -73.24647522 235.262515 #> 103 -209.4367371  -54.67131042 216.454843 #> 104 -165.8323059  -42.08898544 171.090141 #> 105   52.7644348   -8.59825325  53.460411 #> 106  158.8261871   29.68890190 161.577191 #> 107  112.0836334  116.56409454 161.709397 #> 108  -25.3546429   60.12777328  65.254939 #> 109  -12.9484959  -31.63137436  34.179049 #> 110  164.6648865 -108.79605865 197.360349 #> 111  301.7207642   -3.39564705 301.739871 #> 112  185.5673370   25.58793831 187.323194 #> 113  -86.7533798  -25.94744682  90.550643 #> 114 -206.0993500   49.65737534 211.997163 #> 115 -167.8008575   26.91980362 169.946473 #> 116  -47.7500916   18.35102272  51.154973 #> 117   30.0256863 -145.08134460 148.155791 #> 118  101.6472473 -120.00548553 157.268813 #> 119  115.1806641   93.83470917 148.564929 #> 120   13.9916840  200.33673096 200.824732 #> 121   24.1163883   61.71409225  66.258806 #> 122  -16.0101891 -167.71490479 168.477344 #> 123  -48.4412651 -201.04394531 206.797544 #> 124  -45.2652855  -39.92045975  60.353866 #> 125  -52.8275032   12.86367607  54.371125 #> 126    3.9201360   -6.64876890   7.718393 #> 127  -74.2814255   17.09677696  76.223552 #> 128  -86.4177170   62.47554779 106.635903 #> 129   -3.8830004   66.67569733  66.788669 #> 130  130.6273193   33.52458954 134.860649 #> 131  131.4575806  -15.49845219 132.368038 #> 132  -78.7472992   17.33547974  80.632847 #> 133 -181.1015625   89.95553589 202.212201 #> 134  -51.7878227  114.31264496 125.496452 #> 135   63.1445732   50.26559448  80.708532 #> 136  -15.4595175  -60.56329727  62.505277 #> 137  -62.4559746  -50.91063309  80.576928 #> 138   40.5134392  -31.90482712  51.567982 #> 139   53.0605698   14.96632481  55.130889 #> 140  -45.1185150  -56.71774673  72.474707 #> 141 -121.9559860  -49.81000137 131.735716 #> 142  -34.4179573   57.51778030  67.029030 #> 143  121.5945206   84.48143768 148.061949 #> 144   83.1749268   87.52192688 120.740035 #> 145   19.3532238  -53.07408142  56.492525 #> 146    6.7371631 -118.86729431 119.058066 #> 147   80.9525452  -38.55754089  89.666039 #> 148   65.4746628   71.70404816  97.099959 #> 149  -14.3394022  120.24279022 121.094785 #> 150 -157.8955841   42.57195282 163.534053 #> 151  -81.2623978  -93.15425110 123.617522 #> 152   86.1249390 -125.33434296 152.073017 #> 153  214.2683868  -46.78882599 219.317432 #> 154   83.5888062  -24.61828232  87.138673 #> 155 -144.9865265   -3.49539137 145.028654 #> 156  -51.2336769  -31.73513222  60.266145 #> 157   49.3070984  -57.27791595  75.577441 #> 158  -48.8910637  -63.19224167  79.897406 #> 159 -167.7622986  -23.18695831 169.357090 #> 160  -94.1147461  106.24855804 141.937809 #> 161  102.4964371  179.87170410 207.024997 #> 162  167.2020874   81.01274109 185.794516 #> 163   42.0058479   10.41043186  43.276649 #> 164   -3.0531235   51.18743515  51.278408 #> 165 -132.3994293   67.61914062 148.667270 #> 166 -104.8819504   -5.31814051 105.016695 #> 167   37.6519699  -43.16189194  57.276695 #> 168  159.2505493   59.60020447 170.038001 #> 169  152.6464233   85.41143799 174.917250 #> 170   58.6354866   21.99556923  62.625277 #> 171   -8.3047686  -87.58186340  87.974724 #> 172    6.1410241 -155.87091064 155.991836 #> 173   36.4698524 -195.43540955 198.809078 #> 174   25.7579613 -177.51187134 179.370948 #> 175   29.8700066  -35.80469513  46.628248 #> 176  -37.0937347   80.55327606  88.683569 #> 177  -79.9486465   80.31143951 113.321284 #> 178  -61.1877937    7.24638557  61.615389 #> 179  -15.6868563   -8.56524658  17.872910 #> 180  -44.7199974   33.42424774  55.830623 #> 181 -141.3657837   36.83636093 146.086284 #> 182  -93.0175552   29.29394913  97.521285 #> 183  107.7353668    3.44865584 107.790549 #> 184  169.3327789   51.35825729 176.949882 #> 185  -63.2848320   34.33726120  72.000121 #> 186 -141.2564240  -32.82141876 145.019388 #> 187   15.2150640    3.68464994  15.654866 #> 188  149.1471558  -54.71942902 158.868153 #> 189   49.6551399  -34.56941223  60.503530 #> 190  -57.6083298   17.16276169  60.110565 #> 191  -55.4483147   51.74891281  75.845010 #> 192  -30.0340176   30.52762794  42.824973 #> 193  -50.4067688 -103.92554474 115.504810 #> 194   -3.5281148  -62.78689194  62.885940 #> 195  107.1139374   65.72154236 125.669076 #> 196   61.8185501   53.32327271  81.638867 #> 197   -1.5123576   10.41020489  10.519486 #> 198 -106.7941742  -70.98193359 128.231940 #> 199 -108.2932663  -37.56259918 114.622774 #> 200  -73.1513672   20.73993874  76.034647 #> 201  -29.5685349  -13.54574299  32.523613 #> 202   23.1793118    2.10376334  23.274585 #> 203   47.8577652   50.36844254  69.479103 #> 204  134.3498993  180.24588013 224.807635 #> 205   64.8174515   64.93652344  91.749954 #> 206    6.1067653  -93.81306458  94.011615 #> 207  -35.8661880  -81.43636322  88.984632 #> 208  -42.1999397   -7.52376986  42.865394 #> 209  -51.7209167   -3.79400086  51.859885 #> 210   15.2724133 -149.78131104 150.557922 #> 211  123.9509888 -100.41047668 159.518373 #> 212  127.4488373   68.68818665 144.780085 #> 213   40.0869446   90.72274017  99.184569 #> 214  -87.2974167   48.17602921  99.708419 #> 215 -131.4947052   -5.56670952 131.612483 #> 216 -108.1788712  -12.58722687 108.908707 #> 217   29.5152836   53.85984039  61.416890 #> 218  108.6425171   68.34385681 128.351390 #> 219   97.4128799   14.64998341  98.508331 #> 220  -67.5999298  -33.28385544  75.349622 #> 221  -76.8290710  -44.32260895  88.697237 #> 222  -36.3591423   56.90711594  67.530786 #> 223   61.5438766   22.12606049  65.400392 #> 224   18.6369762 -125.19663239 126.576197 #> 225  -50.7111626  -65.21076202  82.607902 #> 226   26.0977859   38.00604630  46.103731 #> 227  106.3341370  105.02397919 149.455628 #> 228  140.2843628   68.76107788 156.229921 #> 229  -52.8139572   31.25828934  61.370960 #> 230 -109.0739670   55.87451172 122.552402 #> 231  -50.4531860  -84.79103088  98.666321 #> 232   40.6078987 -157.45422363 162.606377 #> 233   44.0878448 -172.10604858 177.663249 #> 234 -129.4271698  -89.37783813 157.288875 #> 235 -123.3105087   42.40784454 130.399029 #> 236   -6.0282540   81.43805695  81.660866 #> 237  105.7836227   59.89778900 121.564468 #> 238   56.2041283   13.57196999  57.819568 #> 239  -13.1302080   40.08443069  42.180137 #> 240  -50.7697906   31.41136169  59.701301 #> 241  -23.5421410  -51.46393204  56.593009 #> 242   64.2287292  -90.14810944 110.688804 #> 243   50.6879845   24.98197556  56.509918 #> 244   12.5499878   20.37618637  23.930967 #> 245   -9.2229757  -31.64303780  32.959750 #> 246   16.4689522    9.15142536  18.840779 #> 247  -20.7124691   73.95075989  76.796623 #> 248  -79.9448547   55.46124268  97.299174 #> 249  -72.9103317    0.02038919  72.910335 #> 250   11.3771648   70.79301453  71.701400 #> 251   -1.5317307  163.82690430 163.834065 #> 252   19.5276566   22.79233360  30.013661 #> 253   44.0620766  -65.06263733  78.578708 #> 254  -28.0377731  -84.20306396  88.748367 #> 255  -72.8151703 -100.03266907 123.727862 #> 256  -28.5313873 -115.86928558 119.330346 #> 257   49.1834679   -3.19596195  49.287196 #> 258   30.8072720  156.39817810 159.403507 #> 259   -3.9405327   83.84839630  83.940940 #> 260  -30.1099224  -47.92000198  56.594470 #> 261  -41.7633781 -158.44851685 163.860039 #> 262  -16.2757378   17.81166840  24.127892 #> 263   29.6458149  116.85495758 120.556856 #> 264   21.5802784   96.29483032  98.683346 #> 265  -60.1206703  -52.08094406  79.541937 #> 266  -99.0720673 -169.41026306 196.252673 #> 267  -57.7657051 -105.27636719 120.083264 #> 268  -21.3772774   13.50858688  25.287742 #> 269   70.9168701   53.71784592  88.965215 #> 270  227.3916016   19.38703537 228.216559 #> 271  271.5729675   70.46093750 280.564824 #> 272   92.6880417   11.81169128  93.437622 #> 273  -97.1816788   60.04135132 114.233281 #> 274  -82.3292313   35.57110596  89.685037 #> 275   14.4201603  102.24243927 103.254334 #> 276   -5.2363939   49.12544250  49.403734 #> 277 -125.2439804  -76.19229889 146.599185 #> 278 -191.9046783  -67.21833038 203.336444 #> 279  -68.2540894  -40.18964005  79.207499 #> 280   20.3852844  -23.58815002  31.176283 #> 281   83.1912994  -65.74082184 106.031354 #> 282  107.2947769  -61.45327377 123.647378 #> 283   71.1989594   47.19351196  85.419666 #> 284   85.1205215  124.71154022 150.991627 #> 285   10.5131760   10.78720760  15.062892 #> 286    5.5697865  -88.25298309  88.428567 #> 287  -59.0374718  -82.21895599 101.219464 #> 288  -64.3030472   68.09674835  93.659217 #> 289  -46.4359550  158.32952881 164.998599 #> 290   64.0682983   39.01101303  75.010706 #> 291   15.4505482 -102.13213348 103.294202 #> 292  -74.4308701  -82.02197266 110.759011 #> 293  -74.0864944  -67.60864258 100.298241 #> 294  -32.3114471   46.16956711  56.352982 #> 295  106.4545670   15.99134254 107.648957 #> 296  116.4890900  -26.23766136 119.407382 #> 297  136.7146301   32.00760651 140.411456 #> 298   56.0265732   10.15633011  56.939687 #> 299 -111.5168915   -4.07916451 111.591472 #> 300 -139.3864594  -81.04300690 161.234469 #> 301  -88.5384140  -91.01500702 126.975518 #> 302   47.0530891   29.72163773  55.654011 #> 303   76.5540924   15.25142288  78.058535 #> 304   12.7688046  -65.19910431  66.437682 #> 305   22.0615406  -34.15643311  40.661696 #> 306  -55.9365692   82.57173157  99.734601 #> 307    5.6483936  173.99195862 174.083618 #> 308   -8.0674305   42.79470825  43.548484 #> 309  -38.2705078  -63.51187897  74.151133 #> 310  -39.6686974  -45.07374573  60.043718 #> 311   25.1066780   -4.17211676  25.450969 #> 312   97.4872513   57.04888535 112.952820 #> 313   34.5778999   -4.81068468  34.910942 #> 314   -0.1299119  -44.65761566  44.657805 #> 315   22.4965534  -74.58203125  77.901055 #> 316  -21.6775208  -30.13898468  37.125103 #> 317 -113.2345963  114.61383057 161.116119 #> 318 -146.7039795   84.71233368 169.405540 #> 319  -59.5236320   18.01263237  62.189370 #> 320   28.0007896  -37.66842270  46.935640 #> 321  117.2066650 -114.91901398 164.145613 #> 322  123.3919144  -99.19403839 158.319366 #> 323   62.3501472   -9.38067055  63.051866 #> 324   11.6823502   51.86967468  53.168980 #> 325  -57.5499077  -13.08530712  59.018786 #> 326  -42.4747162  -96.03043365 105.004503 #> 327    0.1532933   -1.02693331   1.038312 #> 328   89.2078476   86.66732788 124.375503 #> 329   50.6332779   25.40080261  56.647415 #> 330  -29.0256863  -58.07488251  64.924436 #> 331 -185.7177277 -104.04988861 212.878965 #> 332 -114.7435913   94.52302551 148.663022 #> 333   30.0153484  225.01011658 227.003246 #>  [ reached 'max' / getOption(\"max.print\") -- omitted 667 rows ]"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Differentiate x y compute change amplitude via algorithm proposed Nyström  Holmqvist (2010) doi:10.3758/BRM.42.1.188 . Note components amplitude smoothed independently via Savitzky-Golay filter, components may (probably ) add amplitude. Note filtering sensitive presence NA.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"nh_sg_filter_order\" = 2)) #> # A tibble: 1,000 x 3 #>        x      y   amp #>    <dbl>  <dbl> <dbl> #>  1  NA     NA     NA  #>  2  NA     NA     NA  #>  3  NA     NA     NA  #>  4  NA     NA     NA  #>  5  NA     NA     NA  #>  6  NA     NA     NA  #>  7  NA     NA     NA  #>  8 143.  -126.   318. #>  9 110.    80.0  294. #> 10  17.7   44.8  235. #> # ... with 990 more rows"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from samples using votes from selected methods. — extract_saccades","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Extract saccades samples using votes selected methods. method votes whether given sample belongs saccade. Next, saccades identified via majority vote using  vote_threshold parameter, well minimum duration minimal temporal separation criteria. Please note units gaze samples must  degrees visual angle. units important methods use specific (e.g., physiologically plausible) velocity acceleration thresholds. default, ensemble includes methods proposed Engbert & Kliegl (2003) (\"ek\"), Otero-Millan et al. (\"om\"), Nyström & Holmqvist (2010) (\"nh\"),  see Implemented Methods vignette. However, can extended via custom methods, see Using Custom Methods vignette. default, function returns table identified saccades can return matrix methods' votes per sample instead (return_votes = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"extract_saccades(   x,   y,   sample_rate,   trial = NULL,   methods = list(method_ek, method_om, method_nh),   velocity_function = saccadr::diff_ek,   options = NULL,   binocular = \"merge\",   vote_threshold = ifelse(length(methods) == 1, 1, (length(methods) - 1)),   minimal_duration_ms = 12,   minimal_separation_ms = 12,   return_votes = FALSE )"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"x Horizontal coordinate, either vector monocular data two-column matrix binocular data. y Vertical coordinate, either vector monocular data two-column matrix binocular data. sample_rate Sampling rate Hz. assumed common entire time series. time series contains chunks (trials) recorded using different acquisition rate (e.g., SR Research Eyelink allows set different acquisition rate recording / trial), need split time series analyze separately. trial Optional vector trial ID. omitted, samples assumed belong single trial. Velocity, acceleration, saccades computed respecting trial borders. methods list saccade detection methods, can include external functions implement sample classification (see Using Custom Methods vignette). Package methods include Engbert & Kliegl (2003) (method_ek), Otero-Millan et al. (2014) (method_om),  Nyström Holmqvist (2010) (method_nh). Defaults list internally implemented methods: list(method_ek, method_om, method_nh). velocity_function handle function compute velocity acceleration. Defaults method suggested Engbert & Kliegl (2003) diff_ek. package also implements method proposed Nyström Holmqvist (2010) diff_nh. See vignette \"Velocity computation\" details information implement custom method. options named list options saccade detection (see method_ek, method_om, method_nh) velocity (diff_ek, diff_nh) computation. See documentation specific method details. binocular Specifies binocular data treated. Options \"cyclopean\" (binocular data converted average cyclopean image saccades extracted), \"monocular\" (saccades extracted independently eye), \"merge\" (default, sample votes obtained eyes methods averaged. way binocular saccades, .e., eye movements sufficient temporal  overlap eyes, detected.). vote_threshold Value 1 N (N number used methods) defining vote threshold saccade. default, one method \\(threshold = N-1\\) must agree sample considered saccade. Threshold 1 applied single method used. minimal_duration_ms Minimal duration saccade milliseconds. Shorter candidate saccades discarded, minimal_separation_ms Minimal time separation saccades milliseconds. Saccades separated shorter interval \"saccade\" votes, merged including period. return_votes Logical. Whether function return extracted microsaccades (FALSE, default) votes per sample (TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"data.frame saccade properties (see details), return_votes = FALSE. Alternatively, returns votes per sample (return_votes = TRUE). monocular processing (monocular input, cyclopean merged binocular data) matrix nrow(x) rows length(methods) columns 0/1 votes sample method. binocular processing, function returns two element list  similar matrices per eye.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Variables describe saccade Trial Trial index. Eye \"Monocular\" monocular inputs. \"Cyclopean\" binocular data averaged applying algorithms. \"Binocular\" binocular data votes averaged applying algorithms. \"Left\" \"Right\" binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"# Single trial data(single_trial) saccades <- extract_saccades(single_trial$x, single_trial$y, 500)  # Multiple trials data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x,                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)    # binocular saccades                              data(\"single_trial_binocular\")  saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                          single_trial_binocular[, c('yL', 'yR')],                                          sample_rate = 1000)                                            # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                         single_trial_binocular[, c('yL', 'yR')],                                         sample_rate = 1000,                                         binocular = \"cyclopean\")   # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                        single_trial_binocular[, c('yL', 'yR')],                                        sample_rate = 1000,                                        binocular = \"monocular\")                               # Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x,                              single_trial$y,                              500,                              methods = list(method_ek, method_om))  #  Alternative velocity computation method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh) #> Warning: no non-missing arguments to max; returning -Inf  # A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)  # Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"Smooths signal using Savitzky-Golay shifts filtered signal back","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(x, sg_order)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"x vector float sgOrder integer, order filter","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"vector float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(rnorm(1000), 2) #>    [1]            NA            NA            NA            NA            NA #>    [6] -0.7488375098 -0.7868453076 -0.4591633412  0.5840556123  1.2810830257 #>   [11]  0.5075030333 -0.0871161165 -1.0513003007 -0.1609037336 -0.0151567181 #>   [16] -0.0187355244 -0.8376238038 -0.0296037031  0.0547466248  0.1607108196 #>   [21]  0.1161649611  0.4449784843  1.2506737778  1.1223277884  0.6380935753 #>   [26] -0.0134257541 -0.7815068130  0.1297910195  1.3182313937  2.5322104812 #>   [31]  0.9501904985  0.4029347323 -0.0906520812  0.1501295275 -1.0619924406 #>   [36] -1.3165127839 -0.5599389599  0.8904257220  0.5298678207  0.2497690970 #>   [41]  0.0053144878 -0.4392560755 -0.2425910853 -0.1893604231  0.0724365561 #>   [46] -0.0746796098  0.3809397337  0.4157680914 -0.3805645582 -0.2682937145 #>   [51]  0.5665094585  0.5502305054 -0.8315937620 -1.5112650127 -0.2296521247 #>   [56] -0.0380163253 -0.5766160409 -0.6454328071 -0.2540545134  0.2976288027 #>   [61] -0.5282015189 -1.2158174974 -1.6036687199 -0.2866945052 -0.2371621595 #>   [66] -0.5032798933  0.2070788199  1.6365523547  1.4659934317  0.2947318155 #>   [71] -0.1480674224 -0.6533387682 -0.4652611123  0.4260756527  0.6934789390 #>   [76]  0.5069032447  0.9841724818  0.4494206401 -0.5460798442 -0.9544114630 #>   [81] -0.3622123346 -0.0796428668  0.7433424827  0.9034761883  0.5725067400 #>   [86] -0.2784460853  0.0071738072  0.3044794581  0.3914647502 -0.9643875102 #>   [91] -1.2555622234 -0.8458935527 -0.0987402419  0.3549731631 -0.0589517261 #>   [96]  0.2335271945 -0.2417849563 -0.4325659341 -0.7968268778  0.5143997772 #>  [101]  1.1453896475  1.2969732959  0.2770149684  0.1065159421 -0.1169870956 #>  [106]  0.3511756295  0.4624339870  0.8260257597  0.3205525629 -0.4069862553 #>  [111] -0.0427745634  1.2705611869  1.1143375112 -0.2095907641 -1.1820333750 #>  [116] -0.0389672224  0.0969988454  0.8204791560  0.7706966795  0.3477656159 #>  [121] -0.4740309495  0.0970056178  0.3636608780  1.0714033637  0.7407652922 #>  [126]  0.1574210711 -0.4098206991 -0.3706550445 -0.6488469720 -0.3768348751 #>  [131]  0.5031889965  0.4902140105 -0.3778114337 -0.5857550595 -0.0796005687 #>  [136]  0.6536336753  0.6456003091  0.2039018640 -0.2336558957 -0.3610362914 #>  [141] -0.2065530574  0.2474586921 -0.5275033926 -0.2392444922 -0.4309214484 #>  [146] -0.1083756495 -1.3799566260 -1.8230583610 -1.1749746043 -0.0165849834 #>  [151]  0.1135958682  0.1287115797  0.7605966245  1.3015119107 -0.0987989177 #>  [156] -0.2249012973  0.4208139865  0.2476624385 -0.4015543360 -0.5036852490 #>  [161]  0.1245924812 -0.0271130674  0.8846907807  0.8040900939  1.0866254326 #>  [166]  0.9778024049  1.1796153866  0.5083073850 -0.3677456561 -1.3821632761 #>  [171] -1.1148293050  0.3811730142  0.4250469581  0.3830625398 -0.1409550431 #>  [176]  0.5898418718  0.8605616920  0.2331893048 -0.5911963093 -0.8914526410 #>  [181] -0.9164972267 -1.5058583848 -0.0800498968  0.4768323266  0.7652691156 #>  [186] -0.0086609613 -0.2083172379 -0.6743814077  0.5217207832  0.1085776006 #>  [191] -0.0959746567 -0.9581825791 -0.2859944053 -0.2319460594  0.6575365135 #>  [196]  0.1477114828 -0.2475476326  0.1592850747  0.5928322202  0.0929324370 #>  [201] -0.0984175002  0.3932020761  0.1771165195 -1.0525983958 -1.6767067822 #>  [206]  0.6361327675  1.0530264342  0.6545849949 -0.1287256113  0.5548792909 #>  [211] -0.1047385918 -0.5960554419 -0.2632218102 -0.0006198454  0.5375285035 #>  [216]  0.9188545049  0.4846945917 -1.0000218040 -1.1866093964 -0.3383505229 #>  [221]  0.1172789057 -0.1733344348 -0.3682919961 -0.3944170171 -0.4039125652 #>  [226] -0.1570109921  0.0264329461 -0.4251488912 -0.5115260506 -0.4892467426 #>  [231]  1.1509584459  0.7603187093 -1.0622948711 -1.4123053298  0.3000500530 #>  [236]  1.3164172457  0.1454124118 -0.6723219472 -1.0913117710  0.2925330767 #>  [241]  0.4976230867 -0.0283845173 -0.8744224296 -0.1668714996  0.5872315408 #>  [246]  1.3211030047  0.8900344829 -0.6268699660 -1.5704326683 -1.5483319264 #>  [251] -1.0590722354 -0.4129353332 -0.0901908119  0.3125754924 -0.5339451738 #>  [256] -0.5412031746 -0.0836747827  0.9269779922  0.2582123571 -0.0833156858 #>  [261] -0.6632663653 -0.6280045725 -0.6995972676 -0.1669322000  0.2066550306 #>  [266]  0.5900486740  0.7725876564 -0.0586018195 -0.2916270369 -0.7705166480 #>  [271] -0.4575812890 -0.2928638898 -0.3791018383  0.0378818386  1.7036889696 #>  [276]  2.8585490468  1.4110848755 -0.3148885445 -0.9347324919 -0.3923980993 #>  [281] -0.8825287066 -0.3480225764 -0.9868702353 -0.4833582092 -1.0847579486 #>  [286] -0.8454561655 -1.3851986724 -0.5279372468 -0.7198689141 -0.9996726316 #>  [291] -1.0756444494 -0.7671510525 -0.5545966394 -0.1368457882  0.2156690431 #>  [296] -0.4129274058 -0.4462500534  0.3645454351  0.9499191105  0.6326454498 #>  [301] -0.0882211937 -0.3863438545 -1.1310258178 -0.6868348629 -0.3552619788 #>  [306]  0.4339740192 -0.1505700495 -0.4406402364 -0.3079368668  0.6742958656 #>  [311]  0.5704665699  0.1696410070 -0.8787234378 -0.8791131948 -0.5528418007 #>  [316]  0.3837618811 -0.5371188305 -0.5107619977 -0.1688590606  0.3394525106 #>  [321]  0.3748231110  0.4868260637 -0.2141579359 -0.9207986905 -1.0851403430 #>  [326] -0.5661407092 -0.4927832753 -0.1486944257 -0.2204205952 -0.2003113711 #>  [331] -0.0182631069  0.4012282295  0.3303556126 -0.3696225219 -0.4355298944 #>  [336] -0.2598329162 -0.2960017456 -0.3834001729 -0.6579602450  0.0279350867 #>  [341]  0.3034025091  0.2622680948 -0.5577541302 -0.0449160328 -0.1210587203 #>  [346] -0.7115264072 -0.0469219156  0.4732029886  0.4706183856 -0.4853468287 #>  [351]  0.7290852237  0.4101775421 -0.1099305390 -0.3113619789  0.0725434680 #>  [356] -0.9785982324 -1.1351091003 -0.7512012381 -0.3758086574 -1.0642002225 #>  [361] -0.2867357828  0.5635168248  0.5373101854 -0.7075504909 -1.3308907532 #>  [366]  0.3633411933  0.4976926718 -0.0071176969 -0.6031361824  0.5922617434 #>  [371] -0.3444705252 -0.5592316360 -0.1680797712  1.4028852151  0.8486517033 #>  [376] -0.2770157712 -0.2578452274  0.2988789976 -0.3336509741 -1.1487865062 #>  [381] -0.4268370210  0.8037087307  1.3458802275  1.3206199398  0.5198960165 #>  [386] -0.6744433580 -0.6351958768  0.1726062365  1.0174298662  1.0005802615 #>  [391]  0.2563318375 -0.5993067406 -0.5461914971  0.2272459266  1.2015721698 #>  [396]  0.9203003536  0.4009098429  0.4982334204  0.2959547257  0.3142540069 #>  [401]  0.0760774702  0.6096429048 -0.0276078466 -0.3327779012 -0.1660557439 #>  [406]  0.6163565777  0.4338441211 -0.1226564686  0.3147660436  0.4282909234 #>  [411]  1.1647568582  1.1773657994  0.4447175413 -0.8065231548  0.5379012433 #>  [416]  0.6963917017  0.5526723675 -0.1499827406 -0.3875516436 -0.7475132710 #>  [421] -0.0159021071 -0.7122318950 -0.2378117813  1.1002538006  1.3155985400 #>  [426]  0.2429189278 -0.0316504799  0.0182069770 -0.0484636071  0.2260109387 #>  [431]  0.1013324628 -0.2651784248  0.7041679812  0.2597362623  0.4575782569 #>  [436] -0.8826854456 -0.3576205044 -0.8463716976  0.0394196266 -0.7556412940 #>  [441] -0.7983126667 -0.2905004499  0.1029542672 -0.3132914841 -0.2802212083 #>  [446]  0.2894900081  0.5828873578  0.1814101796  0.0531424300 -0.4059046180 #>  [451] -0.3583203802 -0.5572093063 -0.9402397109 -1.3421574864 -1.1030751240 #>  [456]  0.0354108860 -0.6169432218 -0.3538746452 -0.3103219185  0.3528901924 #>  [461] -0.5274432149  0.1224163453  0.4349679009 -0.1712524017 -0.8527309131 #>  [466] -0.1321327155  0.2424811229 -0.0119624749 -0.5305654234 -0.1160911835 #>  [471]  0.3278113872  0.3908810236  0.1111281438  0.1270979124 -0.0259043477 #>  [476] -0.2592670204  0.3810437123  0.6428850060 -0.1910663197 -1.4190592592 #>  [481] -1.1027593331  0.0104692892  0.2119722253 -0.2529190055 -1.1825182336 #>  [486] -0.3722060050  0.4939467988  2.1960822251  1.6020167171  0.2705974394 #>  [491] -0.9503185151  0.1390268006  0.0246022209  0.1071787015 -0.3505669885 #>  [496]  0.3554001047  0.0787990941 -0.3312885613 -1.1522656113 -0.5765892435 #>  [501] -0.1639917466  0.4091454899  0.1054094724  0.4605832484  0.5719485468 #>  [506]  0.2380406477 -0.7182062383 -0.5082728598  0.5521362606  1.1207600000 #>  [511]  0.7662432145  0.0979462439  0.3818030433  0.3219530894 -1.0345751587 #>  [516] -0.6351569858  0.4597482531  0.7599013169 -0.4389722752 -0.4325740451 #>  [521] -1.0645613428 -0.6929996561 -0.9378002982 -1.7483268390 -1.3285007249 #>  [526]  0.0082798203  1.1844734977 -0.2668751575 -1.2139779442 -1.1659319538 #>  [531]  0.1359342979 -0.6111966643 -0.8818122602 -0.5464353575 -1.3151863629 #>  [536] -1.5812953116  0.0955477667  1.1022955011  0.4715230043  0.3339978159 #>  [541] -0.1260769218 -0.1176261697  0.1099014594  0.8982317977  0.4081293028 #>  [546]  0.5075699040  0.5254531489  0.4357563299 -0.0235774245 -1.0183454221 #>  [551] -1.3947581165 -0.8434770576 -0.1898925098 -0.6226851767 -0.7810836846 #>  [556]  0.5422197552  1.1163516148  0.5281269492 -0.4499721531  0.2893591914 #>  [561]  0.7358157338  0.5620142702  0.0868937832  0.0283384380 -0.3900610202 #>  [566] -0.2620410724  0.7774106914  1.3181124347  0.5462352609  0.5546239219 #>  [571] -0.0307174824  0.2020216318  0.7886646855  0.9386843345 -0.5244772408 #>  [576] -1.0701566151 -0.1141496649  0.0727384257 -0.7951353806 -1.0220981346 #>  [581]  0.1273817797  0.8179495800 -0.2522955313 -0.3179586241 -0.3426484131 #>  [586] -0.0153345247  0.2366344949  0.7091154695 -0.1859068673 -0.6139653710 #>  [591] -0.3719448244  0.6775574548  0.5532597066  0.6163466659  0.3792297503 #>  [596]  0.1842644172 -1.3702044081 -0.8350034762  0.3513941379  0.4302897469 #>  [601] -0.7411659932 -0.5702038523 -0.1227870630 -0.3089851236 -0.5234785900 #>  [606]  0.3381091578  1.7483838741  1.2819360624  0.0884456314 -0.2849243335 #>  [611]  0.5255396575 -0.2505378716 -0.3818368903  0.0855148087  0.8912998821 #>  [616]  0.6900689445  1.7377534771  2.4213371659  1.7756689281 -0.3131198092 #>  [621] -1.1487769420 -1.0692681649 -0.1825308357  0.3784847996  0.1391285787 #>  [626] -0.1750305816  0.0784679972  0.3088113154  0.0283188720 -0.2709550832 #>  [631] -0.3637003518 -1.1054610793 -1.2789423645 -0.4961715334 -0.4571703519 #>  [636] -0.3299253270 -0.5239929984  0.3880099043  0.6219151201  0.4381617575 #>  [641] -0.1812476799 -0.6864579526 -0.3275475265 -0.7323825461 -0.9338540891 #>  [646] -1.0065877662 -0.7682518931 -0.0386039709  0.8721717456  1.8249220185 #>  [651]  1.4001854938  0.6110942255 -0.5653991469 -0.3705800977  0.1690610126 #>  [656] -0.5258350805 -1.3394369845 -0.9886542418 -0.7324766470 -0.9764833522 #>  [661] -0.6531532894  0.1639877148  0.5573540641  1.1026197638  0.0582583040 #>  [666] -0.0060872175  0.3959572196  0.7445606503 -0.2984560724  0.2275521837 #>  [671]  1.6812053708  1.2958983135 -0.0051256230 -0.7732101199 -0.4851271567 #>  [676] -0.4526609142 -0.6641333793  1.2343733889  0.8253289234  0.0891845963 #>  [681] -1.3373019853 -0.3496802788 -0.1849024100  0.1213014704 -0.2596661537 #>  [686] -0.7069968999 -0.6220343749 -0.0684382333  0.2268354042  0.2666882050 #>  [691]  0.2274480056 -0.3921767530 -0.0002997714 -0.3460182324 -0.0891617623 #>  [696] -0.8843865401 -0.2206265823  0.5838202992  0.7303228517  0.6407298147 #>  [701]  0.5654940063  0.6615882395 -0.1524343636  0.0932931013  0.0395649961 #>  [706]  0.4367947635  0.2107608553  0.3558687909 -0.2728917289  0.2518762433 #>  [711]  0.6133734550  0.7317288541  0.3859221291  0.0406885675 -0.0688549325 #>  [716] -0.0654035965  0.3794588132  1.0271015979  1.5985501173  0.9157404936 #>  [721]  0.0169688825 -0.4971320869 -0.9354947955 -1.1064521954 -0.8436344193 #>  [726] -0.2503357678  0.3385606314  0.8957543401  1.0665650311  0.5171621568 #>  [731] -0.1483547697 -0.8893659046 -0.0481714754  0.3102815852  0.8280193889 #>  [736]  0.7196090351  0.1761136729 -0.8352316872 -0.2693637990  0.1929627516 #>  [741] -0.4153197930 -0.2805210649 -0.3844513541 -0.2635805712 -0.1593509435 #>  [746]  0.0047089776 -0.3504736101 -0.2648417332 -0.0492606626 -0.4811396428 #>  [751]  0.1999638502  1.1230801980  0.8805622194  0.6064119352 -0.2797977385 #>  [756]  0.0939021516 -0.1860862209  0.3761473255 -0.2812109988  0.0470248687 #>  [761]  0.1333400454  0.7498885925  1.1431670789  1.4464476155  1.3646751095 #>  [766]  1.3900808554  0.3395217902 -0.0593296527  0.1720036073  0.6586669201 #>  [771]  0.4414580368  0.0218122904  0.0761529916 -0.1558402938  0.5244239792 #>  [776]  0.6154353368  1.2237117170  0.3503648160  0.5350103597  0.4975870440 #>  [781]  0.9897049490  0.8477312893  0.5126802418  0.6978493118  0.2622196153 #>  [786]  0.2294297444 -0.4448241754  0.1192093963 -0.4301695280 -0.2536840667 #>  [791] -0.1072437771  0.1276778492 -0.6411900895 -0.1535859849  0.3455996753 #>  [796]  0.2088953982 -0.8778545994 -0.1695376214  0.2410779269  0.4781003590 #>  [801] -0.6464509102 -0.7546727504 -0.9204242601 -0.7899553350 -1.0479712166 #>  [806] -0.1811576401 -0.7386928192 -0.9133111893 -0.7283657312  0.5081823961 #>  [811] -0.5462698283 -1.1132194752 -1.4684915039 -0.0617897966  0.7325909016 #>  [816]  1.2799015619 -0.2460959478 -0.2665152589 -0.7674885058  0.1929378994 #>  [821]  0.0575318415  0.1559978041 -0.6813987887 -0.7619751162  0.0320160921 #>  [826]  0.9561564488  0.6779471499  0.7915154241  1.2529396747  0.2630582993 #>  [831] -1.3471266418 -1.3893731246  0.0680782219  0.5486044811 -0.2389807722 #>  [836] -0.2890831352 -0.0613532585  0.0903864196 -0.5370026545  0.2066999240 #>  [841] -0.4623104198 -0.3905417198  0.3656444365  1.0793596148  0.8942465764 #>  [846]  1.4361253865  1.7977343591  0.7696456243 -0.3961359237 -1.6172380245 #>  [851] -1.3603828757 -0.5921516122 -0.2254693629 -0.9283267881 -1.1355229422 #>  [856] -0.6953920828 -0.0510312369  0.9306379033  0.4634635794  0.1689452837 #>  [861]  0.4853115464  0.9198614552  0.7967180701  0.6915433322  0.1766507923 #>  [866] -0.5032266326 -0.8450215414 -0.9098490302 -1.3374133891 -1.1572621421 #>  [871] -0.7091255515 -0.4309467510  0.3670514485  0.3389423382  0.8042343106 #>  [876]  0.1078370442  0.4614169728  0.6797587382  1.5269795125  0.9715418950 #>  [881]  1.0651478413  1.2034198946  1.4905505524  0.3778156962  0.3598129535 #>  [886]  0.3627068705  0.6849123305  0.0063205762 -0.2242276253 -0.7222500058 #>  [891] -0.1832368972  0.3537700342  0.9717864293  0.3070683099  0.6908787335 #>  [896]  0.3157950583  0.5012168122  1.1109651249  0.9732373113 -0.2405009307 #>  [901] -1.2693328021  0.1446067323 -0.3359231558 -0.5039439432 -0.4503640911 #>  [906]  0.0299452952 -1.0188293397 -1.1451514680 -0.4373068316 -0.0493213832 #>  [911]  0.3695732514  1.7666902070  1.4548056700  0.7250025975  0.2141396553 #>  [916]  0.6956820981  0.3867127729  0.0829790095  0.0207602531 -0.2827135812 #>  [921]  0.0068521444 -0.6483574898 -0.2461562277 -0.4208460645 -0.3175471581 #>  [926] -0.3353962557 -0.2001154635 -0.5752823134 -0.8269371577 -0.5786093551 #>  [931] -0.8132120567 -0.7878178124  0.1669043588  0.7012691156  0.9423421591 #>  [936]  0.2375733392 -0.4931259334 -2.0594730643 -1.3724865803  0.2611387182 #>  [941]  1.5207628506  1.4042411657  0.1477449336 -0.4983419234 -1.0127085948 #>  [946] -0.5610016622 -0.4566579763  0.0644174989 -0.0040484375  0.7451758661 #>  [951]  1.3200996453  1.7847363797  0.0183276650 -1.1334890748 -1.5046334452 #>  [956] -0.6232352188 -1.0230679326  0.3225348345  1.1383676077  1.3539325337 #>  [961]  0.3165805613  0.2362370713 -0.0673900641 -0.8106601782 -0.1553086525 #>  [966] -0.0438351808  0.8272506985 -0.2983137390  0.0117815870 -0.4923379837 #>  [971] -0.0786954306  0.0328601914  1.1899262425  1.5940416038  1.7424859487 #>  [976]  1.3404321044  1.0237187232  1.2054383208  1.0205626072  0.4567536354 #>  [981]  0.1528577911 -0.3129762166 -1.0389491640 -0.6413510100  0.0847273416 #>  [986] -0.2039259360 -0.4090296022 -0.1281588362 -0.0044037174 -1.2856825641 #>  [991] -1.2867635410  0.0796694894  1.7805398734  0.7850768407 -1.1111130161 #>  [996] -1.4015641484 -0.8016374143 -0.2246609149 -0.6084553829 -0.8460189314"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts inputs to matrix — input_to_matrix","title":"Converts inputs to matrix — input_to_matrix","text":"Converts inputs (vector, matrix, data.frame/tibble)  matrix preserving number columns","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(x)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts inputs to matrix — input_to_matrix","text":"x vector, matrix, data.frame/tibble","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts inputs to matrix — input_to_matrix","text":"matrix","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(1:5) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 #> [5,]    5"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Extract saccades using algorithm proposed Engbert Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"method_ek(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Method options, please refer Engbert Kliegl (2003) details parameters rationale default values. ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults 6. ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator, per formula #2 Engbert Kliegl (2003). Can replaced mad, sd, etc. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults 12. ek_minimal_separation_ms minimal required time gap saccades. Defaults 12.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"Extract saccades using algorithm proposed Nyström Holmqvist (2010) doi:10.3758/BRM.42.1.188 .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"","code":"method_nh(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze y coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details  information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2. nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\r\n. — method_nh","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Extract saccades using algorithm proposed Otero-Millan et al. (2014) doi:10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"method_om(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Method options, please refer Otero-Millan et al. (2014) details parameters rationale default values. om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults 30. om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults 5. om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s.  Defaults 3. om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults 0.05.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"A monocular multi-trial recording — monocular_ten_trials","title":"A monocular multi-trial recording — monocular_ten_trials","text":"monocular recording, 10 trials, sampling rate 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A monocular multi-trial recording — monocular_ten_trials","text":"","code":"monocular_ten_trials"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A monocular multi-trial recording — monocular_ten_trials","text":"data frame 14353 rows 4 variables: trial Trial index. x X coordinate degrees visual angle. y Y coordinate degrees visual angle. time Sample time milliseconds.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract value for a named list or use default if key is missing — option_or_default","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Extract value named list use default key missing","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(options, key, default)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"options Named list key String key default Default value returned, key missing.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Value list default value","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(list(\"A\" = 25), \"A\", 20) #> [1] 25 option_or_default(list(\"A\" = 25), \"B\", 20) #> [1] 20"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/saccadr.html","id":null,"dir":"Reference","previous_headings":"","what":"saccadr — saccadr","title":"saccadr — saccadr","text":"Extract (Micro)Saccades Gaze Samples.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard deviation via median estimator. — sd_via_median_estimator","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"Compute standard deviation via median estimator. Please refer formula #2 Engbert & Kliegl (2003). Falls back mean estimator, computed standard deviation smaller .Machine$double.eps. Raises error results using mean estimator still smaller .Machine$double.eps.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(x, na.rm = FALSE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"x Numeric values na.rm Whether exclude NA values, defaults FALSE.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(rnorm(100)) #> [1] 0.8084543"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial monocular samples recorded at 500 Hz. — single_trial","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"single trial monocular samples recorded 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"","code":"single_trial"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"data frame 1006 rows 2 variables: x X coordinate degrees visual angle. y Y coordinate degrees visual angle.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial binocular recording. — single_trial_binocular","title":"A single trial binocular recording. — single_trial_binocular","text":"single trial binocular recording sampled 1000 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial binocular recording. — single_trial_binocular","text":"","code":"single_trial_binocular"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial binocular recording. — single_trial_binocular","text":"data frame 2000 rows 6 variables: trial Trial index. time_rel Sample time milliseconds relative trial start. xL X coordinate left eye degrees visual angle. xR X coordinate right eye degrees visual angle. yL Y coordinate left eye degrees visual angle. yR Y coordinate right eye degrees visual angle.","code":""}]
