[{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Engbert and Kliegl (2003)","title":"Implemented Methods","text":"algorithm labels sample saccade velocity, measured units standard deviation (see ), exceeds predefined threshold (defaults \\(6\\)) duration super-threshold period exceeds minimal duration (defaults \\(12\\) milliseconds). method makes assumptions velocity units degrees per second can used data (e.g., samples encode gaze screen position units). standard deviation computed following formula #2 Engbert Kliegl (2003) However, value smaller .Machine$double.eps, recomputed via mean estimator monocular version algorithm implemented binocular saccades computed using overlapping votes two eyes. method details rationale default parameter values refer Engbert Kliegl (2003). Parameters: ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults \\(6\\). ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator() implements formula #2 Engbert Kliegl (2003). Can replaced sd(), mad(), custom function. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults \\(12\\). ek_minimal_separation_ms minimal required time gap saccades. Defaults \\(12\\).","code":"sqrt(median(x^2) - median(x)^2) sqrt(mean(x^2) - mean(x)^2)"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"otero-millan2014","dir":"Articles","previous_headings":"","what":"Otero-Millan et al. (2014)","title":"Implemented Methods","text":"algorithm: Detect local velocity peaks. Filter based minimal inter-peak interval (defaults \\(30\\) ms) maximal allowed saccade rate (defaults \\(5\\) Hz). Identify onset offset potential saccade using absolute velocity threshold degrees per second (defaults \\(3\\)). Compute peak velocity peak acceleration peak velocity reached. Rotate velocity peak acceleration via PCA retain components predefined threshold explained variance (defaults \\(0.05\\)). Perform cluster analysis remaining components \\(2\\), \\(3\\), \\(4\\) picking solution smallest silhouette. Saccades identified cluster highest average peak velocity. method details rationale default parameter values refer Otero-Millan et al. (2014). Parameters: om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults \\(30\\) om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults \\(5\\). om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s. Defaults \\(3\\). om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults \\(0.05\\).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Nyström and Holmqvist (2010)","title":"Implemented Methods","text":"algorithm: Identify physiologically implausible velocity acceleration peaks (defaults \\(1000 \\deg/s\\) \\(100000 \\deg/s^2\\)). Identify noise onset/offset samples around implausible velocity/acceleration median velocity. Exclude samples analysis. Identify velocity threshold \\(PT = mean(V_{subthreshold}) + 6 \\cdot std(V_{subthreshold})\\) via iterative method starting arbitrary \\(PT\\) value (defaults \\(100 \\deg/s\\)). Stop threshold change \\(1 \\deg/s\\). Identify saccades periods peaks peaks threshold \\(PT\\) adjacent samples \\(PT_{onset/offset} = mean(V_{subthreshold}) + 3 \\cdot std(V_{subthreshold})\\). method details rationale default parameter values refer Nyström Holmqvist (2010). Parameters: nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Implemented Methods","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/using_custom_methods.html","id":"example-implementation","dir":"Articles","previous_headings":"","what":"Example implementation","title":"Using Custom Methods","text":"example implementation overly simple custom method labels sample saccade velocity exceeds predefined threshold. expects threshold parameter \"st_velocity_threshold\" member list uses default threshold \\(50 \\deg / s\\) (arbitrary number!) threshold provided. implemented method, can pass alongside internally implemented methods:","code":"simple_threshold_method <- function(x,                                     y,                                     vel,                                     acc,                                     sample_rate,                                     trial,                                     options) {    # obtain method parameters or use defaults   velocity_threshold <- saccadr::option_or_default(options, \"st_velocity_threshold\", 50)    # vote on each sample     sample_vote <- vel[['amp']] > velocity_threshold      # return votes   sample_vote } data(\"single_trial\") saccades <- saccadr::extract_saccades(x = single_trial$x,                                       y = single_trial$y,                                       sample_rate = 500,                                       methods = list(\"ek\", \"om\", \"nh\", simple_threshold_method),                                       options = list(\"st_velocity_threshold\" = 70))"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Differentiation following Engbert and Kliegl (2003)","title":"Velocity computation","text":"method computes velocity predefined time window controlled via ek_velocity_time_window defaults 20 ms. width window converted samples based sampling_rate parameter ensured odd number equal larger 3. .e., window three samples long, velocity computed based one sample one sample current, five-samples window - two samples , etc. code always starts requested window size iteratively reduces two samples accommodate trial limits missing values. NA velocity returned even smallest window (three samples wide) used. general, horizontal vertical velocity components computed \\[v_x[] = \\frac{\\sum_{j=1}^{(N-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(N-1)/2}2j\\cdot\\Delta t}\\] \\(\\) index sample, \\(\\Delta t = \\frac{1}{sample~rate}\\) duration single sampling frame, \\(N\\) odd integer width moving average used compute velocity. Engbert Kliegl (2003), \\(N=5\\) \\(\\Delta t = 4\\) (250 Hz sampling rate) translate 20 ms moving average window (default value used method implementation). derivation shows equivalence formula formula 1 Engbert Kliegl (2003). \\(N=5\\): \\[\\frac{\\sum_{j=1}^{(5-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(5-1)/2}2j\\cdot\\Delta t}=\\] \\[\\frac{\\sum_{j=1}^{2}x[+j] - x[-j]}{\\sum_{j=1}^{2}2j\\cdot\\Delta t}=\\] \\[\\frac{x[+1] - x[-1]+x[+2] - x[-2]}{2\\Delta t + 4\\Delta t}=\\] \\[\\frac{x[+2] + x[+1] - x[-1] - x[-2]}{6\\Delta t}\\]","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Differentiation following Nyström and Holmqvist (2010)","title":"Velocity computation","text":"Horizontal vertical components velocity computed adjacent samples, amplitude computed components filtered using Savitzky-Golay filter. Filter order controlled via nh_sg_filter_order option defaults 2.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"comparing-two-methods","dir":"Articles","previous_headings":"","what":"Comparing two methods","title":"Velocity computation","text":"two methods produce comparable different velocity values. However, minor effect saccade detection, see vignette Using sample votes.","code":"# computing velocity using two methods vel_ek <- saccadr::diff_ek(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_nh <- saccadr::diff_nh(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_comparison <- na.omit(data.frame(EK = vel_ek[['amp']], NH = vel_nh[['amp']])) %>%   dplyr::filter(NH > 0) %>% # values can be negative due to filtering   dplyr::mutate(logEK = log(EK), logNH = log(NH))   # plotting amplitude comparison pearson_rho <- cor(vel_comparison[['EK']], vel_comparison[['NH']])  ggplot(data = vel_comparison, aes(x = EK, y = NH)) +   geom_abline() +   geom_point() +   scale_x_log10() +   scale_y_log10() +   labs(subtitle = sprintf(\"Pearson's ρ = %.2f\\nPearson's ρ for log transformed velocities = %.2f\", pearson_rho, cor(vel_comparison[['logEK']], vel_comparison[['logNH']])),        x = \"Vek\",        y = \"Vnh\") # plotting  ggplot(data = NULL, aes(x = vel_comparison[['EK']] - vel_comparison[['NH']])) +   geom_histogram(bins = 50) +   xlab(\"Vek - Vnh\") +   labs(title = \"Difference in velocities computed via two methods\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"implementing-and-using-a-custom-differentiation-function","dir":"Articles","previous_headings":"","what":"Implementing and using a custom differentiation function","title":"Velocity computation","text":"custom function follows Arguments passed function (vectors length): x, y vectors values, either x y gaze coordinates velocity components (acceleration). sample_rate scalar value Hz. trial vector trial index per sample. options named list method-specific options. See example use . See also option_or_default() function. function must return data.frame three columns: x (horizontal component), y (vertical component), amp (amplitude). example simple velocity function respects trial borders similar function uses optional custom_velocity_lag parameter can different 1","code":"diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # compute vertical and horizontal components   df <- data.frame(x = ..., # differentiate values of x                     y = ...) # differentiate values of y      # compute amplitude   df[['amp']] = sqrt(df[['x']]^2 + df[['y']]^2))    # return a data.frame with columns x, y, and amp   return(df) } library(dplyr)  diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x)) / delta_t_s,            y = (y - lag(y)) / delta_t_s,            amp = sqrt(x^2 + y^2)) } diff_lag_n <- function(x, y,  trial, sample_rate, options=NULL) {   # obtain lag or use default   lag_n <- saccadr::option_or_default(options, \"custom_velocity_lag\", 1)      # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x, lag_n)) / delta_t_s,            y = (y - lag(y, lag_n)) / delta_t_s,            amp = sqrt(x^2 + y^2)) }"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Velocity computation","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). saccadr: Extract Saccades via Ensemble Methods Approach. https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/.","code":"@Manual{,   title = {saccadr: Extract Saccades via an Ensemble of Methods Approach},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/}, }"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccadr","dir":"","previous_headings":"","what":"Extract Saccades via an Ensemble of Methods Approach","title":"Extract Saccades via an Ensemble of Methods Approach","text":"saccadr modular extendable R package extract (micro)saccades gaze samples via ensemble methods approach. Although agreement general definition saccade, specific details harder agree upon. Therefore, numerous algorithms extract saccades based various heuristics, differ assumptions velocity, acceleration, etc. package uses methods label individual samples applies majority vote approach identify saccades. package includes three methods (see Implemented Methods vignette) can extended via custom methods (see Using custom methods vignette). also uses modular approach compute velocity acceleration noisy samples (see Velocity computation vignette). Finally, can obtain methods votes per gaze sample instead saccades (see Using sample votes vignette). extract_saccades() function uses several methods label individual samples belonging saccade, classifies sample potential saccade proportion votes exceeds preset threshold, identifies saccades based minimal saccade duration minimal time saccades. binocular data, 1) samples can averaged velocity computation, 2) votes can merged function returns binocular saccades, 3) saccades extracted eye separately. Currently, library implements saccade detection using following saccade detection methods. using package, please cite package individual methods. method_ek : Engbert, R., & Kliegl, R. (2003). Microsaccades uncover orientation covert attention. Vision Research, 43(9), 1035–1045. https://doi.org/10.1016/S0042-6989(03)00084-1 method_om : Otero-Millan, J., Castro, J. L. ., Macknik, S. L., & Martinez-Conde, S. (2014). Unsupervised clustering method detect microsaccades. Journal Vision, 14(2), 18–18. https://doi.org/10.1167/14.2.18 method_nh : Nyström, M., & Holmqvist, K. (2010). adaptive algorithm fixation, saccade, glissade detection eye tracking data. Behavior Research Methods, 42(1), 188–204. https://doi.org/10.3758/BRM.42.1.188","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Saccades via an Ensemble of Methods Approach","text":"install github","code":"library(\"devtools\") install_github(\"alexander-pastukhov/saccadr\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Saccades via an Ensemble of Methods Approach","text":"main function extract_saccades(). Minimally, takes x y gaze samples, sampling rate returning table extracted saccades. Note function expects units gaze samples degrees visual angle, methods use physiologically plausible velocity acceleration thresholds.","code":"data(\"single_trial\") saccades <- extract_saccades(single_trial$x, single_trial$y, sample_rate = 500)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"multiple-trials","dir":"","previous_headings":"Usage","what":"Multiple trials","title":"Extract Saccades via an Ensemble of Methods Approach","text":"recording spans multiple trials, need specify via trial parameter. way velocity computation saccade detection methods respect trial boundaries.","code":"data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"binocular-data","dir":"","previous_headings":"Usage","what":"Binocular data","title":"Extract Saccades via an Ensemble of Methods Approach","text":"three ways binocular data can treated based value binocular parameter: binocular = \"merge\" (default): sample votes obtained eyes methods averaged. way binocular saccades (.e., eye movements sufficient temporal overlap eyes) detected. Eye = \"Binocular\" saccade description. binocular = \"cyclopean\": binocular data converted average cyclopean image voting saccades detection. Eye = \"Cyclopean\" saccade description. binocular = \"monocular\": saccades extracted independently eye. Eye = \"Left\" Eye = \"Right\" saccade description.","code":"data(\"single_trial_binocular\") # binocular saccades only saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000)  # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"cyclopean\")  # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"monocular\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-methods","dir":"","previous_headings":"Usage","what":"Specifying methods","title":"Extract Saccades via an Ensemble of Methods Approach","text":"default, implemented methods used saccade detection , necessary, can use subset even single method. Note can also supply saccade detection function, please see Using custom methods vignette. Parameters individual methods passed via options argument, named list <parameter-name> = <value> pairs. can find information specific parameters default values Implemented Methods vignette. example modifying velocity threshold, measured units standard deviation, Engbert & Kliegl (2003) method. default value 6 can make stricter","code":"# Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = list(method_ek, method_om)) saccades <- extract_saccades(single_trial$x, single_trial$y, 500, options = list(\"ek_velocity_threshold\" = 8))"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"altering-voting-threshold","dir":"","previous_headings":"Usage","what":"Altering voting threshold","title":"Extract Saccades via an Ensemble of Methods Approach","text":"voting threshold number methods must label sample potential saccade. default, one method must agree sample considered saccade (vote_threshold = length(methods) - 1) 1, single method passed function. can make voting less restrictive via vote_threshold parameter.","code":"# A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-velocity-computation-method","dir":"","previous_headings":"Usage","what":"Specifying velocity computation method","title":"Extract Saccades via an Ensemble of Methods Approach","text":"gaze samples tend noisy, different methods use various approaches computing velocity noisy samples. Methods Engbert & Kliegl (2003) Otero-Millan et al. (2014) used approach based averaging multiple samples compute velocity, whereas Nyström & Holmqvist (2010) compute simple derivative filter . default, package uses former approach (velocity_function = diff_ek) can also use latter (velocity_function = diff_nh) implement custom method (see Velocity computation vignette). Acceleration computed way velocity samples. example using Nyström & Holmqvist (2010) velocity computation","code":"saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-saccade-temporal-properties","dir":"","previous_headings":"Usage","what":"Specifying saccade temporal properties","title":"Extract Saccades via an Ensemble of Methods Approach","text":"votes , saccades detection based minimal duration (minimal_duration_ms parameter, defaults 12 ms) minimal time saccades (minimal_separation_ms, defaults 12 ms).","code":"# Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccade-description-table","dir":"","previous_headings":"Return values","what":"Saccade description table","title":"Extract Saccades via an Ensemble of Methods Approach","text":"extract_saccades() function returns table following columns: Trial Trial index. Eye “Monocular” monocular inputs. “Cyclopean” binocular data averaged applying algorithms. “Binocular” binocular data votes averaged applying algorithms. “Left” “Right” binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"sample-votes","dir":"","previous_headings":"Return values","what":"Sample votes","title":"Extract Saccades via an Ensemble of Methods Approach","text":"Alternatively, use parameter return_votes = TRUE function can return votes per sample method (eye, binocular data). Please see Using sample votes vignette details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Compute velocity via Engbert & Kliegl (2003) algorithm. See formula #1 manuscript.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"","code":"compute_velocity_ek(x, trial, time_window_in_samples, delta_t)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"x Vector coordinates trial Vector trial labels, velocity computed within trials. time_window_in_samples Width window velocity computation samples. delta_t Duration single frame (1 / sampling rate).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Velocity vector","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Differentiate x y compute change amplitude via algorithm proposed Engbert & Kliegl (2003)","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Method options, please refer Engbert & Kliegl (2003) details parameters rationale default values. ek_velocity_time_window Time window velocity computation milliseconds. Defaults 20 ms.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"ek_velocity_time_window\" = 20)) #>                  x            y        amp #> 1               NA           NA         NA #> 2    -8.077625e+00  -22.8139839  24.201775 #> 3     1.794729e+02   -9.5910778 179.728993 #> 4     8.556277e+01  -22.6826839  88.518318 #> 5    -1.250885e+02  -31.3869953 128.966154 #> 6    -1.289804e+02   30.4282360 132.520984 #> 7    -7.633570e-01   61.8767281  61.881437 #> 8     9.173954e+00   20.4329453  22.397917 #> 9    -1.072052e+02  -27.0159683 110.556837 #> 10   -1.529640e+02  -54.3395920 162.329256 #> 11   -4.512189e+01   56.0185509  71.930961 #> 12    4.856470e+01   64.5880737  80.809340 #> 13    2.971875e+01   49.0585365  57.358035 #> 14   -3.395208e+00   16.1309185  16.484355 #> 15   -1.585288e+01   53.4598579  55.760830 #> 16    1.628215e+01   24.3025589  29.252739 #> 17    2.025349e+01  -90.9500732  93.177894 #> 18    4.296729e+01 -102.3871689 111.037472 #> 19    7.227572e+01  -50.5920944  88.223237 #> 20    1.205680e+02  -39.1483192 126.764467 #> 21   -1.410433e+01  -61.4128685  63.011686 #> 22   -6.441120e+01   -2.9839394  64.480282 #> 23   -7.939085e+01   73.5607376 108.231643 #> 24   -8.991124e+01  153.8264313 178.175761 #> 25   -3.586937e+01   74.5485992  82.729110 #> 26   -2.684113e+01    4.8637047  27.278234 #> 27    1.132715e+01  -29.6977615  31.784608 #> 28    1.397943e+01   -4.6691718  14.738581 #> 29   -4.701713e+01   14.6554928  49.248287 #> 30    1.641826e+01  -51.8658142  54.402408 #> 31    6.592610e+01 -100.3466415 120.065396 #> 32    1.289184e+02  -44.4935608 136.380474 #> 33    6.760725e+01   52.5322189  85.617602 #> 34   -1.048286e+02   12.4974060 105.570962 #> 35   -7.611858e+01  -96.1474380 122.631022 #> 36    3.149728e+01 -134.9082031 138.536283 #> 37    1.497010e+02   12.9708099 150.261834 #> 38    4.571788e+01  175.6718903 181.523379 #> 39   -8.511722e+00  213.5549011 213.724461 #> 40    3.940387e+01  123.8294525 129.947676 #> 41   -3.713738e+01  -92.2396088  99.435057 #> 42   -1.049199e+02  -99.1587143 144.362839 #> 43   -9.571910e+01  -10.5544291  96.299233 #> 44    4.652169e+01   36.4348221  59.091146 #> 45    6.842945e+01  -98.5041428 119.940218 #> 46   -7.930933e+01 -126.0471115 148.922273 #> 47   -7.451449e+01   48.9754753  89.168414 #> 48    5.398159e+01   99.2824326 113.008907 #> 49    1.347377e+02  100.4916992 168.085757 #> 50    1.332608e+01  -37.4317169  39.733082 #> 51   -1.226151e+02  -80.4006882 146.624487 #> 52   -1.127652e+02  -35.4936752 118.219256 #> 53    4.415364e+01  -21.7472935  49.218781 #> 54    4.128328e+01   69.1218643  80.511748 #> 55   -4.045891e+01   39.2636147  56.378672 #> 56   -3.606009e+01  -14.9660883  39.042458 #> 57    4.198073e+01  -44.8748283  61.450238 #> 58    1.493961e+02   21.8554478 150.986233 #> 59    7.267809e+01  109.5365143 131.454757 #> 60    5.147539e-01   45.4452934  45.448209 #> 61   -7.006047e+01  -97.3463974 119.936611 #> 62   -1.128565e+02 -134.9128723 175.892204 #> 63   -6.160200e+01   44.8312607  76.188244 #> 64    1.616345e+01   99.0262146 100.336675 #> 65    3.750221e+01  110.5354385 116.724029 #> 66    4.304031e+01  -44.8281174  62.145217 #> 67    1.173400e+01  -84.2923508  85.105153 #> 68    5.076120e+01  -22.1076241  55.366478 #> 69    5.063875e+01   -5.4714909  50.933486 #> 70    4.501285e+01   38.3567963  59.138822 #> 71    2.104716e+01  -71.5144424  74.547291 #> 72   -1.058250e+02  -66.2787933 124.867131 #> 73   -1.206789e+02  -37.0577660 126.240560 #> 74   -5.288466e+01   26.0822029  58.966676 #> 75    6.366418e+01   23.7159519  67.938014 #> 76    4.714768e+01   69.2931137  83.811930 #> 77    1.496102e+01  207.8789062 208.416582 #> 78    4.364905e+01   97.2532043 106.599367 #> 79   -1.983776e+01 -114.5480347 116.253124 #> 80   -7.247018e+01 -171.5417633 186.221653 #> 81   -9.204671e+01   -8.2258844  92.413543 #> 82   -4.281021e+01   45.5285416  62.494498 #> 83    1.054889e+02  -56.2650948 119.556092 #> 84    9.018996e+01  -26.2573357  93.934424 #> 85    5.319594e+01  -35.7327423  64.083045 #> 86   -7.499035e+01   22.3376274  78.246546 #> 87   -7.330949e+01  -41.2665215  84.126142 #> 88    5.298899e+01  -31.2002888  61.492201 #> 89    3.854849e+01  -16.6996899  42.010307 #> 90   -1.015154e+02   11.6652880 102.183398 #> 91   -9.284415e+01  127.7671967 157.938259 #> 92    6.771463e+01   19.5086651  70.468852 #> 93    2.043765e+02   55.3860550 211.748402 #> 94    2.998005e+01   35.2081604  46.243035 #> 95   -2.067643e+02   34.2042809 209.574394 #> 96   -9.895097e+01 -101.9363022 142.064439 #> 97    7.682458e+01 -154.4358063 172.488939 #> 98    1.410725e+02  -57.4793205 152.332928 #> 99   -2.930311e+01   53.1370773  60.681307 #> 100  -6.844438e+01   71.0664368  98.666468 #> 101  -3.031963e+01    1.2329903  30.344694 #> 102   3.375787e+01   10.9122696  35.477756 #> 103   8.017630e+00  -18.3298759  20.006667 #> 104  -1.326785e+01   12.8647146  18.480712 #> 105  -1.771230e+01   37.4762154  41.451081 #> 106  -6.135316e+01  -18.4857788  64.077565 #> 107   6.325386e+01  -88.4467468 108.737656 #> 108   8.332809e+01 -111.2977982 139.035139 #> 109  -1.685714e+01  -74.1827850  76.073969 #> 110  -2.090152e+01   55.5858765  59.385714 #> 111   9.366139e+00   26.8130417  28.401827 #> 112   7.821201e+01   96.8812332 124.511410 #> 113   4.710155e+01  120.0781631 128.985741 #> 114  -1.531557e+00   57.6075249  57.627880 #> 115  -4.187147e+01  -40.0741081  57.958211 #> 116  -1.146347e+02  -77.5616379 138.408525 #> 117  -6.469894e+01   48.9238243  81.114074 #> 118   9.970206e+01   76.1709290 125.469162 #> 119   1.309002e+02   -5.6527419 131.022234 #> 120  -6.040194e+01  -70.3644714  92.733773 #> 121  -1.131476e+02   10.7274265 113.654967 #> 122  -8.878702e+00   27.4634132  28.862959 #> 123   8.133452e+01  -39.9244652  90.605004 #> 124   5.899996e+01   11.3928108  60.089863 #> 125  -3.361998e+01   83.9127960  90.397238 #> 126  -5.059217e+01  110.2900009 121.340231 #> 127  -2.508564e+01   56.8592377  62.147102 #> 128  -2.487826e+00  -63.0402908  63.089362 #> 129   4.351749e+01 -145.5614777 151.927336 #> 130   4.189474e+01 -148.7973938 154.582772 #> 131  -2.884379e+01  -74.8874207  80.250171 #> 132  -1.070396e+02   89.9151688 139.793506 #> 133  -1.258450e+02  194.3829041 231.563529 #> 134  -1.278184e+01  192.7965393 193.219774 #> 135   9.836974e+01   97.3181915 138.374264 #> 136   1.364814e+02  -94.3932343 165.943492 #> 137   2.209558e+01 -233.1728516 234.217406 #> 138  -9.073870e+00 -254.2043762 254.366271 #> 139  -4.138307e+01 -129.2496338 135.713030 #> 140   2.818983e+01   44.7428589  52.882792 #> 141   6.594559e+01   57.7651787  87.667761 #> 142  -3.352991e+01   39.6782913  51.948260 #> 143  -4.238742e+01   73.2514038  84.631327 #> 144  -8.529970e+01   95.9854202 128.410433 #> 145   4.772546e+01   14.8349895  49.977960 #> 146   2.747295e+00 -100.5764465 100.613961 #> 147  -3.447561e+01  -55.2988892  65.165439 #> 148  -3.210084e+00   40.0213547  40.149888 #> 149  -4.224370e+01   32.9949646  53.602220 #> 150   2.807216e+01  -97.9632416 101.906049 #> 151   4.400857e+01 -121.5666428 129.287287 #> 152   1.693123e+02   29.6579838 171.890186 #> 153   2.346097e+02  218.4077148 320.536475 #> 154   9.278928e+01  171.3156738 194.830468 #> 155  -7.755863e+01   32.6223602  84.140120 #> 156  -1.974349e+02 -126.0838470 234.259878 #> 157  -8.071347e+01  -86.6867599 118.445172 #> 158  -4.027995e+01   -6.2043691  40.754978 #> 159  -7.908800e+01   54.1212997  95.833326 #> 160  -1.561984e+02   39.4276428 161.097771 #> 161  -4.633281e+01  -11.6716471  47.780295 #> 162   1.034257e+02   75.5335007 128.070983 #> 163   1.670699e+02   26.0484695 169.088333 #> 164   1.163660e+02  -55.6104736 128.971226 #> 165   8.085287e+01  -46.4878044  93.264688 #> 166  -1.100148e+01   -2.5265281  11.287868 #> 167  -1.022998e+02   14.2975025 103.294111 #> 168  -5.060721e+01  -49.2762222  70.634524 #> 169   3.569227e+01 -102.2464752 108.297184 #> 170   1.236662e+02   40.0077934 129.976745 #> 171  -7.159995e+01  113.0796127 133.841518 #> 172  -1.080998e+02  131.6261444 170.326183 #> 173  -3.722802e+01   33.4070053  50.019528 #> 174   5.157543e+01  -62.6539879  81.151385 #> 175  -1.403031e+00  -50.4063034  50.425826 #> 176  -1.263638e+02  -41.3953400 132.971395 #> 177  -7.036749e+01  -84.3695374 109.862655 #> 178  -1.809713e+01 -124.0052261 125.318802 #> 179   7.422413e+01  -65.6109085  99.065698 #> 180   9.378937e+01   35.2936516 100.210216 #> 181  -2.116138e+01  139.8562622 141.448146 #> 182  -1.044318e+02  142.5800476 176.734465 #> 183  -1.712544e+02   83.3757782 190.472014 #> 184  -2.798316e+01  -15.5932751  32.034470 #> 185   1.052997e+02 -139.9693451 175.155462 #> 186   9.885110e+01 -107.6825485 146.174795 #> 187   1.281787e+02   15.7008944 129.136719 #> 188  -2.807669e+00   88.4223938  88.466958 #> 189  -6.190978e+01  100.8948746 118.374813 #> 190  -5.238468e+01   56.4311142  76.997566 #> 191   6.611857e+01  -11.1010523  67.044004 #> 192   1.884991e+02 -144.4959869 237.509977 #> 193   4.245706e+01 -172.6634827 177.806862 #> 194  -1.103775e+02  -42.5535889 118.296278 #> 195  -9.326322e+01   44.1405220 103.181463 #> 196   5.258543e+00   -1.4257603   5.448401 #> 197   1.460549e+01  -52.3014793  54.302534 #> 198  -6.268286e+01   27.3284092  68.381160 #> 199   3.374431e+01  107.1578445 112.345370 #> 200   8.805130e+01   73.6173019 114.771680 #> 201  -2.479579e+01  -19.0250664  31.253549 #> 202  -1.267954e+02  -60.9442024 140.681435 #> 203  -2.971315e+01  -71.4375458  77.370498 #> 204   1.594727e+02 -110.1318359 193.805442 #> 205   8.693166e+01  -60.6124039 105.976307 #> 206   3.076535e+01   27.2240715  41.081104 #> 207  -7.861144e+01   98.5557556 126.067426 #> 208  -8.528455e+01   67.5134888 108.772819 #> 209  -8.785757e+01   -1.6125542  87.872372 #> 210  -4.584419e+01   46.8432999  65.543762 #> 211   6.001301e+01   85.7164230 104.636833 #> 212  -3.085621e+01   69.4803009  76.023797 #> 213   8.955528e-02  -36.8765030  36.876612 #> 214   7.862588e+01  -72.5018692 106.951155 #> 215   1.222050e+02  -29.9724751 125.826897 #> 216   8.148642e+01   11.0910234  82.237749 #> 217  -3.071452e+01   47.2452431  56.351529 #> 218  -4.027537e+01   -1.8570722  40.318163 #> 219  -5.833248e+01  -33.4093742  67.222501 #> 220  -4.035297e+01  -31.4393406  51.154609 #> 221  -1.280413e+01   18.9716187  22.888167 #> 222  -2.896860e+01  -30.6019516  42.138569 #> 223  -1.072006e+02 -111.6438828 154.778336 #> 224  -9.783620e+01  -37.0469398 104.615480 #> 225   1.674001e+01   51.3757172  54.034176 #> 226   8.120405e+01   59.7067451 100.791829 #> 227   5.001429e+01   85.0271988  98.646102 #> 228  -2.667146e+01  103.1832199 106.574592 #> 229  -6.400441e+01   57.0930252  85.768164 #> 230  -1.634270e+01   -6.4469185  17.568345 #> 231   1.107460e+02  -57.8673592 124.953211 #> 232   1.436642e+02  -51.0996666 152.481360 #> 233   1.477849e+02  -87.0328827 171.508317 #> 234   6.855023e+01  -61.9279976  92.380794 #> 235   2.587239e+01   20.5862293  33.063176 #> 236   4.761752e+01   93.5592804 104.979840 #> 237  -2.355733e+01  104.1942139 106.824070 #> 238  -3.765152e+01   42.7016678  56.930388 #> 239  -2.303913e+01  -33.8898773  40.979573 #> 240  -6.829387e+01  -27.9133511  73.778098 #> 241  -9.210484e+01  -20.9579201  94.459179 #> 242  -1.713764e+02   28.0845604 173.662357 #> 243  -8.864550e+01  102.2628326 135.335552 #> 244   1.555824e+01   61.5392609  63.475502 #> 245   6.487934e+01  -28.0725956  70.692288 #> 246   1.400544e+02 -106.6663361 176.048135 #> 247   1.331491e+02  -11.6260223 133.655683 #> 248   6.194496e+01    7.9099011  62.447933 #> 249  -3.151613e+01    6.2132649  32.122747 #> 250  -1.022372e+02  -29.1133518 106.301601 #> 251  -7.313013e+01  -33.8705788  80.593006 #> 252   1.129096e+01   39.9906693  41.554055 #> 253   1.548966e+01   53.6730919  55.863497 #> 254   2.482620e+01   33.2004242  41.456100 #> 255  -7.210076e+01   21.0612392  75.113884 #> 256  -5.432963e+01    7.7141981  54.874564 #> 257   3.445219e+01   22.5212746  41.160187 #> 258   1.143704e+02  -49.2592812 124.527353 #> 259   8.562348e+01  -17.0272522  87.300103 #> 260  -1.003016e+02   15.4648066 101.486793 #> 261  -1.637963e+02  -42.4199066 169.200073 #> 262  -9.493375e+01 -127.9884872 159.353288 #> 263   2.692176e+00 -161.6381836 161.660602 #> 264   1.115882e+02 -107.5821686 155.002775 #> 265   1.537605e+02  -71.3594284 169.512443 #> 266   6.540392e+01  101.6611481 120.882845 #> 267  -1.002264e+01  162.7700348 163.078317 #> 268  -5.574609e+01   71.3244095  90.525121 #> 269   3.746956e+01  -69.8262482  79.244386 #> 270  -4.291981e+01  -92.4217682 101.901389 #> 271  -6.443288e+01   64.2923584  91.022541 #> 272  -2.508442e+01   78.1816711  82.107258 #> 273   1.325527e+01    7.5322433  15.245883 #> 274   2.518362e+01  -74.3848648  78.532305 #> 275  -1.400455e+01 -126.9221115 127.692403 #> 276  -3.035607e+01   25.4475155  39.611453 #> 277  -6.843682e+01  144.9380951 160.283031 #> 278   3.188746e+01  179.7564392 182.562833 #> 279   1.099324e+02   13.7384176 110.787578 #> 280   9.053770e+01   12.5189409  91.399116 #> 281  -7.245327e+00    0.2799290   7.250732 #> 282   9.498380e+00  -24.9204941  26.669275 #> 283   5.887778e+01   -8.2312317  59.450372 #> 284   1.767286e+01  -42.3476982  45.887444 #> 285  -5.097213e+01 -127.9101257 137.692261 #> 286  -8.834760e+01 -208.5854950 226.524188 #> 287  -5.568506e+01  -19.3087406  58.937710 #> 288   2.085143e+01  116.1339874 117.991039 #> 289   4.038394e+01  115.4386673 122.298603 #> 290   3.174670e+00  -22.3885670  22.612529 #> 291  -4.120549e+01   33.3418732  53.005402 #> 292   2.366675e+01   90.2678375  93.318794 #> 293  -2.760313e+00   28.4063416  28.540140 #> 294   2.762549e+01  -37.6096649  46.665346 #> 295  -1.452012e+01 -172.0338287 172.645510 #> 296  -9.854109e+01  -74.4148712 123.482468 #> 297  -9.313708e+01   41.1816559 101.835384 #> 298  -5.469982e+01  103.0194321 116.640788 #> 299   7.748067e+01   87.3809814 116.784801 #> 300   3.497821e+01   -2.7475717  35.085960 #> 301   5.300639e+00  -14.6169777  15.548402 #> 302  -4.647025e+01  -76.5917740  89.586742 #> 303  -7.653239e+01  -48.6844711  90.704928 #> 304  -8.419600e+01   -6.3071051  84.431901 #> 305  -3.791636e+01   63.8460922  74.256138 #> 306   4.703150e+00    7.3035307   8.686840 #> 307   1.790562e+01 -142.4713287 143.592098 #> 308   8.383813e+01 -167.3107300 187.140888 #> 309   4.776479e+01  -39.7213326  62.122935 #> 310   3.238754e+01   91.1839676  96.765018 #> 311   1.989401e+01  123.8511124 125.438709 #> 312   5.419326e+00  116.7756271 116.901310 #> 313   5.406345e+01   33.9008102  63.813180 #> 314  -7.191940e+00    6.2102180   9.502147 #> 315  -3.009915e+01    7.8354516  31.102297 #> 316   9.461310e+00   63.9007072  64.597343 #> 317  -2.114411e+01   51.6686478  55.827614 #> 318  -1.008060e+02 -117.5235138 154.834198 #> 319  -1.560686e+02 -142.5826874 211.393558 #> 320  -7.332007e+01  -69.5782928 101.079035 #> 321   3.663582e+01   21.0789757  42.267084 #> 322   5.385767e+01  114.5787430 126.605438 #> 323   3.276965e+01   45.7742271  56.295027 #> 324   1.123602e+02  104.5343399 153.467416 #> 325   1.522832e+02   96.9855194 180.544647 #> 326   1.323008e+02   52.3257942 142.272631 #> 327   5.811001e+01 -100.9406662 116.472276 #> 328  -8.926819e+01 -144.5216522 169.868530 #> 329  -1.248693e+02   27.8989029 127.948016 #> 330  -3.502336e+01   46.7339935  58.401216 #> 331   3.637534e+01  -96.2394180 102.884357 #> 332   7.023663e+01 -146.3615112 162.341851 #> 333   3.995766e+01   13.7835321  42.268193 #> 334  -1.518618e+01  145.6266174 146.416297 #> 335  -4.819999e+00   81.8436966  81.985505 #> 336  -2.671523e+01   17.2741756  31.813527 #> 337  -3.198857e+01    3.2040107  32.148624 #> 338   5.066960e+00  -86.4182587  86.566677 #> 339  -5.341912e+01 -102.7575531 115.813284 #> 340  -5.099371e+01  -81.4809265  96.122315 #> 341  -3.642356e+01  111.7023087 117.490773 #> 342   6.451291e+01  113.4454498 130.505883 #> 343   1.494785e+02   53.6888847 158.827924 #> 344   1.392017e+02  -12.5242243 139.763984 #> 345   3.161116e-01  -32.1498566  32.151411 #> 346  -1.475537e+02    8.6515274 147.807080 #> 347  -1.409628e+02  -68.3503723 156.659758 #> 348  -1.928990e+01  -16.2717209  25.236268 #> 349   1.395154e+02   51.3612862 148.669202 #> 350   6.410757e+01   98.1143341 117.201547 #> 351  -4.881116e+01   -1.9904509  48.851724 #> 352  -9.698062e+01  -10.0774469  97.502799 #> 353  -1.200850e+02   43.9358063 127.870070 #> 354  -1.061971e+02   80.1823196 133.067751 #> 355  -1.128463e+02   29.3843098 116.609238 #> 356  -8.144404e+00  -38.0227242  38.885201 #> 357   7.893238e+01  -57.2937088  97.534044 #> 358   1.087476e+02 -108.2058411 153.409736 #> 359   7.003011e+01  -69.3987045  98.592068 #> 360   1.121306e+01  -74.9678116  75.801751 #> 361   4.000248e+01  -75.3296356  85.292159 #> 362   3.450135e+01  -76.7932739  84.187590 #> 363   6.044273e+01  -53.6734695  80.834185 #> 364   2.619139e+01   91.3501282  95.030705 #> 365  -8.745516e+01  163.4685822 185.392510 #> 366  -1.149634e+02   91.9848785 147.233827 #> 367  -6.754928e+01  -99.5811081 120.329972 #> 368   5.604247e+01 -118.5922089 131.167339 #> 369   4.222216e+01  118.6777420 125.964746 #> 370  -2.540946e+01  163.1311798 165.098221 #> 371   7.255486e+01   33.2616768  79.815708 #> 372   4.836124e+01 -147.7240753 155.438771 #> 373   3.982022e+00 -114.6119690 114.681123 #> 374  -5.565761e+00  -41.8823166  42.250516 #> 375   4.322592e+01   92.9548645 102.513837 #> 376   6.464175e+01  107.4561462 125.400872 #> 377  -4.568219e+01  -14.5108671  47.931486 #> 378  -3.975755e+01  -90.2443390  98.613909 #> 379   2.120724e+01 -109.6787643 111.710242 #> 380   5.162133e+01   25.7105598  57.669706 #> 381  -1.467440e+01   75.4960861  76.909019 #> 382  -1.025728e+02    3.3923819 102.628844 #> 383  -7.714974e+01    6.1841321  77.397198 #> 384   1.800171e+01   72.3399582  74.546167 #> 385   4.340702e+01  123.0041656 130.438470 #> 386   5.048168e+01   51.2343636  71.926075 #> 387   8.965429e+01 -108.2156296 140.529406 #> 388   1.494256e+02  -53.0680466 158.569284 #> 389   9.993816e+01   -5.3615279 100.081872 #> 390  -3.393816e+01   48.6641655  59.329583 #> 391  -1.235256e+02  -17.2994785 124.731113 #> 392  -1.728519e+02  -59.3925362 182.771052 #> 393  -7.161314e+01  -52.7384186  88.936962 #> 394  -2.504667e+01   42.7487640  49.545864 #> 395   5.390180e-01  155.1418610 155.142797 #> 396   1.381024e+01   96.5953445  97.577576 #> 397   2.350816e+01   -3.9506543  23.837807 #> 398   5.602363e+01 -128.9496613 140.593962 #> 399  -4.413950e+01 -140.4117737 147.186146 #> 400  -5.569236e+01  -79.6971741  97.227970 #> 401   6.733572e+01   48.4521446  82.956073 #> 402   2.855066e+01  154.4230957 157.040226 #> 403  -5.561331e+01  190.3031006 198.262730 #> 404  -1.431235e+02   15.7224569 143.984459 #> 405   2.637947e+00 -166.4693298 166.490230 #> 406   1.121081e+02 -143.4118347 182.030713 #> 407   3.806921e+01  -67.8335648  77.785971 #> 408  -4.619397e+01  -88.2398376  99.599957 #> 409  -2.623984e+01  -88.3565521  92.170546 #> 410   6.310497e+00   -6.6974440   9.202072 #> 411  -7.437817e+01  178.2868652 193.179500 #> 412  -1.209229e+02   86.5794449 148.722390 #> 413  -2.568823e+00  -40.5221519  40.603493 #> 414   1.554969e+02 -129.8703003 202.597080 #> 415   9.961335e+01 -100.0535583 141.186168 #> 416  -2.410157e+00   51.4843407  51.540724 #> 417  -8.306356e+01   85.4526291 119.170915 #> 418   2.238532e+01   76.6289291  79.831668 #> 419   4.774776e+01  -46.4155273  66.590166 #> 420   5.965284e+00   31.8926792  32.445764 #> 421  -6.973201e+01   93.0637512 116.290219 #> 422  -2.892353e+01   96.5564651 100.795444 #> 423   8.777171e+01   38.7444458  95.942714 #> 424   9.597993e+01  -22.6683445  98.620486 #> 425   5.229927e+01  -54.6816978  75.665724 #> 426  -4.715396e+01  -82.8754120  95.351086 #> 427  -1.175769e+02 -125.8136826 172.201658 #> 428  -1.225200e+02  -44.4826469 130.345097 #> 429   4.505286e+01   54.5894241  70.779697 #> 430   1.667373e+02  138.4808807 216.744707 #> 431   9.865926e+01  106.7095490 145.329201 #> 432  -1.753189e+01  -86.9038391  88.654636 #> 433  -8.949892e+01  -69.4442902 113.280920 #> 434  -8.906823e+01  -89.8712082 126.530564 #> 435   4.673037e+00   18.6335125  19.210546 #> 436   8.829584e+01   43.7699509  98.549295 #> 437   1.288305e+02   49.0968170 137.868794 #> 438  -1.281303e+01   51.3250771  52.900258 #> 439  -9.126456e+01   14.1212873  92.350590 #> 440  -2.348415e+01   60.9182358  65.288104 #> 441  -2.214902e+01   99.3796844 101.817978 #> 442  -1.321943e+01   69.5803528  70.824987 #> 443  -6.065195e+01  -52.8718643  80.461750 #> 444  -9.320169e+00  -41.2065964  42.247475 #> 445   9.460252e+01  -26.9050446  98.354042 #> 446   8.390987e+01  -58.7931900 102.457332 #> 447  -5.000809e+01  -72.4137039  88.003144 #> 448  -1.375764e+02  -31.7044239 141.182281 #> 449  -1.094092e+02    5.6733098 109.556158 #> 450   2.598830e+00  -51.7796822  51.844859 #> 451   5.510059e+01 -107.2537689 120.579625 #> 452   7.853204e+01   63.4845886 100.983042 #> 453   9.362263e+01  163.7278137 188.605390 #> 454   1.577194e+01   99.2257080 100.471366 #> 455  -3.994048e+00    7.2980595   8.319501 #> 456  -1.108959e+01 -103.7707214 104.361591 #> 457   3.593665e-03  -12.0603380  12.060339 #> 458  -4.003386e+01   33.0748672  51.929341 #> 459  -7.769379e+01   81.0646362 112.284459 #> 460  -1.308821e+02   38.1419449 136.326530 #> 461  -4.403879e+01  -57.4190865  72.362744 #> 462   1.081741e+02  -57.5986938 122.552993 #> 463   1.472138e+02  -44.0759659 153.670427 #> 464   1.322524e+02   60.1093254 145.271577 #> 465   1.282252e+01   -2.1086917  12.994753 #> 466   2.347661e+01  -12.7259798  26.703966 #> 467  -3.255332e+01   75.2909241  82.027079 #> 468  -6.522300e+01   41.5913315  77.355533 #> 469  -7.990137e+00  -13.9852571  16.106822 #> 470  -7.003680e+01 -113.4807892 133.353074 #> 471  -7.919068e+01  -39.4877663  88.489817 #> 472  -8.039981e+01   31.7299213  86.434469 #> 473   8.132256e+00    5.7269239   9.946418 #> 474   1.336230e+02  -32.7659264 137.581701 #> 475   1.248791e+02 -109.5916519 166.147854 #> 476   5.264868e+01 -116.8282089 128.143333 #> 477  -2.399907e+01  -54.0794678  59.165396 #> 478  -1.122099e+01  108.7359543 109.313395 #> 479  -4.460261e+00  113.1624603 113.250326 #> 480  -5.027876e+01  113.6764450 124.299186 #> 481  -1.293479e+02   57.6739769 141.623314 #> 482  -1.353655e+02  -11.0526628 135.815987 #> 483  -7.115482e+01  -85.1994781 111.004319 #> 484   1.232291e+01  -81.8600006  82.782328 #> 485   4.996025e+01   13.1552744  51.663216 #> 486   1.703656e+00   66.0351639  66.057137 #> 487   3.279651e+01   60.1419945  68.503069 #> 488   4.022391e+01   -2.3430200  40.292089 #> 489   1.166971e+02  -62.3592529 132.313594 #> 490   1.443342e+02  -36.5985756 148.901992 #> 491   1.164943e+02   17.6003494 117.816366 #> 492  -1.188914e+01   89.8060379  90.589603 #> 493  -1.959701e+02   71.4246292 208.580318 #> 494  -8.738054e+01  -21.0610237  89.882842 #> 495   6.500185e+01 -129.4949493 144.893695 #> 496   9.960120e+01 -143.2783813 174.496684 #> 497   1.783777e+01  -43.4370766  46.957063 #> 498  -8.914232e+01   60.3296661 107.638384 #> 499  -4.682864e+01   46.5178032  66.006272 #> 500  -7.845441e+01  -18.5459976  80.616673 #> 501  -7.101760e+01   57.4026184  91.315717 #> 502  -1.591548e+01   65.1804123  67.095371 #> 503  -6.531631e+01   19.5605278  68.182360 #> 504   1.489086e+01 -162.5624847 163.243068 #> 505   7.302256e+00 -211.4725342 211.598572 #> 506   7.570940e+01  -87.5229034 115.724554 #> 507   1.314570e+02   84.1609497 156.089745 #> 508   6.527323e+01  209.2078094 219.154061 #> 509   8.095759e+01  143.9719238 165.172776 #> 510   3.846080e+01  -40.6521988  55.962798 #> 511  -1.717433e+01  -95.4778671  97.010209 #> 512  -1.064716e+02  -16.1177921 107.684681 #> 513  -8.966702e+01   37.2815170  97.108625 #> 514   4.235819e+00   13.2888260  13.947583 #> 515  -4.121533e+00    1.5099337   4.389412 #> 516  -1.017846e+02   71.1576462 124.191465 #> 517  -2.020481e+01   26.0074081  32.933566 #> 518   8.532930e+01  -79.5076981 116.630028 #> 519  -1.386841e+01  -33.1844025  35.965780 #> 520   1.229927e+01    6.5317669  13.926093 #> 521   4.072324e+01  -22.7315922  46.638048 #> 522   3.792951e+01  -95.6342621 102.881289 #> 523  -7.593274e+01  -67.5122223 101.605517 #> 524  -9.616632e+01   12.0340834  96.916358 #> 525   1.016788e+02    8.4491491 102.029238 #> 526   1.116252e+02   68.1394806 130.779096 #> 527  -4.886648e+00  106.9251328 107.036738 #> 528  -1.358870e+02   67.4534607 151.707773 #> 529  -6.238451e+01  -62.5464706  88.339621 #> 530   8.119257e+01   -3.2381110  81.257111 #> 531   1.000994e+02  123.9203796 159.298941 #> 532   4.815971e+01   87.4584274  99.841547 #> 533  -2.861408e+01  -47.1509438  55.154121 #> 534   6.714826e-01 -130.5446167 130.546344 #> 535  -9.312294e+01  -11.9367199  93.884862 #> 536  -4.554549e+01   68.2768402  82.073863 #> 537   6.251682e+01   45.6948395  77.436241 #> 538   1.471359e+01  -77.9379807  79.314681 #> 539  -6.190017e+01  -82.7221909 103.317919 #> 540  -1.794027e+02  -48.0961800 185.737949 #> 541  -1.230676e+02   80.2803268 146.937299 #> 542   9.473618e+00   88.0677795  88.575861 #> 543   1.825889e+02   67.0734406 194.518742 #> 544   3.090326e+02  -24.4715824 309.999972 #> 545   1.547791e+02  -73.5843887 171.380385 #> 546  -6.872481e+01    5.6145868  68.953773 #> 547  -9.534832e+01   15.5828457  96.613287 #> 548   5.806208e+01   39.7352982  70.356938 #> 549   6.574722e+01   -2.2329164  65.785122 #> 550  -1.721023e+01   60.8547211  63.241513 #> 551  -6.618015e+01   22.9441452  70.044596 #> 552   1.453890e+01  -43.0346222  45.424203 #> 553   6.953555e+01  -98.5197296 120.587434 #> 554  -5.867159e+01 -111.2745667 125.795010 #> 555  -5.394102e+01  -24.4037952  59.204552 #> 556  -3.797477e+01    3.0495231  38.097021 #> 557   1.267909e+02   42.0851288 133.593033 #> 558   1.315261e+02    3.3469980 131.568687 #> 559  -4.732447e+01   12.2955017  48.895657 #> 560  -1.082962e+02   86.6619644 138.702459 #> 561  -1.121794e+02   66.1292038 130.220162 #> 562   1.538497e+00   56.0403671  56.061482 #> 563   1.581468e+00  -56.8320885  56.854088 #> 564   5.066179e+00   23.8258820  24.358547 #> 565   7.972853e+01   34.6904526  86.948641 #> 566   1.044064e+02   49.0705299 115.363007 #> 567   7.346870e+01   21.4346600  76.531661 #> 568  -7.036700e+01  -88.0223999 112.691868 #> 569  -1.609009e+02  -39.9627571 165.789384 #> 570  -1.911283e+02  -75.6502762 205.555292 #> 571  -9.909491e+01  -29.3587322 103.352486 #> 572   5.709932e+01  -25.3330956  62.466779 #> 573   1.912512e+02  -41.1436729 195.626705 #> 574   1.894078e+02  -55.3440781 197.327889 #> 575   1.612436e+01 -131.6517029 132.635463 #> 576  -1.122990e+02   -4.0409994 112.371679 #> 577  -1.585791e+02  134.7733307 208.113353 #> 578  -1.371966e+02  193.8281708 237.470574 #> 579  -2.926782e+01  123.7312927 127.145735 #> 580   5.200529e+01    0.1673889  52.005557 #> 581   6.798470e+01  -67.7155685  95.954771 #> 582  -4.762197e+00  -98.7060547  98.820867 #> 583  -5.396697e+01   21.4946842  58.090064 #> 584  -6.627126e+01   58.0996704  88.133149 #> 585   2.907643e+01  -23.6071548  37.453124 #> 586   8.974421e+01 -142.5879517 168.479515 #> 587   5.477478e+01  -98.4748993 112.683551 #> 588   9.146138e+01   52.2877388 105.352701 #> 589   7.651089e+01   81.8603439 112.049238 #> 590   1.558915e+01   26.3725796  30.635512 #> 591  -1.438838e+02  -56.7323151 154.664462 #> 592  -1.433219e+02   56.8294868 154.177667 #> 593  -5.909766e+01  115.2040558 129.477826 #> 594  -2.301436e+01  -21.7269859  31.650006 #> 595   5.815884e+01 -153.2042847 163.871912 #> 596   4.139122e+01 -118.5669861 125.584090 #> 597  -1.147283e+01   71.1542053  72.073205 #> 598  -4.291617e+01   42.1678772  60.165832 #> 599   5.444486e+01  -19.0758247  57.689948 #> 600   1.131547e+02   30.6894264 117.242556 #> 601   6.375075e+01   62.1586418  89.038501 #> 602   9.536366e+01   48.2890701 106.892762 #> 603   5.864040e+00  -35.5610008  36.041251 #> 604  -1.018849e+02   42.2699280 110.305410 #> 605  -8.066453e+01   32.8857002  87.110478 #> 606  -4.185318e+01  -79.6845322  90.007296 #> 607  -1.937538e+00 -125.4168625 125.431828 #> 608  -1.705853e+01 -106.4259796 107.784426 #> 609  -5.978405e+00   93.0667114  93.258534 #> 610   9.762326e+01   97.0671768 137.667490 #> 611   6.873447e+01  -17.8482437  71.013997 #> 612  -2.342872e+01  -31.1336861  38.964232 #> 613  -1.376179e+02   26.0625439 140.064071 #> 614  -1.934231e+02  107.4498978 221.264463 #> 615  -4.926471e+01   43.5380402  65.746271 #> 616   1.369107e+02  -14.3524532 137.660970 #> 617   2.031977e+02  -14.7356606 203.731344 #> 618   1.007429e+02  -53.3075371 113.977327 #> 619  -5.988102e+01  -97.0903702 114.071366 #> 620  -7.380715e+01  -89.4952393 116.003851 #> 621   7.637558e+00  -35.7719688  36.578218 #> 622   4.899500e+01  -11.4478569  50.314647 #> 623   1.478138e+01   51.7776108  53.846172 #> 624  -4.144234e+01  171.4118500 176.350475 #> 625  -5.690809e+01  184.9636688 193.520256 #> 626  -1.031683e+01   65.2214279  66.032353 #> 627   4.940079e+01 -138.1756134 146.741057 #> 628   8.307223e+01 -156.1310425 176.855583 #> 629   4.617537e+01    2.1991475  46.227704 #> 630   7.821050e+00   11.4593840  13.873943 #> 631  -1.164933e+02   -6.4797359 116.673405 #> 632  -1.805671e+02 -122.5505829 218.227209 #> 633  -5.659922e+01  -64.4415436  85.768203 #> 634   1.330817e+02   22.8394165 135.027303 #> 635   2.079458e+02   35.6099319 210.972757 #> 636   8.636446e+01   -5.9371815  86.568293 #> 637   7.081523e+00   -8.4516277  11.026240 #> 638  -9.267265e+01   76.2044144 119.980548 #> 639  -1.302575e+02  115.4233017 174.038941 #> 640  -8.249175e+01  119.1726227 144.937929 #> 641   3.037292e+01   91.4047852  96.318995 #> 642   7.660538e+01    4.1577582  76.718133 #> 643   2.835245e+01  -73.0396042  78.349507 #> 644  -2.062596e+01  -59.6015015  63.069559 #> 645   5.184433e+01    5.3643541  52.121121 #> 646   8.386115e+01   89.0139999 122.295483 #> 647  -2.849623e+01  -34.9407158  45.087566 #> 648  -9.738850e+01  -50.5931282 109.746004 #> 649  -1.288906e+01  -33.3820724  35.783943 #> 650   7.573370e+01  -71.5139160 104.162531 #> 651   1.831840e+00  -57.1774826  57.206819 #> 652  -1.608899e+01  -46.5291939  49.232323 #> 653   1.370951e+01  143.8746796 144.526379 #> 654  -1.040900e+01  198.6758118 198.948298 #> 655  -7.195120e+01    8.2288017  72.420223 #> 656  -1.130377e+01 -105.5770035 106.180407 #> 657   2.791084e+01 -143.0901031 145.786806 #> 658  -5.688698e+01  -40.1209602  69.611925 #> 659  -1.025062e+02   77.4627762 128.483493 #> 660  -1.399415e+01   68.9707794  70.376166 #> 661   2.397180e+01   12.3788252  26.979294 #> 662  -3.241420e+01 -107.7089615 112.480669 #> 663  -1.374351e+01  -93.0749435  94.084160 #> 664   1.389512e+01   28.2938881  31.521712 #> 665  -1.564345e+01   68.2543640  70.024108 #> 666  -1.306960e+01   65.6543503  66.942574 #> 667   6.707559e+01   50.9568214  84.236172 #> 668   1.661511e+02  -53.4731941 174.543857 #> 669   1.706223e+02 -145.4130859 224.180620 #> 670   4.854062e+01  -66.8509903  82.615048 #> 671  -5.547684e+01   34.0188980  65.076608 #> 672  -1.061553e+02   77.3519211 131.347878 #> 673  -2.898342e+01  -23.3662949  37.229318 #> 674   4.494844e+01   -8.1955967  45.689493 #> 675   1.016265e+01   97.1394882  97.669645 #> 676  -5.593533e+01  -28.7196560  62.877501 #> 677  -7.188850e+01 -196.9117126 209.623898 #> 678   2.516729e+01 -121.4559097 124.036004 #> 679   8.740979e+01  125.4350662 152.886975 #> 680   2.981641e+01  271.9767151 273.606198 #> 681  -1.079485e+02  -50.1229973 119.017641 #> 682  -2.471710e+02 -178.7821198 305.051733 #> 683  -1.598908e+02  -21.0718441 161.273334 #> 684   1.066968e+02  165.1162872 196.589909 #> 685   1.565245e+02  147.0077667 214.735207 #> 686   6.545737e+01  -30.4047852  72.174226 #> 687  -6.036499e+01  -53.1237869  80.411870 #> 688  -3.602339e+01  -87.6679001  94.780511 #> 689   4.682958e+01  -84.4228058  96.541286 #> 690  -1.807995e+01  -44.7068672  48.224356 #> 691   4.164009e+01   19.2953682  45.893446 #> 692   6.323687e+01   95.3649902 114.426324 #> 693   3.897704e+01  106.5350037 113.441249 #> 694  -4.493397e+00   40.7663345  41.013225 #> 695   7.892725e-01  -11.7344007  11.760915 #> 696  -2.304741e+01  -43.0691986  48.848120 #> 697  -1.345257e+02  -69.3738403 151.360183 #> 698  -6.399656e+01  -58.8833084  86.964384 #> 699  -1.807578e+01  -84.8317413  86.736142 #> 700   1.856324e+01  -38.1652336  42.440299 #> 701   3.028219e+01    4.1532230  30.565670 #> 702   9.003262e+01   62.3315849 109.503880 #> 703   1.593166e+02  106.4792175 191.623613 #> 704   4.250034e+01  107.9500732 116.015072 #> 705  -1.019917e+02   79.7839203 129.490435 #> 706  -7.048432e+01   42.2256203  82.164728 #> 707   3.213329e+01  -25.4388294  40.983928 #> 708   5.367003e+01 -173.1994934 181.324397 #> 709  -8.511082e+00 -150.4446564 150.685212 #> 710  -5.568969e+01  -10.4473763  56.661183 #> 711   3.441684e+01   67.7825699  76.019706 #> 712  -4.480290e+00   49.4484138  49.650968 #> 713  -6.607039e+01   76.8891068 101.376679 #> 714  -1.754611e+01   38.8173485  42.598739 #> 715   6.842686e+01   10.1194649  69.171088 #> 716   7.996288e+00  -57.7444572  58.295480 #> 717  -9.970280e+01   18.5438766 101.412638 #> 718  -9.038129e+01   35.0918808  96.954724 #> 719   1.671553e+01  -22.8124657  28.281045 #> 720   8.367184e+01   26.2754116  87.700476 #> 721   9.289603e+01  -50.4395103 105.706272 #> 722   6.074386e+01 -106.5914841 122.684805 #> 723   1.650581e+01  -19.7254009  25.720289 #> 724  -5.677119e+01  108.0029984 122.014816 #> 725  -1.382309e+02   48.5574913 146.511426 #> 726  -5.580257e+01 -121.6001205 133.792812 #> 727   2.897504e+01 -106.8719940 110.730195 #> 728  -7.323146e+00   40.4024925  41.060807 #> 729  -3.312314e+00   57.0634270  57.159480 #> 730   5.440860e+01   69.6712952  88.399008 #> 731   1.544385e+02   36.2473183 158.635166 #> 732   2.298676e+01  -30.8975582  38.510394 #> 733  -6.609422e+01  -90.5692444 112.121511 #> 734   8.903667e+01 -110.1002655 141.596603 #> 735   1.186290e+02   90.7667770 149.370174 #> 736  -8.982115e+01  148.2295990 173.320089 #> 737  -2.877567e+02  -17.7745686 288.305123 #> 738  -1.146538e+02 -197.7063446 228.546033 #> 739   1.482851e+02  -39.1767578 153.373020 #> 740   1.519887e+02  149.1422577 212.941239 #> 741   2.829223e+01  124.4129333 127.589295 #> 742   5.244936e+00   38.8628998  39.215231 #> 743  -2.558686e+01   45.5086517  52.208474 #> 744  -9.124446e+01   72.0129776 116.238637 #> 745  -1.578871e+02 -107.9688568 191.273616 #> 746  -7.707381e+01  -82.2871246 112.745477 #> 747   9.740737e+01   55.1505547 111.936499 #> 748   1.178217e+02  101.6759338 155.627596 #> 749   2.803592e+01  -53.4536781  60.359825 #> 750  -5.482690e+01 -134.1469421 144.918569 #> 751  -7.622809e+00  -60.3966713  60.875817 #> 752   7.034856e+01  107.8648224 128.777872 #> 753   2.759586e+01  131.5903473 134.452783 #> 754   3.496671e+01  -75.9809189  83.640723 #> 755  -1.058985e+01 -170.5518341 170.880289 #> 756   2.953379e+01 -122.4974899 126.007459 #> 757  -2.983251e+01   18.9828491  35.359966 #> 758  -4.916851e+01  141.0785370 149.401123 #> 759  -2.213470e+01  132.3223877 134.160945 #> 760  -3.085068e-01   63.6835823  63.684330 #> 761   6.122696e+01   -0.8133193  61.232357 #> 762  -6.192348e+01  -57.0058136  84.167570 #> 763  -1.126620e+01   50.9877281  52.217581 #> 764   1.527667e+01   49.9719048  52.254836 #> 765   2.550493e+01   53.4106255  59.187804 #> 766  -4.520279e+01    2.0478697  45.249158 #> 767  -9.785250e+01  -82.4732361 127.972445 #> 768  -1.663992e+01 -113.0339966 114.252226 #> 769   3.643344e+01 -202.2257233 205.481480 #> 770   1.236871e+02 -128.7930450 178.566944 #> 771   8.010239e+01    4.2148919  80.213201 #> 772   4.798526e+01  134.2324524 142.551521 #> 773  -8.936810e-01   15.6653185  15.690789 #> 774  -1.153076e+00   26.4517441  26.476864 #> 775  -4.242599e+01   94.5168610 103.602132 #> 776  -9.147618e+01  142.9851837 169.742907 #> 777  -4.691989e+01   32.5496101  57.104757 #> 778  -1.392776e+01 -147.6772461 148.332571 #> 779  -4.539817e+00  -65.0445938  65.202831 #> 780  -2.877871e+01   -2.4838102  28.885698 #> 781   9.235214e+01   84.8222885 125.394333 #> 782   1.112303e+02   15.8196764 112.349642 #> 783  -2.779390e+01   -2.2276504  27.883032 #> 784  -1.040949e+02   29.0322208 108.067628 #> 785  -6.590548e+01   -0.4580450  65.907071 #> 786   3.321906e+01  -57.6259804  66.515107 #> 787   5.852657e+01  -23.6009979  63.105990 #> 788   7.574173e+01   12.4895563  76.764566 #> 789  -3.517686e+01  -34.5211716  49.286129 #> 790  -2.703833e+01  -44.9200211  52.429759 #> 791   6.921561e+01   23.0151958  72.941761 #> 792   1.098723e+02   70.1038818 130.332183 #> 793   5.853128e+01    9.9335060  59.368218 #> 794  -1.414832e+02   60.1315727 153.731265 #> 795  -3.674909e+01  220.2041321 223.249536 #> 796   1.290397e+01  122.1850281 122.864533 #> 797   1.701760e+01  -82.1988220  83.941915 #> 798   8.709734e+01 -224.4754028 240.780299 #> 799   9.434448e+00 -140.9251709 141.240620 #> 800  -9.588444e+00   40.5589447  41.676927 #> 801  -7.124131e+01   35.6578560  79.666850 #> 802  -6.374900e+01   20.7328854  67.035723 #> 803   2.619284e+01  -27.0368481  37.643808 #> 804   4.016644e+01   16.9637394  43.601735 #> 805  -2.614285e+01   46.0783882  52.977982 #> 806  -9.090321e+01  -26.0150051  94.552497 #> 807  -1.601896e+02 -107.3109512 192.811708 #> 808  -1.270974e+02  -95.9983368 159.277854 #> 809  -3.441019e+01  -86.3393860  92.943803 #> 810   9.440387e+01  -56.8129501 110.180769 #> 811   2.236777e+02   75.0647202 235.937367 #> 812   1.178218e+02  172.7035217 209.065730 #> 813   4.611620e-01  108.3363190 108.337300 #> 814  -2.237067e+01  -99.2934189 101.782268 #> 815   7.169881e+01 -163.8683777 178.867448 #> 816  -1.801186e+00  -42.9401703  42.977930 #> 817  -1.464374e+02    2.8505638 146.465150 #> 818  -5.174761e+01   -0.0433282  51.747626 #> 819   6.438335e+01   35.9451904  73.737867 #> 820   4.505501e+01   93.7615204 104.024884 #> 821  -9.631248e+01  206.5853729 227.933348 #> 822  -4.597303e+01  148.3220673 155.283468 #> 823   1.327110e+02   78.2876358 154.081677 #> 824   1.584589e+02  -82.0757446 178.453491 #> 825   2.556601e+01 -187.1475372 188.885737 #> 826  -1.672628e+02  -74.8284225 183.237899 #> 827  -1.418025e+02   84.3077164 164.971903 #> 828   3.749918e+00  184.2775879 184.315738 #> 829   7.201454e+01   69.6851120 100.210324 #> 830  -1.058063e+01  -87.1883392  87.827993 #> 831  -1.395194e+02 -141.6657410 198.833719 #> 832  -1.395691e+02  -92.8726654 167.645090 #> 833  -4.198456e+01  -44.7880974  61.389549 #> 834   5.102768e+01   44.5109367  67.712976 #> 835   8.966049e+01  127.4371262 155.817922 #> 836   3.513811e+01  132.6726074 137.246886 #> 837  -3.874660e+01  -11.5989084  40.445442 #> 838  -6.476112e+01 -195.0466156 205.516874 #> 839  -3.776265e+01 -187.3270111 191.095335 #> 840   7.585118e+01   19.1321926  78.226865 #> 841   9.255133e+01  175.6761780 198.564519 #> 842   3.993585e+01  138.9606934 144.585429 #> 843  -6.397542e+00  -11.9558363  13.559888 #> 844  -2.471494e+01  -73.1423111  77.205090 #> 845   9.229259e+01  -16.6600227  93.784217 #> 846   1.345452e+02  -24.9495525 136.838965 #> 847  -5.062568e+01 -111.1715317 122.155922 #> 848  -2.391955e+02 -122.5939560 268.781972 #> 849  -1.450365e+02  -18.1161976 146.163548 #> 850   7.463573e+01   88.5284348 115.791949 #> 851   1.459736e+02   34.9961052 150.109982 #> 852   7.124388e+00  -66.1801224  66.562493 #> 853   3.178614e+01   -8.5601082  32.918599 #> 854   7.698024e+01   41.7319336  87.564328 #> 855   6.357847e+01    3.3564494  63.667008 #> 856   7.246803e+01  -46.7385979  86.232889 #> 857  -7.735280e+01   -6.6148643  77.635120 #> 858  -1.149004e+02   58.7248154 129.037619 #> 859  -7.110027e+01   17.3411465  73.184446 #> 860   1.354946e+02   -9.4633551 135.824671 #> 861   1.516405e+02  -11.9037333 152.106959 #> 862   4.094693e+01   15.5015869  43.782994 #> 863  -1.118093e+02   -6.5871739 112.003144 #> 864  -2.012688e+02  -26.5016861 203.006111 #> 865  -7.166594e+01  -64.1836700  96.205771 #> 866   1.482851e+02   34.2343483 152.185581 #> 867   1.815857e+02   60.5407753 191.411989 #> 868  -7.215111e+01   12.0937128  73.157640 #> 869  -1.831782e+02   23.3610668 184.661794 #> 870  -7.494941e+01  -72.9858093 104.615211 #> 871   3.972813e+01 -107.0618896 114.195326 #> 872   7.543478e+01 -111.1721497 134.348999 #> 873   1.118740e+02   74.6948318 134.518065 #> 874   6.919546e+01  141.2589569 157.296231 #> 875  -4.945079e+01  -47.2420540  68.390002 #> 876  -1.043300e+02 -171.6940765 200.906957 #> 877   4.076939e-02  -93.9420547  93.942064 #> 878   1.406201e+02    4.8475795 140.703663 #> 879   2.910049e+01   99.4820099 103.650899 #> 880  -5.993083e+01   66.3456726  89.406112 #> 881  -3.767810e+01   14.9770088  40.545658 #> 882  -3.941269e+01   -0.4628718  39.415411 #> 883   7.168900e+00    4.8751774   8.669514 #> 884  -1.715420e+00   -2.5112808   3.041249 #> 885   3.075247e+01  -36.9990692  48.110763 #> 886   6.139113e+01  -40.5647697  73.582411 #> 887  -2.206813e+01   25.6944618  33.870455 #> 888  -7.727836e+01  120.4255600 143.088295 #> 889  -1.081633e+02  114.1258392 157.238661 #> 890   2.383978e+00   32.3820839  32.469720 #> 891   1.268767e+02  -53.8770485 137.842082 #> 892   4.486521e+01  -19.9227982  49.089766 #> 893  -7.352500e+01   37.9188347  82.727044 #> 894  -1.181046e+02    4.5778122 118.193255 #> 895   3.218595e+01  -85.9029083  91.734644 #> 896   7.860751e+01  -57.9162636  97.639303 #> 897  -1.248060e+01   55.6945152  57.075778 #> 898  -5.508042e+01   59.8758888  81.357080 #> 899  -1.688630e+01    3.1799116  17.183100 #> 900   9.476871e+01   -6.4427404  94.987464 #> 901   7.219846e+01   -5.6699190  72.420750 #> 902  -4.797197e+01    0.9572620  47.981523 #> 903  -1.005056e+01   12.8327980  16.300135 #> 904   1.032603e+02   44.9438438 112.617222 #> 905   1.189930e+02    4.5472884 119.079867 #> 906  -4.442927e+01  -47.9363441  65.359416 #> 907  -9.768587e+01   16.7097340  99.104719 #> 908   4.547457e+01   78.3960571  90.630448 #> 909   1.661420e+02    4.6545486 166.207216 #> 910   2.465508e+01  -19.3669052  31.352034 #> 911  -1.708458e+02   34.4733200 174.289099 #> 912  -1.707279e+02   34.6597023 174.210526 #> 913  -5.369510e+01  -18.4078426  56.762776 #> 914   3.545082e+01 -115.1316147 120.465968 #> 915  -3.901313e+01 -142.4158783 147.662813 #> 916  -8.096169e+01  -57.2700882  99.169842 #> 917   4.992603e+01   83.7101059  97.467895 #> 918   2.367888e+02  166.7196503 289.593460 #> 919   2.027451e+02   50.8171463 209.016662 #> 920  -1.138923e+02 -115.4136353 162.147342 #> 921  -2.355452e+02 -145.1713715 276.687992 #> 922  -1.626031e+02  -86.6688385 184.258695 #> 923  -1.586512e+00   62.7080460  62.728112 #> 924   1.428510e+02  123.3558655 188.740756 #> 925   6.932664e+01   26.1728344  74.102631 #> 926   6.529319e+01  -49.7110367  82.063316 #> 927  -5.462029e+01  -93.8123245 108.554722 #> 928  -3.725376e+01   -5.0769711  37.598113 #> 929  -1.350148e+00   59.0089760  59.024420 #> 930  -4.597263e+01   64.5832977  79.274746 #> 931   4.140003e+01   88.9479446  98.110648 #> 932  -1.279776e+01   46.0500908  47.795328 #> 933  -5.362469e+01   69.4693756  87.758772 #> 934  -1.224115e+02  -15.9156370 123.441796 #> 935  -2.448929e+01  -48.6269951  54.445475 #> 936   8.842008e+01  -29.4286976  93.188836 #> 937   6.797895e+01 -110.3776016 129.631604 #> 938   1.924219e+01 -142.5458221 143.838706 #> 939  -3.040794e+01 -123.3772430 127.069221 #> 940  -2.065112e+01  224.0783539 225.027949 #> 941  -6.241170e+01  199.7118378 209.236800 #> 942  -5.811828e+01  -45.8387413  74.019760 #> 943   4.495883e+00 -159.2885895 159.352024 #> 944   8.541526e+01 -146.5348053 169.611957 #> 945   1.726601e+02   99.3712616 199.213819 #> 946   7.795827e+01   87.0147324 116.829170 #> 947  -3.009357e+01   84.2138443  89.429273 #> 948   2.758305e+01   59.7101440  65.773292 #> 949  -1.089125e+01  -18.7152710  21.653651 #> 950  -7.665881e+01   -5.3573184  76.845777 #> 951  -9.490040e+01  -70.1376724 118.005842 #> 952  -2.251971e+01   -8.8868170  24.209768 #> 953   2.249284e+00   54.9077377  54.953789 #> 954  -5.204224e+01   72.7678986  89.462628 #> 955  -1.010029e+02  -22.4002399 103.456990 #> 956  -1.036398e+02  -67.3768387 123.615722 #> 957  -8.451363e+01  -36.5369225  92.073346 #> 958   8.457207e+01   -2.4565170  84.607736 #> 959   1.948396e+02   20.0943623 195.873084 #> 960   1.531706e+02  -21.5317860 154.676623 #> 961   3.455317e+00   14.7096748  15.110054 #> 962  -1.187972e+01   54.4115105  55.693270 #> 963   1.555015e+01   35.3499527  38.618989 #> 964  -9.890112e+00  -77.7236328  78.350350 #> 965  -2.204554e+01  -48.0999413  52.911342 #> 966  -8.646821e+01   12.9761591  87.436444 #> 967  -6.274525e+01   47.0191917  78.407725 #> 968  -2.434960e+01  -89.8457260  93.086828 #> 969   5.716151e+01 -103.6253891 118.345509 #> 970   1.535614e+02  -25.0184078 155.586114 #> 971   1.304081e+02   31.2571526 134.101757 #> 972   5.344363e+01   31.2388992  61.903881 #> 973  -1.836301e+01  -39.9208565  43.941723 #> 974  -1.054439e+02   26.3000278 108.674275 #> 975  -1.505524e+02   84.2556458 172.525512 #> 976  -1.292766e+02  165.8721313 210.299791 #> 977  -5.240113e+01   48.8690186  71.652349 #> 978  -1.015651e+01  -44.2694473  45.419584 #> 979   9.947254e+01  -88.5041809 133.145697 #> 980   2.017315e+02 -122.3038254 235.910658 #> 981   2.048510e+02   -5.3947649 204.921991 #> 982   5.086765e+01   38.4265747  63.750443 #> 983  -8.354934e+01  152.8998108 174.237896 #> 984  -1.361895e+02   47.1110992 144.107692 #> 985  -1.191748e+02  -85.3892593 146.608203 #> 986  -7.551231e+01 -109.9552231 133.387633 #> 987  -2.063241e+01  -71.2107849  74.139545 #> 988   4.936845e+01   78.8717041  93.048316 #> 989   6.689607e+01   17.7613487  69.213799 #> 990   5.192602e+01  -82.1692352  97.201311 #> 991  -8.123584e-01  -86.3327408  86.336563 #> 992   5.271795e+01  -45.1110153  69.384331 #> 993   6.335422e+01   13.2860241  64.732336 #> 994   3.253377e+00   66.4929657  66.572509 #> 995  -4.323817e+01  134.5808868 141.356125 #> 996   4.266310e+01   96.2644119 105.294716 #> 997  -1.582138e+01  -44.9278793  47.632241 #> 998  -2.086428e+02  -68.5518188 219.615952 #> 999  -5.204487e+02   48.5835152 522.711430 #> 1000            NA           NA         NA"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Differentiate x y compute change amplitude via algorithm proposed Nyström  Holmqvist (2010) doi:10.3758/BRM.42.1.188 . Note components amplitude smoothed independently via Savitzky-Golay filter, components may (probably ) add amplitude. Note filtering sensitive presence NA.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"nh_sg_filter_order\" = 2)) #> # A tibble: 1,000 × 3 #>         x     y   amp #>     <dbl> <dbl> <dbl> #>  1   NA    NA     NA  #>  2   NA    NA     NA  #>  3   NA    NA     NA  #>  4   NA    NA     NA  #>  5   NA    NA     NA  #>  6   NA    NA     NA  #>  7   NA    NA     NA  #>  8  -55.2 -35.4  414. #>  9 -147.  -75.9  265. #> 10  217.  313.   208. #> # … with 990 more rows"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from samples using votes from selected methods. — extract_saccades","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Extract saccades samples using votes selected methods. method votes whether given sample belongs saccade. Next, saccades identified via majority vote using  vote_threshold parameter, well minimum duration minimal temporal separation criteria. Please note units gaze samples must  degrees visual angle. units important methods use specific (e.g., physiologically plausible) velocity acceleration thresholds. default, ensemble includes methods proposed Engbert & Kliegl (2003) (\"ek\"), Otero-Millan et al. (\"om\"), Nyström & Holmqvist (2010) (\"nh\"),  see Implemented Methods vignette. However, can extended via custom methods, see Using Custom Methods vignette. default, function returns table identified saccades can return matrix methods' votes per sample instead (return_votes = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"extract_saccades(   x,   y,   sample_rate,   trial = NULL,   methods = list(method_ek, method_om, method_nh),   velocity_function = saccadr::diff_ek,   options = NULL,   binocular = \"merge\",   vote_threshold = ifelse(length(methods) == 1, 1, (length(methods) - 1)),   minimal_duration_ms = 12,   minimal_separation_ms = 12,   return_votes = FALSE )"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"x Horizontal coordinate, either vector monocular data two-column matrix binocular data. y Vertical coordinate, either vector monocular data two-column matrix binocular data. sample_rate Sampling rate Hz. assumed common entire time series. time series contains chunks (trials) recorded using different acquisition rate (e.g., SR Research Eyelink allows set different acquisition rate recording / trial), need split time series analyze separately. trial Optional vector trial ID. omitted, samples assumed belong single trial. Velocity, acceleration, saccades computed respecting trial borders. methods list saccade detection methods, can include external functions implement sample classification (see Using Custom Methods vignette). Package methods include Engbert & Kliegl (2003) (method_ek), Otero-Millan et al. (2014) (method_om),  Nyström Holmqvist (2010) (method_nh). Defaults list internally implemented methods: list(method_ek, method_om, method_nh). velocity_function handle function compute velocity acceleration. Defaults method suggested Engbert & Kliegl (2003) diff_ek. package also implements method proposed Nyström Holmqvist (2010) diff_nh. See vignette \"Velocity computation\" details information implement custom method. options named list options saccade detection (see method_ek, method_om, method_nh) velocity (diff_ek, diff_nh) computation. See documentation specific method details. binocular Specifies binocular data treated. Options \"cyclopean\" (binocular data converted average cyclopean image saccades extracted), \"monocular\" (saccades extracted independently eye), \"merge\" (default, sample votes obtained eyes methods averaged. way binocular saccades, .e., eye movements sufficient temporal  overlap eyes, detected.). vote_threshold Value 1 N (N number used methods) defining vote threshold saccade. default, one method \\(threshold = N-1\\) must agree sample considered saccade. Threshold 1 applied single method used. minimal_duration_ms Minimal duration saccade milliseconds. Shorter candidate saccades discarded, minimal_separation_ms Minimal time separation saccades milliseconds. Saccades separated shorter interval \"saccade\" votes, merged including period. return_votes Logical. Whether function return extracted microsaccades (FALSE, default) votes per sample (TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"data.frame saccade properties (see details), return_votes = FALSE. Alternatively, returns votes per sample (return_votes = TRUE). monocular processing (monocular input, cyclopean merged binocular data) matrix nrow(x) rows length(methods) columns 0/1 votes sample method. binocular processing, function returns two element list  similar matrices per eye.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Variables describe saccade Trial Trial index. Eye \"Monocular\" monocular inputs. \"Cyclopean\" binocular data averaged applying algorithms. \"Binocular\" binocular data votes averaged applying algorithms. \"Left\" \"Right\" binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"# Single trial data(single_trial) saccades <- extract_saccades(single_trial$x, single_trial$y, 500)  # Multiple trials data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x,                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)    # binocular saccades                              data(\"single_trial_binocular\")  saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                          single_trial_binocular[, c('yL', 'yR')],                                          sample_rate = 1000)                                            # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                         single_trial_binocular[, c('yL', 'yR')],                                         sample_rate = 1000,                                         binocular = \"cyclopean\")   # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                        single_trial_binocular[, c('yL', 'yR')],                                        sample_rate = 1000,                                        binocular = \"monocular\")                               # Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x,                              single_trial$y,                              500,                              methods = list(method_ek, method_om))  #  Alternative velocity computation method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh) #> Warning: no non-missing arguments to max; returning -Inf  # A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)  # Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"Smooths signal using Savitzky-Golay shifts filtered signal back","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(x, sg_order)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"x vector float sgOrder integer, order filter","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"vector float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(rnorm(1000), 2) #>    [1]            NA            NA            NA            NA            NA #>    [6] -1.2502320599 -0.2144232930  0.6010283185  1.0728469125  1.4948580267 #>   [11]  1.6740120398  0.3888651993 -0.6710559760 -1.0852203367 -0.4162566115 #>   [16]  0.6012350302  0.6351636603  0.1039697335  0.2022966209  0.8356091915 #>   [21]  0.5203564359 -0.3639038264 -0.3730020687 -0.4190107200  0.5605264483 #>   [26]  0.3371482613  0.2541252976 -0.0599684406 -0.1520633062 -0.9499300662 #>   [31] -1.5052441732 -1.3912406391 -1.0226029935 -1.0226418182  0.1656337088 #>   [36] -0.2196803884 -0.3896510708 -1.4267435965 -0.9860982851 -1.0426994112 #>   [41] -0.9598443751 -0.2975396282  0.4293249563  1.0274028526  0.0277850775 #>   [46] -0.1848674605 -0.1104541814 -0.0316946986 -0.1442758081  0.9488482002 #>   [51]  0.9233942248  0.5226388719  0.0555642564  0.2002593996  0.1720784223 #>   [56]  0.4515332190  1.2949715073  0.3051980592  0.4240072603  0.4069763080 #>   [61]  0.4158803318  0.3389791672 -0.2959510061 -0.2865019711 -0.5097185212 #>   [66]  0.5097813517 -0.2697946272 -0.6538845577 -0.7642400641 -0.4413166578 #>   [71] -0.3643554299  0.6397177807 -0.4303834653 -0.7122993982 -0.1121687184 #>   [76]  1.5222733791  0.0646937916 -0.0228146897  0.6862648393  1.7665331567 #>   [81]  0.3629540068 -0.6606827695 -1.1144328307 -0.2878244458  0.3752708449 #>   [86]  1.2185939245  0.8236496668  0.6988525805 -0.3153087042  0.4130538065 #>   [91]  0.2756914291  0.3231592072 -0.4870773450 -0.1248313632  0.0591739651 #>   [96] -0.3892144823 -0.0228745674  0.7810704140  0.6982649142  0.3856692591 #>  [101]  0.0029721834  0.0221419306 -0.4130421079  0.2017313859  0.3288630294 #>  [106] -0.0938697358 -0.6951539149 -0.6019345203 -0.2028698786 -0.2020401580 #>  [111] -1.0509702760 -1.2278259051 -1.1745543010 -0.5200768703 -0.3747679918 #>  [116] -0.2319241378  0.3535469117  0.4785077775  0.9134657261  0.0738115078 #>  [121] -0.0606588719 -0.3183778654 -0.3055977676 -0.2408772486  0.4346904043 #>  [126]  0.7900316839  1.1337398935  1.3529723666  0.3808774324 -1.4264434330 #>  [131] -0.5202155202  0.8964923700  1.2252083650  0.9536264593  0.2065651559 #>  [136] -0.1683900300 -0.8167295267 -0.4315696297 -1.2292242621 -0.4449343263 #>  [141] -0.2603807002  0.3398992142  0.1972500336  0.1920476534 -0.5925665270 #>  [146] -0.6975166466 -0.3693212844 -0.3133571393 -0.5277300026 -0.2170408764 #>  [151] -0.2604899708  0.0609708873 -0.2662630068  0.1618748689  0.3137018657 #>  [156]  1.1080526467  0.3725267934  0.4162760726  0.0999885828  0.5114906020 #>  [161] -0.6124910713 -0.3528481910 -0.3852034528  0.6476658785  0.5796829562 #>  [166]  1.2552376567  1.0164922880  0.2208762189 -0.6322460100 -0.1433271970 #>  [171]  0.6821481814  0.4125896527 -1.2037156378 -1.2322357240 -0.3029217598 #>  [176]  0.7373502618 -0.4936823832 -0.1451722576  0.0714795271  0.9865212772 #>  [181]  0.5632341362  1.3238020737  0.4626160264 -0.0398404256  0.2253429072 #>  [186]  0.6132408349  0.2658750982 -0.3929073977 -1.4586475449 -1.4546206752 #>  [191] -0.0084627483  0.6502853724 -0.4012367715 -0.9031990150 -1.3921728144 #>  [196] -0.7068946971 -0.0766759391  0.6275664106 -0.3546467540 -0.0299581923 #>  [201]  0.3257584795  0.0952544162 -0.5604696430 -0.6334941707  0.0477373638 #>  [206]  0.9770182806  1.6521256757  0.1219234863 -0.6160698359  0.3660266413 #>  [211]  0.8278737902 -0.9177782196 -0.5001504118 -0.5548719643 -0.8652183090 #>  [216] -0.3513580418  0.8741478474  0.8615074993  0.6480869128  0.8738391777 #>  [221] -0.1354787284 -0.6550412234 -0.4955228213  0.4827328219  0.6263728238 #>  [226]  0.4289956941 -0.1354931836 -0.0393402684 -0.5397773959 -1.4453809747 #>  [231] -1.6262223522 -0.6846590705  0.0027772664  0.2334287763  1.1007326903 #>  [236]  1.0317451819  0.2002464879 -0.7103953302 -0.4205158566 -0.7864088498 #>  [241] -0.7285240204 -0.5954328344 -0.1269413083 -0.7166387937 -0.0970841915 #>  [246]  0.1927423041  0.5329241598 -0.7099838217 -0.8573770450 -0.6088030441 #>  [251]  0.0832329548 -0.0773120094  0.2754765941  0.0135838050 -0.7116439734 #>  [256] -0.2740375578  0.5524497326  0.6471124302 -0.1578092615 -0.2209253199 #>  [261] -0.5184876366 -0.4773959371 -0.7824037633 -0.6770819820 -0.8652107044 #>  [266] -0.6679029707 -0.0122327930  0.5093886734  0.4698085480 -0.0386050390 #>  [271]  0.3774119133  0.4136620856  0.5955580612  0.1870728929 -1.2047723209 #>  [276] -1.4544190996 -1.1526406342  0.1525404994 -0.7116247353 -0.6092037307 #>  [281] -0.3863726888  0.2072669166  0.2505869698  0.0103340288 -0.1614067369 #>  [286] -1.5824499671 -1.7817267193 -0.1088775760  1.3005899414  0.9831218330 #>  [291] -0.1552561327  0.3922798170  0.5247539146  0.3494243962  0.1472526614 #>  [296]  0.3528417339  1.1934013899  1.1612421947  0.6111898810 -0.0989251400 #>  [301]  0.5580583130  1.0279214303  1.4994105761  1.2655628274  0.6270799961 #>  [306]  0.1367250089 -0.7326884783 -0.7139359016 -1.3902163818  0.5054068219 #>  [311]  0.8306296453  1.3387696558  0.5152833810  0.5635278660 -0.4684892793 #>  [316]  0.0126016557  0.9130412685  0.6044051480 -0.6385801935 -0.8178328278 #>  [321]  0.1682154605  0.9359473719  1.0310987500  0.9311675950  0.4819973472 #>  [326]  0.0900872478  0.1776269879 -0.3143639740 -0.7821713631 -1.0071180856 #>  [331] -0.5026034194 -0.8593792414 -0.6551049188 -0.0960201043  0.1942608680 #>  [336]  0.7543579879  0.5990462535 -0.0539983643 -0.5396673096 -0.4840575949 #>  [341]  0.2907127486  0.5377625921  0.7752214520  1.3520642485  1.8985042345 #>  [346]  0.8456100350 -0.3797905156 -0.7497657668  0.3019562632  0.4384208485 #>  [351] -0.1724268996 -0.4828653213  0.0130754751  0.8550238858  0.5962038192 #>  [356]  0.8409506828 -0.0120083703 -0.3188671157  0.0375540782 -0.1051446341 #>  [361] -0.1322807203  0.0555133203  0.6597978054  0.3735825506 -0.2553783804 #>  [366]  0.0303313615 -0.6732581158 -0.4549183472 -0.8559149019 -0.2813987046 #>  [371] -0.6273251444 -0.2973750256  0.2592182731  0.0168353695 -0.8797393247 #>  [376] -1.6628340718 -1.1234506691 -1.4724868153 -1.0356309387 -0.3329439504 #>  [381]  0.5457274701 -0.3335108835 -1.0796058002 -1.1687224941  0.2340637040 #>  [386]  0.4572539736  0.6837376447 -0.0873474398 -0.2068351169 -0.4366389431 #>  [391]  0.6850387389  0.0938638179 -1.1913132456 -0.8834717601  0.0969989249 #>  [396]  1.3326511490  1.7026312368  2.3059851236  1.6783937764  1.0450921795 #>  [401]  0.0433466575 -0.7398805279 -0.0102872688  0.5253278089  0.7209293589 #>  [406]  0.3318261335 -0.1350620136  0.0860823615  0.0663576634  0.4302129111 #>  [411] -0.3056248360 -0.5155457457 -0.7572432539 -0.2031859281 -0.2398168413 #>  [416] -0.5195259633 -1.0183431667  0.1349325986  0.4940619021 -0.0740557153 #>  [421] -0.6503625513  0.0210142534  0.9222363466  0.1286430124  0.1580189225 #>  [426]  0.1960387467  0.2863790772  0.3933645399 -0.2235688829  0.1029138510 #>  [431] -0.0409080859  1.4017622445  0.7672692100  0.8547513158  0.1112257776 #>  [436] -0.1755222832 -0.8575940048 -0.0432491993  0.4730964058 -1.1014827866 #>  [441] -1.7511344346 -1.4430709117 -0.4056408616 -1.1100118713 -0.7477042705 #>  [446] -1.2172348817 -0.7192457724 -0.4811845663 -0.3019420572 -0.5893098590 #>  [451] -0.3378261362 -0.6006024245 -0.5992911383 -0.5153961125 -0.4691385739 #>  [456] -0.2547128597  0.6964435845  0.5650159590  0.1523413634 -0.0695429309 #>  [461]  0.5467348314 -0.1798091401 -0.1407208316  0.4318197761  0.4363515232 #>  [466] -1.4700988557 -2.3069875731 -0.8355041705  0.7200113753  1.2628694262 #>  [471]  0.1043925971 -0.6172008202 -0.9466798106  0.1358919806  0.1500397188 #>  [476] -0.1205563300 -0.8653790651 -0.0512580781 -0.0576251104  0.2183852532 #>  [481]  0.1654983194  0.6672034936 -0.5291995313 -0.3501541322  1.2879371151 #>  [486]  1.4204526165  0.2507394285 -0.4551102962  0.0231835624  0.1140426098 #>  [491]  0.1375808608  0.2896833976 -0.3123934618 -0.5854329341  0.0425211907 #>  [496] -0.1022888361 -0.2845615346 -0.3876909511 -0.1373804563  0.0968285766 #>  [501] -0.0224188544  0.8731278676  0.7889644725  0.6434496212 -0.3773005131 #>  [506] -0.2926752709 -0.8029095178 -1.0781542107 -1.1362124951 -0.1852034968 #>  [511] -0.1494037650  0.3068569071 -0.3299246715 -0.2786340656 -0.5745233833 #>  [516]  0.1060335917  0.2114436833  0.7658534377  0.4536230600 -0.5803928498 #>  [521] -0.9031308763 -0.0053260932  0.2889074307 -0.7810548941 -1.1565464832 #>  [526] -0.6688839504 -0.0849294349 -0.2432562359 -0.2931109150 -0.7096333279 #>  [531] -0.2942959139 -0.2479557871 -0.3617395523 -0.5285597349 -1.4895843915 #>  [536] -1.3867251016 -0.1899753226  1.2381876120  0.5078980751 -0.0827984425 #>  [541]  0.3851082588 -0.4536006760 -1.2329045209 -0.8898221128  0.3743931029 #>  [546]  0.2476231151  0.4651250768 -0.3602378753 -1.1137916957 -1.5048033624 #>  [551] -0.8016854261 -0.7089699234 -0.1776925563  0.3640400107  0.1235683313 #>  [556] -0.3449809466  0.3812762638  0.2250592572 -0.2345297953 -0.3258947439 #>  [561]  0.3281075352  0.7079228038  0.8175221553  0.6553923193 -0.5479837491 #>  [566] -0.2144040366 -0.1471359881 -0.2765199222 -0.5941787025 -0.1078858890 #>  [571]  0.3781397047  0.5253933844  1.4745169503  1.3989354478  0.8013706800 #>  [576] -0.2311222495  0.5019459294  0.7086591941  0.3903978111 -0.0890107437 #>  [581]  0.1336823548  0.5667454322  0.8507708000  0.4553623304 -0.6750627419 #>  [586] -0.9042361014 -0.3167340571  0.3913613835  0.6873038256  0.3913602308 #>  [591] -0.0165090265 -0.7843689702 -0.5582859221  0.0698419451  1.3981725415 #>  [596]  0.6057842707 -0.5096582610 -0.9087150349 -0.0395321072  0.4528086984 #>  [601]  0.6806003594  0.7086137749  0.3623311675  0.4123480585  0.9641401585 #>  [606]  1.0187837503 -0.7323052610 -1.5266929586 -0.7711750388  0.2586561143 #>  [611] -0.1347058083  0.2907054441  0.2408357494  0.6858172420  0.6399083141 #>  [616]  0.5746461198 -0.0718713674  0.2404623226  0.6093689474  0.5721541096 #>  [621]  0.0645563343 -0.8268513730 -0.8561035285 -0.2357754622  0.1511286243 #>  [626] -0.3734731344 -0.6427855416 -0.4710973528  0.0484838912 -0.2371651045 #>  [631] -0.3453968383 -0.1885324218  1.0205658557  0.6682234046  0.4538447674 #>  [636]  0.6538470427  0.9030053480  0.0849790671 -1.0075517965 -0.6543863577 #>  [641]  0.3611092782  0.6657954869  0.0587536379  0.2557448343  1.2388440260 #>  [646]  0.6986219253  0.9337496645  0.5101448527 -0.1568223427 -1.0006793748 #>  [651] -0.7742536948 -0.6154468980 -0.2680819767  0.5570774723  0.6777766485 #>  [656]  1.2918173265  1.9463788041  1.1073959138 -0.3483752135 -1.9630235168 #>  [661] -2.4872236538 -1.7387702063 -0.2384580367  0.5983875281  0.6872806293 #>  [666]  1.1732336159  1.3076473938  0.6947220491 -0.0331325246  0.4080981922 #>  [671]  0.6334040704 -0.3456061568 -1.3383099966 -0.8496935062 -0.3489908986 #>  [676] -0.5769928885 -0.1739999634  0.7003437959  0.9829330486  0.5002240193 #>  [681]  0.9943953100  0.5824200304 -0.3676515346 -1.4745154027  0.2401743754 #>  [686]  1.1689357389  0.5205288715 -0.9186722196 -0.2368655459  0.1870837147 #>  [691] -1.1508799237 -2.0608813122 -2.2368144870 -1.1371707920 -0.3288043427 #>  [696]  0.5414136790  0.8947563149  0.1117061983 -1.3004212554 -1.4111613058 #>  [701] -0.1987554066  0.8344866177  1.0730952274  1.8169308912  0.7066213317 #>  [706]  0.7162735949  0.4377018294  0.8582797755  0.3029230168  0.8752956426 #>  [711]  1.2674233806  0.3883163116 -0.4884561255 -0.7386780165  0.0678562969 #>  [716]  0.1068691298  0.1508414514  0.7969389059  1.1217644144  0.2434919339 #>  [721] -0.4258054037  0.2208909745 -0.0601299199 -1.3882226359 -1.1581885864 #>  [726] -0.1847187035  0.5570963828  0.6256893905  1.0674146769  0.6286228323 #>  [731] -0.5962188721 -0.5760177344  0.7360271045  0.9544838500  0.2354879114 #>  [736] -0.2927430314 -0.1575789796 -0.7894642611 -0.4892006075 -0.4853448323 #>  [741] -0.3280259530 -0.5880905928  0.5673981356  1.1971480357  0.1919627695 #>  [746] -0.9294158104 -0.7831588254 -0.8995797882 -1.4490862828 -0.1951821466 #>  [751]  0.5804710434  0.4842996985 -0.6866685149 -0.4484876214  0.0470217792 #>  [756]  0.8744937636 -0.5524640624 -0.6062821711  0.0530558405  0.8669496398 #>  [761]  0.0501957799  0.3278358877  0.4903323252  1.0482365981  0.7737772261 #>  [766] -0.1185144002 -0.8533279827 -0.5607097545 -0.0185924178 -0.6396853647 #>  [771] -0.7765294807  0.0137815378  1.5647558861  1.2491636747  0.0747847071 #>  [776] -0.0653378029 -0.0001139301 -0.3811833260 -1.4715409561 -1.7257836246 #>  [781] -1.5449477080 -0.3764949995  0.3585970497  0.3350724302 -0.3220091825 #>  [786] -0.0363793351  0.7916820257  1.2578290184 -0.4136848709 -1.1102691629 #>  [791] -0.3471368473  1.9143000912  1.1852484732  0.3167415906 -1.0706482350 #>  [796] -0.7109627404 -0.6264634218  0.3053920041  0.2016056748 -0.2295466972 #>  [801] -0.2681209554  0.4792747330  0.6430385492  0.5155279006  0.0483636989 #>  [806] -0.3619470695 -0.6294404523 -0.5984598318 -0.6386563442 -1.0293239659 #>  [811] -0.2843306929  0.1088668491 -0.2324756388 -0.8828900503 -1.2865232544 #>  [816] -0.6235653532 -0.7043666265 -0.4902679735 -0.8702117484  0.5074572262 #>  [821]  0.3702902421 -0.2060328445 -0.7513296224 -0.4872289264  0.0405573948 #>  [826]  0.7517605618  0.5320226190  0.7652123432  1.0970205642  1.5513962590 #>  [831]  0.2638986116  0.3414955299 -0.1379013659  0.1846726548  0.1091138491 #>  [836]  0.6238056803  0.6483444177  0.5782853723  0.2344605200 -0.6411756654 #>  [841] -1.4598191309 -1.5229816882  0.0050295515  0.9179860287  0.3936086632 #>  [846] -1.3540869186 -1.6354033511 -2.1378546306 -0.8446507535  0.2242307533 #>  [851]  0.9000054074 -0.3274464162 -0.2996124298 -0.1617265809 -0.3417232469 #>  [856] -0.5130413682  0.3736332627  0.4392688856  0.0883077203 -0.9769846555 #>  [861] -0.5984488429 -0.7697070847 -0.3319876684 -0.5124907571 -0.1576116511 #>  [866]  0.3041077230  0.4603936544  0.1421863331 -0.4691065055 -0.0324825675 #>  [871] -0.1591346170 -0.0906578658 -1.2831770833 -1.6167918547 -0.8789394612 #>  [876]  0.1528552819  0.4314680554  0.3862947410  0.0119469268  0.6344149808 #>  [881]  0.2562823523 -0.0098712662 -1.3749563294  0.0416339496 -0.6223750331 #>  [886] -0.6607834247 -1.4942006017  0.1101010888  1.3215063819  1.0239758169 #>  [891] -0.6263548857 -0.8028389011 -0.5901711376 -1.2217695733 -0.7274367508 #>  [896]  0.0565835910  0.1269324874 -0.1010834632 -0.2497576747 -0.5413559113 #>  [901] -1.3312427897 -0.8301247139 -0.9901743707 -0.6149588689 -0.2145191818 #>  [906]  0.4333405463  0.5497766634  0.4215040577  0.4745634854  0.1493959491 #>  [911] -0.3219290070  0.0447565353 -0.6213222059 -1.1777259198 -1.5197020012 #>  [916] -0.2825601787  0.4224083612  0.5661176928  0.1285808762  0.0269366497 #>  [921]  0.0165575130 -0.2306733972 -0.4705778985  0.1909061022  0.1857050845 #>  [926] -0.8870167710 -1.2447812862 -0.9718269082 -0.4069713129 -0.2637466022 #>  [931]  0.3873796523  0.3629049395  0.3000761330 -0.2591532964 -0.5128349866 #>  [936] -0.0473960035  0.4298406418  0.6489219010 -0.7604101622 -1.1169188463 #>  [941] -1.0251521437  0.3605102486 -0.0201407711  0.1205889280 -0.4250867545 #>  [946]  0.1691902260  0.4641610867  0.0366381037 -0.5164863442 -0.6256323887 #>  [951] -0.5163770298  0.5905223645  1.1906460236  0.8249699668  0.8728936816 #>  [956]  2.0106809656  1.0659291981 -0.2392353965 -0.3753072522  0.4875219327 #>  [961]  1.0584344328  0.0296965299 -0.4102777216 -0.5118689462 -0.1577087003 #>  [966] -0.2194644594  0.7049354799  0.5117781597 -1.0411835614 -1.2283594749 #>  [971] -1.0793070203 -0.4525152757 -0.6583447321 -0.5544468229 -0.7937822240 #>  [976] -0.3803321747 -0.1230746934 -0.3456512034 -0.4580754357 -0.5803400331 #>  [981] -0.2819545570 -0.2866255684 -0.3090592736 -0.1448003832  0.8937374054 #>  [986]  1.6330417358  1.2149207880  1.0411012832  0.8415361454  0.7009503481 #>  [991]  0.7878691500  0.7639013116 -0.9432681663 -0.9766595722  0.2453000927 #>  [996]  0.1890265720 -0.4235615519  0.3686054838  0.8674266601  0.1545210666"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts inputs to matrix — input_to_matrix","title":"Converts inputs to matrix — input_to_matrix","text":"Converts inputs (vector, matrix, data.frame/tibble)  matrix preserving number columns","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(x)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts inputs to matrix — input_to_matrix","text":"x vector, matrix, data.frame/tibble","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts inputs to matrix — input_to_matrix","text":"matrix","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(1:5) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 #> [5,]    5"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Extract saccades using algorithm proposed Engbert Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"method_ek(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Method options, please refer Engbert Kliegl (2003) details parameters rationale default values. ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults 6. ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator, per formula #2 Engbert Kliegl (2003). Can replaced mad, sd, etc. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults 12. ek_minimal_separation_ms minimal required time gap saccades. Defaults 12.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Extract saccades using algorithm proposed Nyström Holmqvist (2010) doi:10.3758/BRM.42.1.188 .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"method_nh(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze y coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details  information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2. nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Extract saccades using algorithm proposed Otero-Millan et al. (2014) doi:10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"method_om(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Method options, please refer Otero-Millan et al. (2014) details parameters rationale default values. om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults 30. om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults 5. om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s.  Defaults 3. om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults 0.05.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"A monocular multi-trial recording — monocular_ten_trials","title":"A monocular multi-trial recording — monocular_ten_trials","text":"monocular recording, 10 trials, sampling rate 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A monocular multi-trial recording — monocular_ten_trials","text":"","code":"monocular_ten_trials"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A monocular multi-trial recording — monocular_ten_trials","text":"data frame 14353 rows 4 variables: trial Trial index. x X coordinate degrees visual angle. y Y coordinate degrees visual angle. time Sample time milliseconds.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract value for a named list or use default if key is missing — option_or_default","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Extract value named list use default key missing","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(options, key, default)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"options Named list key String key default Default value returned, key missing.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Value list default value","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(list(\"A\" = 25), \"A\", 20) #> [1] 25 option_or_default(list(\"A\" = 25), \"B\", 20) #> [1] 20"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/saccadr.html","id":null,"dir":"Reference","previous_headings":"","what":"saccadr — saccadr","title":"saccadr — saccadr","text":"Extract (Micro)Saccades Gaze Samples.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard deviation via median estimator. — sd_via_median_estimator","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"Compute standard deviation via median estimator. Please refer formula #2 Engbert & Kliegl (2003). Falls back mean estimator, computed standard deviation smaller .Machine$double.eps. Raises error results using mean estimator still smaller .Machine$double.eps.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(x, na.rm = FALSE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"x Numeric values na.rm Whether exclude NA values, defaults FALSE.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(rnorm(100)) #> [1] 0.7853838"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial monocular samples recorded at 500 Hz. — single_trial","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"single trial monocular samples recorded 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"","code":"single_trial"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"data frame 1006 rows 2 variables: x X coordinate degrees visual angle. y Y coordinate degrees visual angle.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial binocular recording. — single_trial_binocular","title":"A single trial binocular recording. — single_trial_binocular","text":"single trial binocular recording sampled 1000 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial binocular recording. — single_trial_binocular","text":"","code":"single_trial_binocular"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial binocular recording. — single_trial_binocular","text":"data frame 2000 rows 6 variables: trial Trial index. time_rel Sample time milliseconds relative trial start. xL X coordinate left eye degrees visual angle. xR X coordinate right eye degrees visual angle. yL Y coordinate left eye degrees visual angle. yR Y coordinate right eye degrees visual angle.","code":""}]
