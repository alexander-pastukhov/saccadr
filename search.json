[{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Engbert and Kliegl (2003)","title":"Implemented Methods","text":"algorithm labels sample saccade velocity, measured units standard deviation (see ), exceeds predefined threshold (defaults \\(6\\)) duration super-threshold period exceeds minimal duration (defaults \\(12\\) milliseconds). method makes assumptions velocity units degrees per second can used data (e.g., samples encode gaze screen position units). standard deviation computed following formula #2 Engbert Kliegl (2003) However, value smaller .Machine$double.eps, recomputed via mean estimator monocular version algorithm implemented binocular saccades computed using overlapping votes two eyes. method details rationale default parameter values refer Engbert Kliegl (2003). Parameters: ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults \\(6\\). ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator() implements formula #2 Engbert Kliegl (2003). Can replaced sd(), mad(), custom function. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults \\(12\\). ek_minimal_separation_ms minimal required time gap saccades. Defaults \\(12\\).","code":"sqrt(median(x^2) - median(x)^2) sqrt(mean(x^2) - mean(x)^2)"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"otero-millan2014","dir":"Articles","previous_headings":"","what":"Otero-Millan et al. (2014)","title":"Implemented Methods","text":"algorithm: Detect local velocity peaks. Filter based minimal inter-peak interval (defaults \\(30\\) ms) maximal allowed saccade rate (defaults \\(5\\) Hz). Identify onset offset potential saccade using absolute velocity threshold degrees per second (defaults \\(3\\)). Compute peak velocity peak acceleration peak velocity reached. Rotate velocity peak acceleration via PCA retain components predefined threshold explained variance (defaults \\(0.05\\)). Perform cluster analysis remaining components \\(2\\), \\(3\\), \\(4\\) picking solution smallest silhouette. Saccades identified cluster highest average peak velocity. method details rationale default parameter values refer Otero-Millan et al. (2014). Parameters: om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults \\(30\\) om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults \\(5\\). om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s. Defaults \\(3\\). om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults \\(0.05\\).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Nyström and Holmqvist (2010)","title":"Implemented Methods","text":"algorithm: Identify physiologically implausible velocity acceleration peaks (defaults \\(1000 \\deg/s\\) \\(100000 \\deg/s^2\\)). Identify noise onset/offset samples around implausible velocity/acceleration median velocity. Exclude samples analysis. Identify velocity threshold \\(PT = mean(V_{subthreshold}) + 6 \\cdot std(V_{subthreshold})\\) via iterative method starting arbitrary \\(PT\\) value (defaults \\(100 \\deg/s\\)). Stop threshold change \\(1 \\deg/s\\). Identify saccades periods peaks peaks threshold \\(PT\\) adjacent samples \\(PT_{onset/offset} = mean(V_{subthreshold}) + 3 \\cdot std(V_{subthreshold})\\). method details rationale default parameter values refer Nyström Holmqvist (2010). Parameters: nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/methods.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Implemented Methods","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/using_custom_methods.html","id":"example-implementation","dir":"Articles","previous_headings":"","what":"Example implementation","title":"Using Custom Methods","text":"example implementation overly simple custom method labels sample saccade velocity exceeds predefined threshold. expects threshold parameter \"st_velocity_threshold\" member list uses default threshold \\(50 \\deg / s\\) (arbitrary number!) threshold provided. implemented method, can pass alongside internally implemented methods:","code":"simple_threshold_method <- function(x,                                     y,                                     vel,                                     acc,                                     sample_rate,                                     trial,                                     options) {    # obtain method parameters or use defaults   velocity_threshold <- saccadr::option_or_default(options, \"st_velocity_threshold\", 50)    # vote on each sample     sample_vote <- vel[['amp']] > velocity_threshold      # return votes   sample_vote } data(\"single_trial\") saccades <- saccadr::extract_saccades(x = single_trial$x,                                       y = single_trial$y,                                       sample_rate = 500,                                       methods = list(\"ek\", \"om\", \"nh\", simple_threshold_method),                                       options = list(\"st_velocity_threshold\" = 70))"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-engbertkliegl2003","dir":"Articles","previous_headings":"","what":"Differentiation following Engbert and Kliegl (2003)","title":"Velocity computation","text":"method computes velocity predefined time window controlled via ek_velocity_time_window defaults 20 ms. width window converted samples based sampling_rate parameter ensured odd number equal larger 3. .e., window three samples long, velocity computed based one sample one sample current, five-samples window - two samples , etc. code always starts requested window size iteratively reduces two samples accommodate trial limits missing values. NA velocity returned even smallest window (three samples wide) used. general, horizontal vertical velocity components computed \\[v_x[] = \\frac{\\sum_{j=1}^{(N-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(N-1)/2}2j\\cdot\\Delta t}\\] \\(\\) index sample, \\(\\Delta t = \\frac{1}{sample~rate}\\) duration single sampling frame, \\(N\\) odd integer width moving average used compute velocity. Engbert Kliegl (2003), \\(N=5\\) \\(\\Delta t = 4\\) (250 Hz sampling rate) translate 20 ms moving average window (default value used method implementation). derivation shows equivalence formula formula 1 Engbert Kliegl (2003). \\(N=5\\): \\[\\frac{\\sum_{j=1}^{(5-1)/2}x[+j] - x[-j]}{\\sum_{j=1}^{(5-1)/2}2j\\cdot\\Delta t}=\\] \\[\\frac{\\sum_{j=1}^{2}x[+j] - x[-j]}{\\sum_{j=1}^{2}2j\\cdot\\Delta t}=\\] \\[\\frac{x[+1] - x[-1]+x[+2] - x[-2]}{2\\Delta t + 4\\Delta t}=\\] \\[\\frac{x[+2] + x[+1] - x[-1] - x[-2]}{6\\Delta t}\\]","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"differentiation-following-nystromholmqvist2010","dir":"Articles","previous_headings":"","what":"Differentiation following Nyström and Holmqvist (2010)","title":"Velocity computation","text":"Horizontal vertical components velocity computed adjacent samples, amplitude computed components filtered using Savitzky-Golay filter. Filter order controlled via nh_sg_filter_order option defaults 2.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"comparing-two-methods","dir":"Articles","previous_headings":"","what":"Comparing two methods","title":"Velocity computation","text":"two methods produce comparable different velocity values. However, minor effect saccade detection, see vignette Using sample votes.","code":"# computing velocity using two methods vel_ek <- saccadr::diff_ek(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_nh <- saccadr::diff_nh(x = single_trial$x,                            y = single_trial$y,                            trial = rep(1, nrow(single_trial)),                            sample_rate = 500) vel_comparison <- na.omit(data.frame(EK = vel_ek[['amp']], NH = vel_nh[['amp']])) %>%   dplyr::filter(NH > 0) %>% # values can be negative due to filtering   dplyr::mutate(logEK = log(EK), logNH = log(NH))   # plotting amplitude comparison pearson_rho <- cor(vel_comparison[['EK']], vel_comparison[['NH']])  ggplot(data = vel_comparison, aes(x = EK, y = NH)) +   geom_abline() +   geom_point() +   scale_x_log10() +   scale_y_log10() +   labs(subtitle = sprintf(\"Pearson's ρ = %.2f\\nPearson's ρ for log transformed velocities = %.2f\", pearson_rho, cor(vel_comparison[['logEK']], vel_comparison[['logNH']])),        x = \"Vek\",        y = \"Vnh\") # plotting  ggplot(data = NULL, aes(x = vel_comparison[['EK']] - vel_comparison[['NH']])) +   geom_histogram(bins = 50) +   xlab(\"Vek - Vnh\") +   labs(title = \"Difference in velocities computed via two methods\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"implementing-and-using-a-custom-differentiation-function","dir":"Articles","previous_headings":"","what":"Implementing and using a custom differentiation function","title":"Velocity computation","text":"custom function follows Arguments passed function (vectors length): x, y vectors values, either x y gaze coordinates velocity components (acceleration). sample_rate scalar value Hz. trial vector trial index per sample. options named list method-specific options. See example use . See also option_or_default() function. function must return data.frame three columns: x (horizontal component), y (vertical component), amp (amplitude). example simple velocity function respects trial borders similar function uses optional custom_velocity_lag parameter can different 1","code":"diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # compute vertical and horizontal components   df <- data.frame(x = ..., # differentiate values of x                     y = ...) # differentiate values of y      # compute amplitude   df[['amp']] = sqrt(df[['x']]^2 + df[['y']]^2))    # return a data.frame with columns x, y, and amp   return(df) } library(dplyr)  diff_custom <- function(x, y,  trial, sample_rate, options=NULL) {   # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x)) / delta_t_s,            y = (y - lag(y)) / delta_t_s,            amp = sqrt(x^2 + y^2)) } diff_lag_n <- function(x, y,  trial, sample_rate, options=NULL) {   # obtain lag or use default   lag_n <- saccadr::option_or_default(options, \"custom_velocity_lag\", 1)      # computing frame time step    delta_t_s <- 1 / sample_rate      # --- differentiate (compute velocity or acceleration) and filter   data.frame(trial = trial,              x = x,              y = y) %>%      # compute velocity and acceleration for each trial     group_by(trial) %>%     mutate(x = (x - lag(x, lag_n)) / delta_t_s,            y = (y - lag(y, lag_n)) / delta_t_s,            amp = sqrt(x^2 + y^2)) }"},{"path":"https://alexander-pastukhov.github.io/saccadr/articles/velocity_computation.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Velocity computation","text":"Engbert, Ralf, Reinhold Kliegl. 2003. “Microsaccades uncover orientation covert attention.” Vision Research 43 (9): 1035–45. https://doi.org/10.1016/S0042-6989(03)00084-1. Nyström, Marcus, Kenneth Holmqvist. 2010. “adaptive algorithm fixation, saccade, glissade detection eyetracking data.” Behavior Research Methods 42 (1): 188–204. https://doi.org/10.3758/BRM.42.1.188. Otero-Millan, J., Jose L Alba Castro, Stephen L Macknik, S. Martinez-Conde. 2014. “Unsupervised clustering method detect microsaccades.” Journal Vision 14 (2): 18–18. https://doi.org/10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alexander Pastukhov. Author, maintainer.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pastukhov (2022). saccadr: Extract Saccades via Ensemble Methods Approach. https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/.","code":"@Manual{,   title = {saccadr: Extract Saccades via an Ensemble of Methods Approach},   author = {Alexander Pastukhov},   year = {2022},   note = {https://github.com/alexander-pastukhov/saccadr/, https://alexander-pastukhov.github.io/saccadr/}, }"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccadr","dir":"","previous_headings":"","what":"Extract Saccades via an Ensemble of Methods Approach","title":"Extract Saccades via an Ensemble of Methods Approach","text":"saccadr modular extendable R package extract (micro)saccades gaze samples via ensemble methods approach. Although agreement general definition saccade, specific details harder agree upon. Therefore, numerous algorithms extract saccades based various heuristics, differ assumptions velocity, acceleration, etc. package uses methods label individual samples applies majority vote approach identify saccades. package includes three methods (see Implemented Methods vignette) can extended via custom methods (see Using custom methods vignette). also uses modular approach compute velocity acceleration noisy samples (see Velocity computation vignette). Finally, can obtain methods votes per gaze sample instead saccades (see Using sample votes vignette). extract_saccades() function uses several methods label individual samples belonging saccade, classifies sample potential saccade proportion votes exceeds preset threshold, identifies saccades based minimal saccade duration minimal time saccades. binocular data, 1) samples can averaged velocity computation, 2) votes can merged function returns binocular saccades, 3) saccades extracted eye separately. Currently, library implements saccade detection using following saccade detection methods. using package, please cite package individual methods. method_ek : Engbert, R., & Kliegl, R. (2003). Microsaccades uncover orientation covert attention. Vision Research, 43(9), 1035–1045. https://doi.org/10.1016/S0042-6989(03)00084-1 method_om : Otero-Millan, J., Castro, J. L. ., Macknik, S. L., & Martinez-Conde, S. (2014). Unsupervised clustering method detect microsaccades. Journal Vision, 14(2), 18–18. https://doi.org/10.1167/14.2.18 method_nh : Nyström, M., & Holmqvist, K. (2010). adaptive algorithm fixation, saccade, glissade detection eye tracking data. Behavior Research Methods, 42(1), 188–204. https://doi.org/10.3758/BRM.42.1.188","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extract Saccades via an Ensemble of Methods Approach","text":"install github","code":"library(\"devtools\") install_github(\"alexander-pastukhov/saccadr\", dependencies=TRUE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Extract Saccades via an Ensemble of Methods Approach","text":"main function extract_saccades(). Minimally, takes x y gaze samples, sampling rate returning table extracted saccades. Note function expects units gaze samples degrees visual angle, methods use physiologically plausible velocity acceleration thresholds.","code":"data(\"single_trial\") saccades <- extract_saccades(single_trial$x, single_trial$y, sample_rate = 500)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"multiple-trials","dir":"","previous_headings":"Usage","what":"Multiple trials","title":"Extract Saccades via an Ensemble of Methods Approach","text":"recording spans multiple trials, need specify via trial parameter. way velocity computation saccade detection methods respect trial boundaries.","code":"data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"binocular-data","dir":"","previous_headings":"Usage","what":"Binocular data","title":"Extract Saccades via an Ensemble of Methods Approach","text":"three ways binocular data can treated based value binocular parameter: binocular = \"merge\" (default): sample votes obtained eyes methods averaged. way binocular saccades (.e., eye movements sufficient temporal overlap eyes) detected. Eye = \"Binocular\" saccade description. binocular = \"cyclopean\": binocular data converted average cyclopean image voting saccades detection. Eye = \"Cyclopean\" saccade description. binocular = \"monocular\": saccades extracted independently eye. Eye = \"Left\" Eye = \"Right\" saccade description.","code":"data(\"single_trial_binocular\") # binocular saccades only saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000)  # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"cyclopean\")  # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                       single_trial_binocular[, c('yL', 'yR')],                                       sample_rate = 1000,                                       binocular = \"monocular\")"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-methods","dir":"","previous_headings":"Usage","what":"Specifying methods","title":"Extract Saccades via an Ensemble of Methods Approach","text":"default, implemented methods used saccade detection , necessary, can use subset even single method. Note can also supply saccade detection function, please see Using custom methods vignette. Parameters individual methods passed via options argument, named list <parameter-name> = <value> pairs. can find information specific parameters default values Implemented Methods vignette. example modifying velocity threshold, measured units standard deviation, Engbert & Kliegl (2003) method. default value 6 can make stricter","code":"# Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = list(method_ek, method_om)) saccades <- extract_saccades(single_trial$x, single_trial$y, 500, options = list(\"ek_velocity_threshold\" = 8))"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"altering-voting-threshold","dir":"","previous_headings":"Usage","what":"Altering voting threshold","title":"Extract Saccades via an Ensemble of Methods Approach","text":"voting threshold number methods must label sample potential saccade. default, one method must agree sample considered saccade (vote_threshold = length(methods) - 1) 1, single method passed function. can make voting less restrictive via vote_threshold parameter.","code":"# A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-velocity-computation-method","dir":"","previous_headings":"Usage","what":"Specifying velocity computation method","title":"Extract Saccades via an Ensemble of Methods Approach","text":"gaze samples tend noisy, different methods use various approaches computing velocity noisy samples. Methods Engbert & Kliegl (2003) Otero-Millan et al. (2014) used approach based averaging multiple samples compute velocity, whereas Nyström & Holmqvist (2010) compute simple derivative filter . default, package uses former approach (velocity_function = diff_ek) can also use latter (velocity_function = diff_nh) implement custom method (see Velocity computation vignette). Acceleration computed way velocity samples. example using Nyström & Holmqvist (2010) velocity computation","code":"saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh)"},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"specifying-saccade-temporal-properties","dir":"","previous_headings":"Usage","what":"Specifying saccade temporal properties","title":"Extract Saccades via an Ensemble of Methods Approach","text":"votes , saccades detection based minimal duration (minimal_duration_ms parameter, defaults 12 ms) minimal time saccades (minimal_separation_ms, defaults 12 ms).","code":"# Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"saccade-description-table","dir":"","previous_headings":"Return values","what":"Saccade description table","title":"Extract Saccades via an Ensemble of Methods Approach","text":"extract_saccades() function returns table following columns: Trial Trial index. Eye “Monocular” monocular inputs. “Cyclopean” binocular data averaged applying algorithms. “Binocular” binocular data votes averaged applying algorithms. “Left” “Right” binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/index.html","id":"sample-votes","dir":"","previous_headings":"Return values","what":"Sample votes","title":"Extract Saccades via an Ensemble of Methods Approach","text":"Alternatively, use parameter return_votes = TRUE function can return votes per sample method (eye, binocular data). Please see Using sample votes vignette details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Compute velocity via Engbert & Kliegl (2003) algorithm. See formula #1 manuscript.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"","code":"compute_velocity_ek(x, trial, time_window_in_samples, delta_t)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"x Vector coordinates trial Vector trial labels, velocity computed within trials. time_window_in_samples Width window velocity computation samples. delta_t Duration single frame (1 / sampling rate).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/compute_velocity_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute velocity via Engbert & Kliegl (2003) algorithm. — compute_velocity_ek","text":"Velocity vector","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Differentiate x y compute change amplitude via algorithm proposed Engbert & Kliegl (2003)","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"Method options, please refer Engbert & Kliegl (2003) details parameters rationale default values. ek_velocity_time_window Time window velocity computation milliseconds. Defaults 20 ms.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Engbert & Kliegl (2003) — diff_ek","text":"","code":"diff_ek(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"ek_velocity_time_window\" = 20)) #>                  x            y        amp #> 1               NA           NA         NA #> 2      81.23400116   29.7885246  86.523518 #> 3      82.62613678   72.6371078 110.014671 #> 4      37.78002930   81.8952179  90.189563 #> 5     -12.97281933    1.3843070  13.046469 #> 6     -41.10834122  -34.0462036  53.376396 #> 7     -65.75794983   95.1735306 115.681065 #> 8     -77.98235321   87.9767303 117.563398 #> 9      33.57256317  -62.4384842  70.892040 #> 10     50.12451935 -280.9343567 285.370952 #> 11     56.39548492 -180.3163147 188.929680 #> 12    -89.45162201  -15.4551764  90.776953 #> 13    -98.67984009   83.3005524 129.138270 #> 14    -10.91753101  166.9354858 167.292107 #> 15    -38.19412613  110.9730988 117.361919 #> 16     69.16354370   84.2092590 108.971533 #> 17    115.41073608   25.1074028 118.110201 #> 18    110.38632202  -63.5112381 127.353121 #> 19     17.36399460 -146.5067139 147.532117 #> 20     -7.18644524  -34.3935699  35.136344 #> 21    -10.96754169   55.1600761  56.239852 #> 22    -48.32478714   53.1248894  71.816007 #> 23    -58.84643936  -51.3316422  78.088673 #> 24     35.57845306  -78.0476151  85.774452 #> 25     47.39848709   -7.4912648  47.986828 #> 26    -50.61706924   12.5277567  52.144342 #> 27     -9.30105972   69.1936111  69.815940 #> 28     83.98712921   35.7657127  91.285399 #> 29    131.26510620  -31.1744232 134.916169 #> 30    -21.55198860  -97.8328171 100.178582 #> 31   -101.03992462   62.3076096 118.706801 #> 32    -88.93151093  174.4324951 195.794558 #> 33    -96.73145294  124.6803513 157.804195 #> 34    -61.21222305    4.9348755  61.410824 #> 35    -11.74029064  -42.5219383  44.112919 #> 36    -14.42457581  -59.7032700  61.421078 #> 37     -3.93365908 -126.3909607 126.452159 #> 38     -4.15801096 -128.4944763 128.561734 #> 39    106.41008759  -30.8080864 110.780165 #> 40    165.52174377  115.8217545 202.020114 #> 41     -4.90217876  132.9954987 133.085814 #> 42   -122.18607330   22.3366890 124.210966 #> 43   -103.57032013  -99.9231796 143.914742 #> 44     66.03127289  -57.4507256  87.525510 #> 45     56.30897522   67.9472656  88.246992 #> 46    -29.65358162   58.7017860  65.766516 #> 47    -26.90090752    2.2339556  26.993506 #> 48      6.85818434  -82.5904236  82.874681 #> 49     45.80913544  -92.1950836 102.948581 #> 50    -22.68583107  -81.1644592  84.275242 #> 51    -26.47212219  -15.3628111  30.607013 #> 52    -57.38488388  133.8796997 145.659874 #> 53    -22.39432716   37.4462051  43.631688 #> 54    108.32021332  -39.2836800 115.223592 #> 55    116.27233124  -67.6122665 134.501575 #> 56     23.20933342    1.0755532  23.234241 #> 57    -83.48892975   46.9999847  95.809185 #> 58     -2.89697099   17.5441113  17.781684 #> 59     64.64108276   46.9872093  79.914125 #> 60     85.54238129  -28.5781441  90.189852 #> 61     81.28546906 -119.3412399 144.394110 #> 62     18.98963547  -69.1287842  71.689574 #> 63   -124.94193268    3.3462591 124.986735 #> 64   -226.85702515  155.8840637 275.252523 #> 65    -86.83889771   64.6962891 108.289445 #> 66     71.70102692  -25.7910061  76.198512 #> 67     10.71176052   -0.4186758  10.719939 #> 68      3.51811290   11.5955362  12.117491 #> 69      9.18653870   28.8728619  30.299087 #> 70    -38.03762436  -50.4777489  63.204936 #> 71   -150.82495117  -21.2136230 152.309500 #> 72   -116.38488007   18.3753510 117.826541 #> 73    121.93407440   30.4645901 125.682178 #> 74    161.33554077  -95.5068970 187.485264 #> 75     21.41099167  -31.0829754  37.743634 #> 76   -105.03600311  -18.2465649 106.609095 #> 77    -92.41709900  103.6614151 138.876237 #> 78    112.70470428  105.1020584 154.106434 #> 79    114.37793732  -21.3980103 116.362311 #> 80     -6.99555016   13.5655642  15.263101 #> 81     -2.09600139   -3.6502798   4.209247 #> 82     93.24562836   34.3210602  99.361373 #> 83    181.05494690   61.3289223 191.159961 #> 84     13.89050865   59.5846748  61.182348 #> 85    -93.64436340   19.2533474  95.603129 #> 86     15.86023712   19.0053883  24.753826 #> 87     63.32629776   -0.8612425  63.332154 #> 88    -71.49750519   15.9418249  73.253225 #> 89   -197.25732422  -76.8021317 211.681410 #> 90   -123.73407745  -64.3100891 139.448591 #> 91     46.65177917  -51.8621140  69.757203 #> 92     77.42518616  -98.3588028 125.176330 #> 93     20.08326530  -78.9462509  81.460715 #> 94      8.83919525   61.7185669  62.348319 #> 95     53.18732834  187.9799957 195.359593 #> 96     17.78946304  104.8442612 106.342767 #> 97     -1.41910243  -17.6117764  17.668857 #> 98    -21.38747597  -72.0257492  75.134098 #> 99     -4.27308226  -87.1482849  87.252982 #> 100    12.59883499  -98.8210144  99.620899 #> 101    18.25302124  -47.6503983  51.026789 #> 102    60.09420013   40.2533913  72.330135 #> 103    58.56433868   77.3739777  97.038725 #> 104     3.81385136  -29.6297932  29.874238 #> 105   -72.13504791  -32.8429794  79.259866 #> 106  -122.31990814   34.5330849 127.101117 #> 107   -86.12308502   -8.6743031  86.558820 #> 108   -44.92766190   -3.8673694  45.093806 #> 109  -118.13507080  -19.1565094 119.678180 #> 110   -50.71501923  -31.9970703  59.965204 #> 111    57.29316711  -53.3668137  78.297662 #> 112   133.56567383  -12.9628391 134.193235 #> 113    88.66951752  124.1644974 152.574918 #> 114  -102.37291718  193.6561890 219.050071 #> 115   -89.28022766    8.9176970  89.724491 #> 116    51.41387939 -119.2910080 129.898928 #> 117   129.16323853 -137.6014404 188.725458 #> 118   141.89064026 -137.9883118 197.923541 #> 119   -48.69047928  -12.4048195  50.245819 #> 120   -85.27265930  -26.9789391  89.438748 #> 121    -4.82794189   62.7623100  62.947729 #> 122   -12.51278973  117.7389832 118.402019 #> 123   -17.81717682   27.8885612  33.094163 #> 124  -113.89848328  -32.1759148 118.356048 #> 125  -131.51611328  -31.7143364 135.285946 #> 126   -61.13731003   16.8299942  63.411508 #> 127    78.47765350    6.7872071  78.770605 #> 128   149.54530334  -36.4682770 153.927687 #> 129    70.48081970  -15.7444849  72.217967 #> 130   -25.46523476   25.5494881  36.072906 #> 131  -118.77215576   65.6360016 135.701546 #> 132   -33.72735977  106.4309235 111.647106 #> 133    25.74398804  155.1939850 157.314735 #> 134   134.94621277   57.0614967 146.514486 #> 135   153.33641052  -58.2074318 164.012682 #> 136   -21.93332481  -17.6701927  28.165696 #> 137  -139.92231750  -52.6959343 149.516275 #> 138  -176.00605774  -11.7413216 176.397253 #> 139   -17.13074112  -42.4502296  45.776460 #> 140   129.65895081   18.4447784 130.964321 #> 141   170.38551331   34.9486656 173.932839 #> 142   194.64787292 -106.8719406 222.057214 #> 143   121.48655701 -203.4855499 236.992305 #> 144   -10.25830460 -174.9185486 175.219096 #> 145  -101.22410583   -1.6772177 101.238000 #> 146   -93.29157257  118.8631744 151.101859 #> 147    -6.96714258  107.5404587 107.765910 #> 148   -31.50684547   52.1156883  60.899313 #> 149   -54.85134125   40.6633034  68.280113 #> 150   -75.05522919  106.7618332 130.504316 #> 151    59.09658051   67.6083298  89.795836 #> 152   172.83708191  -36.0679474 176.560340 #> 153    76.66766357  -58.5933533  96.494102 #> 154  -173.94087219  -28.4100246 176.245728 #> 155  -237.76625061   36.2590637 240.515092 #> 156   -96.82026672  -22.6881847  99.443038 #> 157    53.13097000  -66.9291534  85.454149 #> 158   102.66432953  -44.7634125 111.998784 #> 159    83.64024353   16.0968475  85.175107 #> 160   104.30825043  110.2152328 151.748505 #> 161     6.12518120   77.2988815  77.541182 #> 162   -17.16765022  -15.2368832  22.954103 #> 163   -38.63260651  -39.2520409  55.074504 #> 164   -47.49619293  -14.6146479  49.693825 #> 165   -36.61341858  -12.2441053  38.606483 #> 166   -30.54440498  -75.3240280  81.281424 #> 167   -11.68821716 -106.0483856 106.690555 #> 168   -29.42806244 -116.1889420 119.857754 #> 169    -5.18447161  -23.4285736  23.995350 #> 170   -30.53804779   60.9342690  68.158327 #> 171   -20.96948814  182.9197845 184.117807 #> 172    69.82656860   63.6764755  94.501022 #> 173   152.04548645  -69.8794708 167.334905 #> 174    57.20901871  -29.9328194  64.566597 #> 175   -82.67818451   50.0732269  96.659248 #> 176   -98.66043091  111.3196793 148.747947 #> 177   -15.54735279  -68.5494308  70.290431 #> 178    36.17327881 -128.6388245 133.628041 #> 179   -40.24030304  -35.3504524  53.562454 #> 180     0.58317393   60.6364746  60.639279 #> 181    17.43332863   42.9274750  46.332376 #> 182    42.69710541   22.2231884  48.134322 #> 183   138.56158447   17.5121918 139.663845 #> 184    47.16056061   31.0119667  56.443428 #> 185    13.30226421   -4.7284455  14.117664 #> 186   -58.37338257  -78.9605942  98.194843 #> 187   -56.17436218   27.3606014  62.483290 #> 188   -48.65174866   30.1831436  57.253950 #> 189   -88.76612091   92.8006058 128.418755 #> 190    -3.86680031   23.2637005  23.582873 #> 191    61.97064972   -7.9522767  62.478797 #> 192    68.98477936   42.6585922  81.108910 #> 193   -25.51292038  -58.9990768  64.279080 #> 194   -64.81719971 -103.8103867 122.384091 #> 195   -19.54606247 -128.6392212 130.115709 #> 196    10.08825207   -1.3068520  10.172546 #> 197     1.32568407   49.5302582  49.547996 #> 198   -42.36529541   45.2091141  61.957100 #> 199     8.84605885   70.4142227  70.967708 #> 200    71.65209198   59.4803200  93.123202 #> 201     3.04586244   19.0453568  19.287376 #> 202   -36.67016220   -5.8262925  37.130129 #> 203   -17.86202240   10.4372120  20.687852 #> 204   -14.11081219   -3.1879132  14.466437 #> 205   -55.61744308  -67.2016144  87.231628 #> 206    -2.24513698  -29.6171322  29.702107 #> 207   195.82740784   34.2606697 198.801829 #> 208   223.82420349   71.8684158 235.079440 #> 209    23.35618973   73.0446091  76.687851 #> 210  -221.92219543  -78.2748032 235.321919 #> 211  -294.25381470 -103.0846100 311.787980 #> 212  -113.99478912  -99.0685730 151.027792 #> 213    61.34489441  -50.8130341  79.656516 #> 214    63.20154953   23.9798183  67.597837 #> 215   -86.40198517  -11.9556522  87.225230 #> 216   -69.56487274   34.1680183  77.503064 #> 217   119.19902802  -32.9968643 123.681855 #> 218    77.69490051   32.9445915  84.391017 #> 219   -58.23957062   81.6252518 100.272276 #> 220   -44.44801331   24.7376156  50.868217 #> 221   162.15693665    0.3980149 162.157425 #> 222   144.73602295  -70.4984360 160.992378 #> 223     1.09535384  -43.9749413  43.988581 #> 224   -22.62947273   12.0712395  25.647765 #> 225    18.34171677   17.0991230  25.075857 #> 226    44.20706558   20.0308552  48.533492 #> 227    38.99353027   18.0559177  42.971055 #> 228    44.80881500   -5.9146538  45.197489 #> 229  -108.92035675   46.9976006 118.627225 #> 230  -193.24522400   -1.5418062 193.251375 #> 231  -145.30604553   23.2215862 147.149886 #> 232    35.10957336   41.4532433  54.323600 #> 233   138.18205261  -48.9459763 146.594639 #> 234   123.09459686  -65.6946259 139.528003 #> 235    59.36845016  -35.1158638  68.976349 #> 236   -64.23525238  -14.7402697  65.904804 #> 237   -54.68839264  -40.0796242  67.802629 #> 238    22.06031036  -40.5791473  46.187926 #> 239   -10.28674030   22.6293907  24.857722 #> 240   -63.01528168   73.1676788  96.563114 #> 241   -65.33281708  -15.1190062  67.059387 #> 242    67.67279816  -72.9921112  99.536204 #> 243   132.73704529   -6.9320302 132.917930 #> 244    60.76556778  132.8620300 146.098505 #> 245   -17.34713364  182.8788300 183.699726 #> 246  -106.33754730   75.4151611 130.365335 #> 247  -123.89805603  -45.4952278 131.986909 #> 248   -85.39141083 -136.6973877 161.176515 #> 249    35.33269119  -64.7782135  73.787641 #> 250   188.13771057    2.5275869 188.154689 #> 251   165.13612366   27.8661366 167.470776 #> 252     5.78673697  -68.8231812  69.066031 #> 253  -215.00807190  -64.7698441 224.552007 #> 254  -246.86264038   99.5386963 266.174971 #> 255   -86.57839203  137.2876892 162.307509 #> 256    49.91722107   43.3629761  66.121681 #> 257   133.88929749  -97.8747787 165.848775 #> 258   142.56225586  -87.4695587 167.257049 #> 259   146.93258667   -1.8154544 146.943802 #> 260    44.50435257  103.2052841 112.392028 #> 261  -112.90346527   84.1452789 140.810584 #> 262  -161.72149658    9.3550949 161.991852 #> 263    -2.47597742  -85.5689468  85.604761 #> 264   106.35269928 -128.2709198 166.626305 #> 265   101.65373230 -106.3537369 147.121034 #> 266    50.85499191  -59.1338539  77.993864 #> 267    22.60325241   14.4416523  26.822907 #> 268   -26.53629303   57.3458672  63.188000 #> 269  -104.56048584   43.2030563 113.134430 #> 270   -99.07716370   13.7005434 100.019944 #> 271   -71.27870178  -26.0795593  75.899913 #> 272   -12.34725380 -101.1342926 101.885229 #> 273   110.31473541   39.4211235 117.146770 #> 274   140.35618591  170.6154480 220.928699 #> 275    32.02694702   92.8804474  98.247152 #> 276  -130.45204163  -41.8739853 137.007904 #> 277  -121.20166016  -76.0241013 143.071683 #> 278    12.07770443   46.8806763  48.411453 #> 279    99.10671997    3.1918635  99.158106 #> 280    57.88795090 -112.1029739 126.166920 #> 281    10.13068581  -91.2366333  91.797353 #> 282   -62.10937500   55.8910446  83.554673 #> 283   -74.85353088  144.9564514 163.142342 #> 284    17.38111496   77.1157608  79.050261 #> 285     9.74342632  -74.8386459  75.470241 #> 286    58.77292252  -95.0247421 111.731634 #> 287    15.82442188  -27.0604820  31.347759 #> 288    52.75581741   54.3753662  75.761842 #> 289    13.37250328   66.1331711  67.471625 #> 290   -73.06322479    1.1441396  73.072183 #> 291   -29.65749359   46.6687889  55.295052 #> 292   102.95061493  -10.7316017 103.508436 #> 293   144.02198792   27.5694618 146.636995 #> 294     3.21658349  -73.1668243  73.237494 #> 295   -73.59752655 -121.1578445 141.759724 #> 296  -107.53524017  -20.3691673 109.447389 #> 297    -6.27959538   71.5657349  71.840711 #> 298     5.51745462  135.2976379 135.410092 #> 299    -5.84574842  -48.8989449  49.247128 #> 300    31.65079689 -138.7716675 142.335339 #> 301    44.74531174  -99.2933273 108.909631 #> 302    -0.62185001  111.4701996 111.471934 #> 303  -135.70120239  208.7334900 248.966837 #> 304  -138.03526306   -2.7083547 138.061830 #> 305   -62.08778381 -108.5424576 125.045424 #> 306    27.46895981  -70.8119812  75.953146 #> 307    69.50795746   94.4052353 117.233547 #> 308    15.52896690   14.1545248  21.011887 #> 309    -0.34732181 -145.4914856 145.491900 #> 310    21.91738319  -93.6189957  96.150341 #> 311   109.17503357  -15.9236870 110.330194 #> 312    77.62135315   86.0513916 115.887516 #> 313   -25.35745811   46.0232010  52.546510 #> 314   -78.38827515   82.4252396 113.748151 #> 315  -136.21318054   42.5667992 142.709365 #> 316   -42.60445023  -51.8860054  67.136404 #> 317    21.66542053  -55.3814659  59.468456 #> 318    47.39471054   14.4148617  49.538337 #> 319   -47.31171417   45.5770149  65.693703 #> 320   -17.64233589   -0.5956033  17.652387 #> 321   109.31951904   90.4406281 141.881163 #> 322   130.93681335   97.4221344 163.203926 #> 323    13.71311760  -29.0127373  32.090318 #> 324  -154.83607483 -117.1153488 194.139679 #> 325  -106.12441254  -26.2218342 109.315944 #> 326   110.97154999  118.7155304 162.505575 #> 327   227.82345581   85.5069885 243.341267 #> 328    39.36240005  -46.7570534  61.119723 #> 329  -173.43995667  -89.9874725 195.394892 #> 330  -108.06587219    3.3897135 108.119022 #> 331    63.56813812  -25.9213066  68.649999 #> 332   111.66019440 -146.3169098 184.056071 #> 333   -47.91854095 -113.9489822 123.614551 #> 334  -114.99340057  137.3202972 179.109872 #> 335   -21.31491470  268.4936829 269.338418 #> 336    70.58092499   73.2763062 101.740277 #> 337    21.59391594 -123.4579391 125.332198 #> 338  -104.68677521  -50.9900932 116.444452 #> 339   -32.18735123   85.1950302  91.072602 #> 340    60.27734756   33.6360970  69.027137 #> 341    54.70593643  -29.0520058  61.941573 #> 342    29.34280205 -103.5704269 107.646799 #> 343     0.54287684   18.5992813  18.607202 #> 344     3.82498646  -46.9438248  47.099397 #> 345    32.25178909 -172.4080353 175.398713 #> 346    66.06264496 -140.8251190 155.550594 #> 347    98.91728210  -41.3607635 107.216330 #> 348    14.79861355  110.5544662 111.540526 #> 349   -24.52583313   41.7022018  48.379646 #> 350   -87.06431580    8.0537853  87.436025 #> 351  -169.99227905  -28.1629982 172.309400 #> 352   -94.83837891  -84.0185242 126.702133 #> 353    39.80495834    2.5082812  39.883909 #> 354   116.04262543  132.7943268 176.352556 #> 355   140.53846741  138.4990845 197.314615 #> 356    14.16787338   72.9292068  74.292650 #> 357  -105.13021088  -10.9442749 105.698337 #> 358  -137.57101440    2.9053257 137.601689 #> 359   -61.25435638    5.2604036  61.479818 #> 360    44.64274979  -17.6372929  48.000513 #> 361    72.56955719   28.1611633  77.842095 #> 362    35.89231873   67.6123428  76.548595 #> 363   -17.29327202   81.4225235  83.238720 #> 364   -98.30218506   31.3706303 103.186414 #> 365   -87.49014282  -76.2404709 116.047984 #> 366    56.16312027 -101.9812698 116.423689 #> 367    71.39160919  -61.8457260  94.454517 #> 368    50.88037872  -85.4022827  99.410074 #> 369   103.23390198  -96.2644577 141.152699 #> 370    88.92693329  -37.2022896  96.395072 #> 371   -88.73064423   66.7506714 111.035037 #> 372  -261.33245850   98.1124344 279.142802 #> 373  -221.42379761  101.0396271 243.387560 #> 374    -8.98000813   36.3506126  37.443392 #> 375   157.20440674 -176.4159546 236.296032 #> 376   144.47517395 -188.3686981 237.393855 #> 377    55.97612762  -37.6716003  67.472041 #> 378    40.62467575  153.4168091 158.704384 #> 379     7.20703983   86.9730377  87.271133 #> 380   -51.17475510  -43.9602318  67.463750 #> 381  -103.78710175   21.4612808 105.982777 #> 382   -13.18663311   91.4228516  92.368962 #> 383   108.69271088  136.3248444 174.351853 #> 384    68.11166382   56.6106148  88.566136 #> 385    51.24818802  -21.0860882  55.416603 #> 386    20.84525871  -92.2422333  94.568253 #> 387     4.57984257 -137.6370850 137.713260 #> 388    36.60380173  -41.2990913  55.185625 #> 389    -7.29646635  -33.8166161  34.594825 #> 390   -68.67856598  -27.6778336  74.045985 #> 391   -67.73818970  -49.8914795  84.128604 #> 392    64.97882843  -36.0811958  74.324295 #> 393   143.77503967  118.0201645 186.010810 #> 394    41.73196411   79.9273300  90.166152 #> 395   -91.54892731  116.5943222 148.241162 #> 396   -71.38365173  -13.3158245  72.614991 #> 397    -2.16905284  -41.7477646  41.804074 #> 398    15.14897156    9.8003263  18.042664 #> 399    17.88126755  -15.8835392  23.917076 #> 400   -10.22175884  -30.9536572  32.597749 #> 401     4.67656326 -111.7914581 111.889233 #> 402   -62.56395340   -0.8809832  62.570156 #> 403  -146.58494568  116.2695694 187.098260 #> 404  -107.99783325  135.8118286 173.517679 #> 405    26.63939476  123.1670685 126.015015 #> 406    31.41239929  -11.3025894  33.383939 #> 407    -5.68833876 -147.9257965 148.035126 #> 408   -11.16678619 -195.5435028 195.862091 #> 409    35.54791641  -61.6802330  71.190628 #> 410   138.64851379  144.7062836 200.407881 #> 411    67.44127655  152.1593170 166.435524 #> 412   -75.71978760   31.2764301  81.924974 #> 413  -129.10906982 -100.6259995 163.691001 #> 414   -21.68029785 -141.3500824 143.003081 #> 415   109.37604523  -33.8419876 114.491918 #> 416    51.29242706   98.3316269 110.905464 #> 417  -113.17972565  159.7704315 195.796428 #> 418  -141.27412415   50.4052124 149.996879 #> 419   -15.48891830 -194.3906860 195.006783 #> 420    87.83308411 -157.8840637 180.671050 #> 421    27.75155067   -2.7725174  27.889701 #> 422    25.96537018  105.1803589 108.337936 #> 423    71.97426605   15.4283047  73.609290 #> 424    93.46474457  -66.4960480 114.705636 #> 425    48.24647141   68.2460403  83.577772 #> 426  -123.29145813  119.7292328 171.860038 #> 427   -81.04600525  170.2675171 188.572220 #> 428    23.30274200   20.1229496  30.788811 #> 429   108.35331726 -135.1600037 173.230101 #> 430   138.16873169 -137.2377625 194.742912 #> 431   -67.76236725 -114.6977158 133.219009 #> 432  -214.36599731    9.0041723 214.555018 #> 433  -151.73973083   41.7143059 157.369086 #> 434   -55.34201813  108.1041412 121.446467 #> 435    10.48344135  154.0283203 154.384669 #> 436   -43.01848984   40.0284119  58.761077 #> 437   -41.37597275  -45.4068565  61.430886 #> 438    75.34004974 -181.8161926 196.807650 #> 439   111.05275726 -205.9011383 233.940150 #> 440   129.43890381   83.4405746 154.002465 #> 441    71.87123871  238.0769806 248.688809 #> 442    17.02028084  152.5172882 153.464045 #> 443    17.63206673  -57.5653992  60.205190 #> 444     4.48572540  -87.8967361  88.011124 #> 445     7.49495506  -44.6940269  45.318102 #> 446   -35.46298599  -96.6839447 102.982564 #> 447   -45.08264923 -166.3872223 172.386638 #> 448   -65.56306458 -118.7765427 135.670124 #> 449   -76.62526703  -26.2407417  80.993877 #> 450   -13.42610359   54.7314644  56.354179 #> 451    54.14670181  157.4305115 166.481925 #> 452    78.63467407    0.3167975  78.635312 #> 453     9.40828800  -58.5255280  59.276921 #> 454     7.10336256   37.4932823  38.160241 #> 455    53.80796814  207.6093292 214.468951 #> 456    41.00409698  124.5054626 131.083737 #> 457   -52.31172180  -18.3944130  55.451516 #> 458  -101.61652374  -31.3145084 106.332104 #> 459     3.36628985  -26.3075752  26.522074 #> 460    25.95692825  -53.9313545  59.852762 #> 461    -2.98951459  -48.3516655  48.443996 #> 462   -19.15885925   36.3842621  41.120268 #> 463    21.81510925   16.0804443  27.101286 #> 464    26.40776634  -21.8306484  34.262915 #> 465   -23.59746933  -24.5749226  34.070036 #> 466   -25.65691757   48.6305008  54.983661 #> 467   -23.74827003   52.5903435  57.703766 #> 468    54.44368744   21.3886948  58.494370 #> 469    48.83366776  -36.8756485  61.192651 #> 470    -1.09787548  -57.1800117  57.190551 #> 471   -16.20406914   27.7018719  32.093077 #> 472   -26.35191917  132.5630493 135.156893 #> 473    41.11067963  125.9734192 132.511850 #> 474   104.68825531  -13.2589712 105.524552 #> 475    72.19524384 -163.8649597 179.063894 #> 476   -28.53370476 -160.7985535 163.310585 #> 477   -96.69958496    1.1650580  96.706603 #> 478    15.56655121   42.3752518  45.143986 #> 479    67.10724640  -40.3180161  78.287451 #> 480    29.25150490  -18.8285923  34.787446 #> 481   -47.74517822   46.9813843  66.983972 #> 482    -7.44264364   59.4845123  59.948312 #> 483    28.28451729  -25.8461971  38.315008 #> 484    20.47176933  -75.4805069  78.207418 #> 485   -10.35242939    6.4431067  12.193704 #> 486   -95.01915741   11.3999062  95.700565 #> 487   -37.11064911   62.6689034  72.832628 #> 488    23.64627266   51.7120590  56.861967 #> 489    44.43668747    5.4122639  44.765073 #> 490    11.32711601   -6.9501872  13.289419 #> 491   -23.09728050  -67.7758255  71.603400 #> 492   -11.47102451 -138.5365753 139.010673 #> 493    74.12156677 -154.1359558 171.031867 #> 494    74.29380035   36.5460777  82.796042 #> 495    10.82522297  174.4887543 174.824228 #> 496   -59.59885406  149.0207825 160.496782 #> 497   -63.27838135   21.3780670  66.792030 #> 498   -35.07059097  -35.3945160  49.826881 #> 499   -91.59084320    1.3415055  91.600667 #> 500  -150.30033875    2.8446717 150.327256 #> 501   -82.65763092   20.9082489  85.261004 #> 502    64.11470795    4.5269403  64.274326 #> 503   142.59837341  -62.9362373 155.869388 #> 504   131.28109741 -123.8407593 180.475096 #> 505    72.91457367 -131.6863403 150.525172 #> 506    68.16001892  -26.6104221  73.170368 #> 507   -56.18848419  131.0821991 142.617280 #> 508  -168.48419189  127.1649780 211.087315 #> 509  -110.93166351  -21.6180859 113.018475 #> 510    62.70747375 -124.6361237 139.522008 #> 511   106.04369354  -95.6151810 142.784900 #> 512    35.88353729   98.4071198 104.745355 #> 513   -20.13259315  136.9799957 138.451582 #> 514    35.34447098   67.2987823  76.015510 #> 515    56.03377151    6.5473366  56.414991 #> 516     2.96433568  -70.4156723  70.478040 #> 517   -58.90538406  -95.5065994 112.211206 #> 518  -117.58171082  -73.0455017 138.423640 #> 519   -39.66705322   38.6965294  55.415670 #> 520    34.91453171   94.9010849 101.119931 #> 521    93.15241241  -80.2436676 122.948844 #> 522    75.40653229 -130.9170380 151.080826 #> 523    68.61550140  -43.2320938  81.099328 #> 524     4.94708157   65.9773331  66.162543 #> 525   -70.68750000   85.7413025 111.122876 #> 526   -80.67673492  -24.1660099  84.218357 #> 527   -57.67798996   18.8989697  60.695318 #> 528    73.06204224   -7.6813331  73.464719 #> 529    -0.78198195    4.6765432   4.741472 #> 530    25.24775505  -25.1288319  35.621725 #> 531    79.79776001 -126.8753586 149.883418 #> 532   -20.93502617  -55.0364151  58.883634 #> 533   -80.88858032  108.1237564 135.032252 #> 534  -196.41510010  193.3794556 275.634732 #> 535   -32.51761246   72.6399384  79.586153 #> 536   114.34920502  -45.4520378 123.051324 #> 537   131.34031677  -59.1462059 144.043578 #> 538    93.38646698  -11.3811283  94.077427 #> 539    17.35621834  -39.6706047  43.301215 #> 540    22.70564842  -29.6233444  37.324108 #> 541    14.75070667    5.4313817  15.718882 #> 542   -54.93138504   -4.4373999  55.110322 #> 543   -57.14361191   56.5053139  80.363194 #> 544   -14.02239895   35.4700470  38.141210 #> 545    34.47474670  109.0916061 114.409295 #> 546    17.20717239  106.9093857 108.285288 #> 547     9.70325470  -44.3343010  45.383735 #> 548   102.52674103 -104.1557312 146.151117 #> 549    26.30969810 -102.4666901 105.790466 #> 550  -111.21085358  -29.4660778 115.048267 #> 551   -42.24388885 -135.8828888 142.297947 #> 552    69.50080872 -142.6447449 158.675410 #> 553   127.12839508   22.3760548 129.082596 #> 554   -97.11989594  162.6240997 189.417190 #> 555  -175.61785889  189.2880554 258.208443 #> 556   -24.13974380  142.9952698 145.018531 #> 557    26.49627876  -16.6886539  31.313958 #> 558   -18.83315849 -106.8366241 108.483880 #> 559   -36.34310150 -138.9851074 143.658209 #> 560    92.70349884  -89.5959625 128.923912 #> 561   107.39422607   70.6207809 128.533321 #> 562    18.97137260   61.9357529  64.776157 #> 563  -118.28147125    9.4174585 118.655784 #> 564    65.84059906 -189.2437744 200.370134 #> 565    73.57769012 -225.9130096 237.592854 #> 566   -84.94011688   41.2486229  94.426015 #> 567  -194.64396667  238.7829132 308.064203 #> 568   -68.43157196  192.5545959 204.353009 #> 569   151.00311279   48.6330833 158.641473 #> 570    91.65847015  -47.7201767 103.336782 #> 571   -22.53811073  111.2628860 113.522668 #> 572   -66.85331726  114.7617416 132.814244 #> 573   -53.05649185   -8.3238144  53.705467 #> 574   -36.24932480  -86.6012573  93.881794 #> 575   -15.81702518 -102.3483353 103.563314 #> 576    35.40809631  -68.1193695  76.772272 #> 577    49.56908798 -139.1279144 147.694519 #> 578     5.34629965 -109.4796982 109.610160 #> 579   -64.98963165  -12.0912285  66.104841 #> 580   -98.78662872   79.5218964 126.816915 #> 581   -67.06792450   72.8343964  99.009877 #> 582   -18.48797035   97.7594452  99.492282 #> 583    46.17425156  103.6506500 113.470343 #> 584    93.15429688   53.4509163 107.399830 #> 585    21.48331642    0.6897659  21.494387 #> 586   -22.60985184  -57.3282433  61.625748 #> 587    82.23283386  -26.7303925  86.468219 #> 588   130.64074707  -32.9750290 134.738106 #> 589    49.14624023  -43.8533783  65.867076 #> 590   -44.37474060  -68.3415298  81.484246 #> 591   -73.47522736  -68.4920959 100.447878 #> 592   -91.98852539   68.5128479 114.699168 #> 593  -125.65158844  120.4282150 174.043893 #> 594   -80.76593018  100.6133041 129.020047 #> 595    58.83607101  -72.3157654  93.226891 #> 596    74.24459076 -118.5563507 139.885194 #> 597    89.56089783  -64.2192078 110.205540 #> 598    50.63137436  -59.9545441  78.473457 #> 599   -28.31594467   19.3457508  34.293597 #> 600   -25.28476524   44.1034241  50.837303 #> 601     0.68424875   63.2449646  63.248666 #> 602    40.72297668   37.6774330  55.479274 #> 603    20.53663826   53.2002754  57.026510 #> 604   -48.01817703   29.6534843  56.436464 #> 605    45.02201080  -68.5999374  82.054451 #> 606    64.96596527  -82.5994339 105.086836 #> 607    30.25799942  -30.8773670  43.231451 #> 608   -21.95425034   -9.8885536  24.078468 #> 609   -24.25314713   -1.1374375  24.279805 #> 610    31.96769905   84.2543259  90.115066 #> 611    43.86247253   50.0005264  66.512925 #> 612    65.91225433  -50.2569962  82.886615 #> 613    44.71303558   -0.9740692  44.723644 #> 614   -81.66548920  106.2689896 134.023693 #> 615  -150.16818237  149.9394684 212.208217 #> 616   -56.57839584   36.6253242  67.398288 #> 617    25.67832375  -46.9456940  53.509574 #> 618     2.00015378  -92.7231903  92.744761 #> 619   -37.11896515  -27.9693336  46.476889 #> 620   -11.99621582   25.0534000  27.777366 #> 621    23.64758110   -7.2684612  24.739414 #> 622    32.57809448   35.7208481  48.345747 #> 623   -50.77977753    1.2534697  50.795246 #> 624   -39.46525574  -32.1081238  50.876694 #> 625    48.50531387  -81.1518631  94.543061 #> 626   133.16235352  -53.7136993 143.587513 #> 627    77.35450745   80.4564667 111.610765 #> 628  -137.83068848   49.3760185 146.407957 #> 629  -164.12321472  -25.3856869 166.074871 #> 630  -113.67282867 -116.4808197 162.755317 #> 631   -29.72132874 -115.6072769 119.366661 #> 632    50.55284882   -7.7915201  51.149764 #> 633    74.05873871    4.7973380  74.213956 #> 634   147.25724792   21.2391663 148.781045 #> 635   146.93464661   37.3932114 151.618081 #> 636    40.97905350   49.1015739  63.955042 #> 637  -123.08621979   52.0764008 133.649426 #> 638  -154.95941162   50.5956192 163.010233 #> 639   -62.40412140   96.0762787 114.564068 #> 640    68.15000153  -27.2953262  73.412925 #> 641    99.98677826 -187.4920959 212.486804 #> 642    29.42250061 -163.2817535 165.911466 #> 643   -38.81654739  -29.2321739  48.592637 #> 644   -97.26869202  107.8503494 145.233937 #> 645   -10.72998619   50.2159691  51.349549 #> 646    58.13151550  -20.2616978  61.561429 #> 647    16.20097351  -45.7711563  48.553788 #> 648    -0.83448619   22.3287239  22.344312 #> 649    -8.58739853  101.3402557 101.703446 #> 650    22.38628197  119.5630417 121.640727 #> 651    31.84164619   78.6895676  84.887799 #> 652    25.30035782  -27.6306477  37.464127 #> 653   -77.36891174  -87.4543457 116.765625 #> 654   -88.86777496  -91.9183121 127.853266 #> 655   -49.46879196  -24.5192127  55.211893 #> 656    62.93017960   -0.3794451  62.931324 #> 657   122.20419312   43.0496635 129.565190 #> 658    30.21744919  104.2942581 108.583546 #> 659   -22.33620262   33.7450447  40.467691 #> 660    -7.68765116  -93.1487045  93.465401 #> 661    67.01664734 -127.1826096 143.758990 #> 662    58.30937195    1.3343302  58.324637 #> 663   -73.74021149  111.0699081 133.319703 #> 664   -88.33195496   79.8527298 119.075576 #> 665    31.54774666   46.3942528  56.104251 #> 666   122.78447723   12.1079798 123.380027 #> 667    97.56296539   34.1965256 103.382467 #> 668   -56.52094650   26.9006538  62.596027 #> 669  -142.39088440  -37.5060349 147.247637 #> 670  -125.65927887  -75.5532150 146.623813 #> 671   -25.39431763  -16.7047272  30.396040 #> 672    89.78245544   84.0769272 123.003329 #> 673   145.24484253   66.7911377 159.865945 #> 674    37.99524689  -93.2916565 100.732179 #> 675  -157.04472351 -194.0635834 249.647190 #> 676  -156.27967834  -80.8594055 175.959033 #> 677    24.38642502   77.2943420  81.050065 #> 678   132.34957886  106.6999512 170.003796 #> 679    76.26684570  -56.4011345  94.856311 #> 680   -42.51643372 -173.4204407 178.556143 #> 681    -1.67904449 -129.4871216 129.498007 #> 682    67.16786957   62.1537895  91.512929 #> 683    18.03762817  167.8754272 168.841687 #> 684   -52.11814117  135.4574890 145.137976 #> 685   -87.38008118   89.2518234 124.904630 #> 686    61.08969498  -57.4314995  83.847051 #> 687   107.35725403  -93.0091324 142.043228 #> 688   -49.22675705  -27.9300880  56.598263 #> 689  -135.80752563  118.4554367 180.209252 #> 690   -61.28099823  116.9862213 132.064896 #> 691    74.92027283  -93.5407104 119.845366 #> 692    10.99000263 -137.8686066 138.305939 #> 693   -96.78142548  -10.7879438  97.380820 #> 694  -115.90727997  136.7648468 179.273871 #> 695    47.94074631   69.1634979  84.154053 #> 696   130.74116516  -55.6899338 142.107779 #> 697   109.90705872 -105.0671997 152.048275 #> 698    62.34116364  -44.9157753  76.836499 #> 699    53.31403351   57.2914658  78.260451 #> 700   -31.60235977  -26.6073761  41.311761 #> 701  -211.60516357  -49.3015289 217.272608 #> 702  -165.43995667  -45.3480148 171.542478 #> 703     7.36420536   53.1721001  53.679640 #> 704   168.24224854   30.1929951 170.930018 #> 705    69.49304962  -70.1479568  98.742189 #> 706   -58.63031387  -30.8644943  66.258062 #> 707   -70.05963135   43.5816498  82.508861 #> 708   -14.70207310  163.4155273 164.075548 #> 709    72.56945038  132.8148499 151.347644 #> 710    67.21085358   31.2503605  74.120738 #> 711    22.03731728  -90.1007919  92.756650 #> 712    33.82598495  -99.9007416 105.472060 #> 713     3.12984633   -2.0615015   3.747763 #> 714  -102.21207428    4.4624257 102.309439 #> 715  -137.50561523   88.0919724 163.303367 #> 716   -32.53042603  133.3350983 137.246046 #> 717   173.32228088  -35.2793045 176.876348 #> 718   131.92649841 -196.2753754 236.492334 #> 719   -20.04712296 -119.4475403 121.118132 #> 720   -99.18009186  130.0917511 163.586535 #> 721  -117.82120514  125.1150742 171.859298 #> 722    19.30569458  -12.1222477  22.796024 #> 723    -0.35499117  -78.1040344  78.104841 #> 724    16.10484123  -70.3501740  72.170028 #> 725    -0.06049347  -19.7339611  19.734054 #> 726    22.75072098   41.2988892  47.150753 #> 727   115.33485413   77.1629944 138.766913 #> 728    60.78483582    2.3820012  60.831490 #> 729   -12.60728264   43.4866905  45.277321 #> 730  -187.83358765   76.2611847 202.724505 #> 731  -147.46273804   14.4207125 148.166177 #> 732   -39.49869919 -123.8883820 130.032605 #> 733   112.24316406 -148.0518188 185.789852 #> 734   129.69175720  -19.4105282 131.136267 #> 735    62.25446320  -29.2241344  68.772583 #> 736    61.44408417    7.7598567  61.932147 #> 737    -7.34037828  -13.9634199  15.775242 #> 738   -45.41673279   62.1425552  76.969973 #> 739   -40.54906082  102.3126144 110.054974 #> 740    14.09810734   25.5288620  29.162980 #> 741     6.95729494   52.8069534  53.263292 #> 742   -27.46560669  -80.2608337  84.830189 #> 743   -57.72089767 -145.6821442 156.700316 #> 744    21.28158569  -97.2780609  99.578748 #> 745    37.74894333  -11.3116703  39.407317 #> 746     2.39981914   76.7180634  76.755589 #> 747   -63.15896225   -4.3077545  63.305697 #> 748  -111.28665924  -76.9981613 135.327149 #> 749   -84.88050079  -19.3644791  87.061372 #> 750   -10.81300354   19.8526745  22.606409 #> 751    93.85168457  102.3690567 138.879669 #> 752   172.37988281  137.4181061 220.450811 #> 753   179.04316711   67.4053345 191.311094 #> 754    44.69208908  -33.0956421  55.612088 #> 755   -63.97072983 -119.4230499 135.477375 #> 756  -107.66303253  -57.9596939 122.272870 #> 757   -49.97323990  -10.2952261  51.022705 #> 758   -85.86488342   38.6318130  94.155165 #> 759   -63.40851974   61.6576385  88.443794 #> 760    17.74662399   35.1947670  39.415914 #> 761   118.24043274   81.8392105 143.800057 #> 762   170.41253662   -7.3138089 170.569412 #> 763   120.86366272 -120.3079224 170.534516 #> 764    13.83476353  -88.4834900  89.558521 #> 765   -77.90245819   17.2254887  79.784149 #> 766  -127.57009125   95.9155655 159.605526 #> 767   -57.86845398   -3.1752102  57.955500 #> 768    38.35923386  -52.1615829  64.747676 #> 769    15.04015446   72.3171082  73.864541 #> 770   -47.62700653  131.3325653 139.701734 #> 771   -62.59903336   51.9838676  81.369291 #> 772    55.48002243  -40.3367615  68.593638 #> 773   171.79547119  -56.7327576 180.920672 #> 774   107.93136597  -46.1513901 117.384541 #> 775    -8.15884399 -103.4694214 103.790596 #> 776   -97.34249115  -99.7260590 139.358701 #> 777  -107.06730652    3.5283265 107.125427 #> 778   -58.29901123   83.7498703 102.043204 #> 779   -37.26831436   54.6779480  66.171030 #> 780    26.49574280    7.4768214  27.530478 #> 781   -47.87606812   41.0540161  63.067822 #> 782   -12.28128338    6.6762338  13.978627 #> 783    61.93834305   -1.1742043  61.949472 #> 784    31.91008568   18.2459564  36.758244 #> 785   -63.18538284   50.7256737  81.027690 #> 786  -122.96755981   25.1045990 125.504030 #> 787   -41.00030136  -90.3310471  99.200417 #> 788    88.86055756  -81.9749603 120.897034 #> 789   103.35382843   20.5996323 105.386710 #> 790   120.44344330   97.9776535 155.261855 #> 791    25.72521973   50.6658897  56.822701 #> 792   -88.62366486    5.6481042  88.803463 #> 793   -75.26219940   52.2902718  91.644264 #> 794   -36.69605255   -4.7683682  37.004562 #> 795   -17.26837540  -67.9578552  70.117522 #> 796    -9.58043098 -130.0020599 130.354594 #> 797   -73.64911652 -149.9660339 167.074845 #> 798   -65.20449066  -33.5177956  73.314857 #> 799    78.12766266   71.0016098 105.570641 #> 800   107.00002289   77.8929138 132.349201 #> 801    -9.56145763    6.6911964  11.670201 #> 802  -179.66883850  -76.7722702 195.383912 #> 803   -42.80981064  -79.3704147  90.179502 #> 804   164.57077026  -26.7951794 166.737878 #> 805   175.39839172   63.7206879 186.614367 #> 806    47.34067154  108.9986649 118.835382 #> 807   -77.54022980  -60.6683998  98.453756 #> 808   -77.97291565  -71.0130844 105.463898 #> 809  -127.09288025   50.1019897 136.611894 #> 810   -25.37581062  114.5571442 117.334015 #> 811    67.37564850    1.0298991  67.383520 #> 812    72.85597229 -111.8713989 133.503568 #> 813   -39.10116959   -4.5021038  39.359502 #> 814   -88.30058289   57.9302902 105.607346 #> 815   -22.78729057   15.9250898  27.800523 #> 816   112.97117615  -48.7854614 123.054898 #> 817   120.62105560   52.5612984 131.575564 #> 818    22.23471451  165.9696655 167.452418 #> 819   -24.44141006   99.2076111 102.174031 #> 820  -147.66764832  -42.3366470 153.616816 #> 821   -27.92556572  -58.7482796  65.047656 #> 822    86.53414154  -37.4303246  94.282484 #> 823   150.36367798  -76.8704758 168.873638 #> 824    61.60777283 -111.8198929 127.668344 #> 825   -75.16427612  -41.4540520  85.837677 #> 826   -76.43118286   98.5607986 124.723521 #> 827   -22.07799530  181.3541260 182.693067 #> 828     9.60074329   91.6068344  92.108558 #> 829    39.98208618  -68.9237289  79.680911 #> 830    87.22169495 -131.4523773 157.757255 #> 831    50.88039017  -91.2812805 104.504001 #> 832   -23.13103294   50.6214104  55.655834 #> 833    -8.82226944  -38.8432350  39.832516 #> 834   -10.94993782  -60.5808525  61.562495 #> 835     7.85120678  -13.9279137  15.988378 #> 836   -94.59587860   32.4005547  99.990881 #> 837  -159.98228455  113.6182861 196.222951 #> 838   -63.18637085    5.1087160  63.392558 #> 839    -1.63944495  -86.6560211  86.671528 #> 840     2.98498559  -96.1005783  96.146926 #> 841    23.29651260  -29.0353394  37.226045 #> 842   145.87664795  157.2040100 214.460013 #> 843   135.12483215  186.8084717 230.556122 #> 844   -36.86935043   58.7975311  69.400999 #> 845  -161.86932373  -81.3106384 181.143860 #> 846   -69.51949310 -101.8788528 123.337993 #> 847    69.13745880  -53.4273300  87.375442 #> 848    93.37648010    3.5912559  93.445514 #> 849    69.99256897    7.5923624  70.403151 #> 850   -21.80200005  -11.3245707  24.567725 #> 851   -54.13047791   16.7775555  56.670936 #> 852    14.91389656 -100.3024368 101.405144 #> 853   -12.03728104 -163.7974091 164.239116 #> 854   -60.32344055  -52.8966217  80.230730 #> 855   -67.94927216  148.1738434 163.011016 #> 856    44.30595398  224.4925690 228.822925 #> 857    63.05061340   80.8500595 102.528591 #> 858    -8.85862064   -3.0112071   9.356416 #> 859    36.36270142  -26.2939415  44.873349 #> 860     9.58497143  -97.5179062  97.987824 #> 861    37.80911636 -161.0436554 165.422454 #> 862    -2.92212772  -23.8478794  24.026239 #> 863    15.48945141  135.9222717 136.801999 #> 864   -11.27441216   28.0309696  30.213368 #> 865   -85.97470093 -106.3794556 136.778060 #> 866     2.42068315 -153.6534271 153.672494 #> 867   -76.32128143  -54.2130699  93.616211 #> 868   -16.43563080   54.0366478  56.480875 #> 869    33.08660126   96.5434875 102.055711 #> 870    33.57878113  103.3051376 108.625439 #> 871   -13.09182835   50.5579643  52.225508 #> 872   -66.37601471   29.8652916  72.785376 #> 873    23.23848724   35.6674538  42.569878 #> 874     9.45077991   -9.2720852  13.239668 #> 875    -8.20424271    1.7114418   8.380849 #> 876   -16.48866463   33.9563332  37.747962 #> 877    46.38439941   34.7511215  57.958200 #> 878    44.95081711  -49.6545486  66.978729 #> 879    62.35882950  -21.8476734  66.075294 #> 880    76.09091187 -105.4959869 130.073941 #> 881    28.39022827 -197.5595093 199.588990 #> 882   -12.11710930 -115.5822830 116.215698 #> 883   -59.75165939   28.6327763  66.257805 #> 884   -13.44462204  160.5796661 161.141512 #> 885   -19.71864510  161.8965149 163.092938 #> 886  -113.31134033  157.7223053 194.205524 #> 887  -155.84564209   88.7398376 179.339407 #> 888   -11.74253368   39.3883667  41.101466 #> 889   136.22027588    1.4031762 136.227503 #> 890    79.05479431    6.2914252  79.304745 #> 891   -75.17375183 -127.6188202 148.113660 #> 892  -106.02162933 -184.1040039 212.449688 #> 893    -3.66504550  -45.8004570  45.946865 #> 894    30.09997749  -47.9503784  56.614905 #> 895    46.08927536  -35.5914268  58.232044 #> 896    48.95089340   11.1941690  50.214534 #> 897   -43.61017609   56.2907486  71.207414 #> 898   -43.02895355   94.7474136 104.060383 #> 899    66.73735809    0.5832613  66.739907 #> 900   166.67263794   -4.2013330 166.725581 #> 901    93.76156616  -31.8529148  99.024439 #> 902  -196.57044983  -45.6275673 201.796473 #> 903  -186.23114014   54.9341393 194.164356 #> 904   -57.09411240  113.6411819 127.177262 #> 905   161.10156250   77.0773621 178.590686 #> 906   199.09631348  -30.1069412 201.359802 #> 907   -53.86936569 -100.1770172 113.742443 #> 908  -155.08262634    8.2026072 155.299400 #> 909  -137.03546143   55.8407021 147.976017 #> 910    67.64204407  -48.1838036  83.048932 #> 911   125.67167664  -52.2252235 136.091309 #> 912     9.78373146  -23.7978668  25.730524 #> 913    -5.97044563   57.6858826  57.994028 #> 914    91.74945068  -41.3454971 100.635043 #> 915   118.97242737  -97.5136948 153.828993 #> 916   -34.41863632   31.5129490  46.665924 #> 917  -188.21719360   92.6329956 209.777463 #> 918   -58.35830307   36.5501518  68.859314 #> 919    23.47339630 -106.3293076 108.889494 #> 920    48.26338959 -140.7656708 148.809707 #> 921     2.93345904   77.2728806  77.328541 #> 922     3.29619002  267.8509827 267.871263 #> 923    22.87184143  152.0359344 153.746696 #> 924    31.89125824  -86.4978561  92.189649 #> 925   130.08041382 -227.5347748 262.093471 #> 926    77.57446289  -53.8616066  94.439769 #> 927   -44.62536240  -18.3936825  48.267489 #> 928  -105.90550232  -32.0259666 110.641936 #> 929    -4.85364437   48.7738037  49.014710 #> 930   122.66645813  150.0799103 193.832504 #> 931   116.34411621  163.0688934 200.318290 #> 932   -98.84767914   -3.4938180  98.909405 #> 933  -224.05401611 -115.7916183 252.206069 #> 934   -84.22505951 -194.3220825 211.789831 #> 935   107.13816833 -117.8390884 159.262795 #> 936    86.28987122  -30.0497837  91.372487 #> 937   -66.14469147   31.9312515  73.448792 #> 938    -2.57808971    5.2714891   5.868147 #> 939   133.38929749   30.3552971 136.799666 #> 940   114.43936920  143.8181152 183.793415 #> 941    35.20257950  139.3788605 143.755655 #> 942    20.00063705  -29.2640705  35.445893 #> 943    -9.78639507 -120.0830536 120.481174 #> 944   -43.44370270 -105.8103027 114.381710 #> 945   -81.44595337  -57.3885574  99.633779 #> 946   -31.48395729   42.7701530  53.108620 #> 947    29.99353600   30.3968830  42.703427 #> 948   -55.14097214   21.5068913  59.186765 #> 949  -140.03959656  -16.0649223 140.958045 #> 950  -136.02313232    9.7148905 136.369614 #> 951   -15.67030334   83.2250366  84.687456 #> 952    -0.30809310   34.0327187  34.034113 #> 953   -58.49440002  -63.2863503  86.178634 #> 954    -1.40070248  -15.7182961  15.780583 #> 955    48.00677109  128.2728577 136.961951 #> 956    89.95524597  172.4573212 194.508287 #> 957    23.78053474   78.3705902  81.899104 #> 958    11.29508018 -100.8835220 101.513860 #> 959    11.17308140 -144.8722076 145.302424 #> 960    18.12359238  -35.8964691  40.212201 #> 961    61.49050140   69.9460373  93.131788 #> 962   -45.63617325   18.7780228  49.348500 #> 963   -35.39804077 -115.7926178 121.082417 #> 964    23.83649254 -129.2450256 131.424712 #> 965   117.90637970   34.4307709 122.830747 #> 966   121.66172028  107.6005859 162.417549 #> 967    38.37163544   -0.9197690  38.382657 #> 968   -32.47134399  -25.0434322  41.006849 #> 969   -28.37914467  -73.8947449  79.156864 #> 970    30.71305656  -32.7438507  44.893781 #> 971    13.70240402  -16.7140331  21.612838 #> 972  -130.22668457  -17.3859272 131.382114 #> 973  -195.53585815   23.8905258 196.989921 #> 974  -102.04357147   40.1816406 109.669753 #> 975    36.43318558  117.2907333 122.818945 #> 976   117.67913055   39.5857697 124.158813 #> 977    47.94837952  -99.7060394 110.636076 #> 978    23.74641418 -132.9073181 135.012027 #> 979   -24.74171829  -63.1896019  67.860728 #> 980    59.01551056  -72.1463623  93.209056 #> 981    81.04986572  -42.1084442  91.335655 #> 982   -35.69889450    9.5861521  36.963568 #> 983  -192.15861511  137.1663971 236.092257 #> 984  -212.80821228  135.9744415 252.539866 #> 985   -30.62822342   69.3381653  75.801512 #> 986    95.43987274   -5.6271396  95.605617 #> 987    83.41345978 -108.7980270 137.094186 #> 988    80.20272827 -100.4213181 128.518165 #> 989    73.39412689  -40.1463013  83.656580 #> 990    75.84745789  182.1450195 197.305968 #> 991    42.63888931  231.5169373 235.410635 #> 992    40.30442810  140.3379822 146.010945 #> 993    55.65538025  -61.2657700  82.770864 #> 994    19.02695656 -298.4172363 299.023196 #> 995    10.45597839 -243.0785675 243.303345 #> 996  -127.34799194  -81.0310440 150.942178 #> 997  -159.85418701  112.8039474 195.647877 #> 998   -24.19950485  203.8352814 205.266748 #> 999   378.11840820  268.8074646 463.929934 #> 1000            NA           NA         NA"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Differentiate x y compute change amplitude via algorithm proposed Nyström  Holmqvist (2010) doi:10.3758/BRM.42.1.188 . Note components amplitude smoothed independently via Savitzky-Golay filter, components may (probably ) add amplitude. Note filtering sensitive presence NA.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(x, y, trial, sample_rate, options = NULL)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"x vector x coordinates degrees visual angle y vector y coordinates degrees visual angle trial vector trial index sample_rate sample rate Hz options List method specific options, see Details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"data.frame columns x, y, amp","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/diff_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Differentiate x and y and compute change amplitude via an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188 — diff_nh","text":"","code":"diff_nh(rnorm(1000), rnorm(1000), rep(1, 1000), 250, list(\"nh_sg_filter_order\" = 2)) #> # A tibble: 1,000 × 3 #>         x     y   amp #>     <dbl> <dbl> <dbl> #>  1   NA     NA    NA  #>  2   NA     NA    NA  #>  3   NA     NA    NA  #>  4   NA     NA    NA  #>  5   NA     NA    NA  #>  6   NA     NA    NA  #>  7   NA     NA    NA  #>  8  -87.5 -113.  532. #>  9   27.0  109.  373. #> 10 -118.   111.  260. #> # … with 990 more rows"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades from samples using votes from selected methods. — extract_saccades","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Extract saccades samples using votes selected methods. method votes whether given sample belongs saccade. Next, saccades identified via majority vote using  vote_threshold parameter, well minimum duration minimal temporal separation criteria. Please note units gaze samples must  degrees visual angle. units important methods use specific (e.g., physiologically plausible) velocity acceleration thresholds. default, ensemble includes methods proposed Engbert & Kliegl (2003) (\"ek\"), Otero-Millan et al. (\"om\"), Nyström & Holmqvist (2010) (\"nh\"),  see Implemented Methods vignette. However, can extended via custom methods, see Using Custom Methods vignette. default, function returns table identified saccades can return matrix methods' votes per sample instead (return_votes = TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"extract_saccades(   x,   y,   sample_rate,   trial = NULL,   methods = list(method_ek, method_om, method_nh),   velocity_function = saccadr::diff_ek,   options = NULL,   binocular = \"merge\",   vote_threshold = ifelse(length(methods) == 1, 1, (length(methods) - 1)),   minimal_duration_ms = 12,   minimal_separation_ms = 12,   return_votes = FALSE )"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"x Horizontal coordinate, either vector monocular data two-column matrix binocular data. y Vertical coordinate, either vector monocular data two-column matrix binocular data. sample_rate Sampling rate Hz. assumed common entire time series. time series contains chunks (trials) recorded using different acquisition rate (e.g., SR Research Eyelink allows set different acquisition rate recording / trial), need split time series analyze separately. trial Optional vector trial ID. omitted, samples assumed belong single trial. Velocity, acceleration, saccades computed respecting trial borders. methods list saccade detection methods, can include external functions implement sample classification (see Using Custom Methods vignette). Package methods include Engbert & Kliegl (2003) (method_ek), Otero-Millan et al. (2014) (method_om),  Nyström Holmqvist (2010) (method_nh). Defaults list internally implemented methods: list(method_ek, method_om, method_nh). velocity_function handle function compute velocity acceleration. Defaults method suggested Engbert & Kliegl (2003) diff_ek. package also implements method proposed Nyström Holmqvist (2010) diff_nh. See vignette \"Velocity computation\" details information implement custom method. options named list options saccade detection (see method_ek, method_om, method_nh) velocity (diff_ek, diff_nh) computation. See documentation specific method details. binocular Specifies binocular data treated. Options \"cyclopean\" (binocular data converted average cyclopean image saccades extracted), \"monocular\" (saccades extracted independently eye), \"merge\" (default, sample votes obtained eyes methods averaged. way binocular saccades, .e., eye movements sufficient temporal  overlap eyes, detected.). vote_threshold Value 1 N (N number used methods) defining vote threshold saccade. default, one method \\(threshold = N-1\\) must agree sample considered saccade. Threshold 1 applied single method used. minimal_duration_ms Minimal duration saccade milliseconds. Shorter candidate saccades discarded, minimal_separation_ms Minimal time separation saccades milliseconds. Saccades separated shorter interval \"saccade\" votes, merged including period. return_votes Logical. Whether function return extracted microsaccades (FALSE, default) votes per sample (TRUE).","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"data.frame saccade properties (see details), return_votes = FALSE. Alternatively, returns votes per sample (return_votes = TRUE). monocular processing (monocular input, cyclopean merged binocular data) matrix nrow(x) rows length(methods) columns 0/1 votes sample method. binocular processing, function returns two element list  similar matrices per eye.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"Variables describe saccade Trial Trial index. Eye \"Monocular\" monocular inputs. \"Cyclopean\" binocular data averaged applying algorithms. \"Binocular\" binocular data votes averaged applying algorithms. \"Left\" \"Right\" binocular data eyes processed independently. OnsetSample Index first sample. OffsetSample Index last sample. Onset Onset time relative trial start milliseconds. Offset Offset time relative trial start milliseconds. Duration Duration milliseconds. DisplacementX Horizontal displacement measured first last sample. DisplacementY Vertical displacement measured first last sample. Displacement Displacement magnitude measured first last sample. DisplacementPhi Displacement direction measured first last sample. AmplitudeX Horizontal displacement measured leftmost rightmost sample. AmplitudeY Vertical displacement measured lowest uppermost sample. Amplitude Displacement magnitude measured extreme samples. AmplitudePhi Displacement direction measured extreme samples. VelocityPeak Peak velocity. VelocityAvg Average velocity. AccelerationPeak Peak acceleration. AccelerationAvg Average acceleration. AccelerationStart Peak acceleration peak velocity reached. AccelerationStop Peak acceleration peak velocity reached.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/extract_saccades.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades from samples using votes from selected methods. — extract_saccades","text":"","code":"# Single trial data(single_trial) saccades <- extract_saccades(single_trial$x, single_trial$y, 500)  # Multiple trials data(monocular_ten_trials) saccades <- extract_saccades(monocular_ten_trials$x,                              monocular_ten_trials$y,                               500,                              trial = monocular_ten_trials$trial)    # binocular saccades                              data(\"single_trial_binocular\")  saccades_b <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                          single_trial_binocular[, c('yL', 'yR')],                                          sample_rate = 1000)                                            # cyclopean saccades from binocular data saccades_c <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                         single_trial_binocular[, c('yL', 'yR')],                                         sample_rate = 1000,                                         binocular = \"cyclopean\")   # monocular saccades from binocular data saccades_m <- saccadr::extract_saccades(single_trial_binocular[, c('xL', 'xR')],                                        single_trial_binocular[, c('yL', 'yR')],                                        sample_rate = 1000,                                        binocular = \"monocular\")                               # Using a single method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, methods = method_om)  # Using two methods saccades <- extract_saccades(single_trial$x,                              single_trial$y,                              500,                              methods = list(method_ek, method_om))  #  Alternative velocity computation method saccades <- extract_saccades(single_trial$x, single_trial$y, 500, velocity_function = diff_nh) #> Warning: no non-missing arguments to max; returning -Inf  # A strict unanimous decision threshold saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 3)  # A slacker criterion that at least one of the three methods must label sample as a saccade saccades <- extract_saccades(single_trial$x, single_trial$y, 500, vote_threshold = 1)  # Only longish saccades are extracted saccades <- extract_saccades(single_trial$x, single_trial$y, 500, minimal_duration_ms = 20)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":null,"dir":"Reference","previous_headings":"","what":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"Smooths signal using Savitzky-Golay shifts filtered signal back","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(x, sg_order)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"x vector float sgOrder integer, order filter","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"vector float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/filter_via_savitzky_golay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Smooths signal using Savitzky-Golay and then shifts the filtered signal back — filter_via_savitzky_golay","text":"","code":"filter_via_savitzky_golay(rnorm(1000), 2) #>    [1]           NA           NA           NA           NA           NA #>    [6] -0.790844917 -0.604688097 -0.529912165 -0.511368508 -0.465727906 #>   [11] -0.960759491 -1.187290148 -0.545695739  0.038605215 -0.159301530 #>   [16]  0.376547626  0.811602208  0.273754355  0.141411666  0.490915936 #>   [21]  0.014654576 -0.689040943 -1.014513050 -1.240445519 -1.130920877 #>   [26] -0.681986973  0.410910863  1.609195501  1.265006553 -0.287322291 #>   [31] -0.860135101 -0.557905223 -0.182543080 -0.497736872 -1.088061470 #>   [36] -1.757009244 -1.141096466 -0.077107151  0.056667565 -0.241297873 #>   [41] -0.076717175  0.365378608  0.813139294  0.279955035  0.659489105 #>   [46] -0.376474560 -1.103742478 -1.501854375 -0.041521504  0.284984202 #>   [51]  0.260596097 -0.450415445 -0.688091304 -0.079549641  1.140606565 #>   [56]  0.966404822  0.336621136 -0.243771208 -0.256862768  0.036036425 #>   [61]  0.742507987  0.772433071  0.834178541  0.423418471  0.332070367 #>   [66]  0.504041787  1.181489121  0.882423259  0.357059722  0.828816412 #>   [71]  1.347810202  1.592555794  0.129245463 -0.511691054 -0.344342717 #>   [76]  0.806800460  0.398689205  0.254445899  0.028835085 -0.053082731 #>   [81]  0.182805377  1.147140670  0.766487887  0.372496440  0.880177774 #>   [86]  0.992195969 -0.052052677 -0.622361779  0.244424040  0.338570410 #>   [91] -0.896700558 -0.822649877 -0.546386662  1.140461857  1.444936219 #>   [96]  1.335894609 -0.224935704 -0.550634541 -0.294542091  0.043189471 #>  [101]  0.917148397  0.491985789  0.252229406 -0.047773387 -0.164298644 #>  [106] -0.811738016 -0.223014983  1.213173822  1.171145002  0.701171008 #>  [111] -0.516676660 -0.528239893  0.415590622  0.880684067  0.132172279 #>  [116] -0.422993839  0.790496514  1.161309514  0.329635625 -0.467631841 #>  [121] -0.487830287  0.334827681  0.993029654  1.076529060  0.863710144 #>  [126] -0.203822835  0.121704505  0.705066183  0.099626666 -0.338143840 #>  [131] -0.262640691  0.148367698 -0.694956978  0.539176751 -0.306211106 #>  [136] -0.881864320 -1.309180923 -0.499467685 -0.486900492  0.005521494 #>  [141]  0.150886913 -0.260624274 -0.199681438  0.059153223  0.253696775 #>  [146] -0.702208452 -0.479636773  0.208532597  1.296936176  0.368841948 #>  [151] -0.152315250 -0.107045707  0.756076952  0.308032080  0.196572554 #>  [156]  0.703142879  0.566977071 -0.193405841 -0.645668820 -0.440909246 #>  [161]  0.549690541  1.305401903  0.808128328  0.163496738  0.267785216 #>  [166] -0.452427329 -0.882419973 -0.052404595  0.354021966 -0.118134639 #>  [171] -0.557155813 -0.096130025  0.448750683  0.660851700  1.043520568 #>  [176]  0.799661750 -0.479780150 -0.447593878  0.048336104  0.665420060 #>  [181]  0.165637848 -0.333033856 -1.377261405 -0.752127293 -0.041057946 #>  [186] -0.304381552 -0.072739291  0.377639944  0.500613665 -0.142473982 #>  [191]  1.105273987  0.888894216  1.010407825 -0.063642931  0.728957609 #>  [196] -0.020498940 -0.201001420 -0.429742160  0.101091467 -0.636730270 #>  [201] -0.949219562 -0.414649418 -0.023309896 -0.221969929 -0.741802698 #>  [206]  0.264052325 -0.079705064 -0.191584414  0.468835591  1.303113448 #>  [211] -0.185863197 -0.704687181  0.594441039  0.977341984 -0.215337897 #>  [216] -0.181318110  0.218154616 -0.055883485 -1.484476336 -1.458180185 #>  [221]  0.662284908  1.686778380  1.205903844 -0.095027519 -0.241541933 #>  [226]  0.089856557  0.984807179  1.092718551  0.977584100  0.736769542 #>  [231]  1.123114036  0.727839064  0.495769135 -0.650312606 -0.522755984 #>  [236]  0.194933804  0.213897078 -0.816052713 -1.371629666 -0.572840136 #>  [241]  1.124471397  1.518956200  1.445485232  0.476594853 -0.071114439 #>  [246]  0.095228782  0.217783782 -0.148849020 -1.016601674 -0.701724952 #>  [251] -0.314776403 -0.167470900  1.100999429  0.463004589 -0.094095547 #>  [256] -1.142001864 -0.171695543  0.029472206  0.257532414  0.882684819 #>  [261]  1.270747911  0.890819664 -0.601491988 -1.033857065 -1.029059818 #>  [266] -0.298916997 -0.971293659 -0.862403031 -0.926776509 -0.705246237 #>  [271] -0.788955943 -0.173009920  0.155424586  0.316293782 -0.443941588 #>  [276] -1.248853073 -1.106747953 -0.329060616 -0.244529046  0.831329476 #>  [281]  1.128149798 -0.332872735 -0.829409342  0.289102022  0.472584431 #>  [286] -0.084956865 -0.016467555 -0.041423057  0.377950045  0.836394899 #>  [291]  0.863776902  0.238361380 -0.179544077 -0.736054038 -0.946964532 #>  [296]  0.475199320  1.978269431  2.175200292  1.693232175  0.787483507 #>  [301]  0.154322412 -0.091621036  0.203670309  0.012544131 -0.416758117 #>  [306] -0.567263894 -0.234457575  0.021707312 -0.331069529 -0.654005196 #>  [311]  0.339186826  1.295352020  2.115609141  1.047893542  0.388950047 #>  [316] -0.564143534 -0.920545770 -0.914838034 -1.077989172 -0.441909369 #>  [321]  0.217943087  1.430948358  0.976395097  0.600677389 -0.020649899 #>  [326] -0.434946412 -0.110792604  0.017031928 -0.271057503 -0.458526822 #>  [331] -0.711863696 -0.169113694 -0.024033626  0.265751827 -0.081749285 #>  [336]  0.398969373  0.417890139 -0.012152447 -0.123585847  0.266859577 #>  [341]  0.012494831 -0.588469634 -0.839291644 -0.265671792 -0.227891166 #>  [346] -0.328461780 -0.054533402  0.195988643  0.539251751  0.004679219 #>  [351]  0.118354484 -0.375036264 -1.167317926 -2.128756266 -1.309608369 #>  [356]  0.348704951  0.571342188 -0.283162678 -0.783595789  0.159307816 #>  [361]  0.466871248  0.996801287  0.836418308  0.755001541  0.653683505 #>  [366]  0.821967687  0.362997315 -0.270625126 -0.755739089 -0.870028261 #>  [371] -0.471230747  0.038914965  0.326596489 -0.589855712 -0.797177102 #>  [376]  0.022436643  0.722437078  1.238948580  1.665939827  1.101098996 #>  [381] -0.169210818 -0.095431139  0.126054415 -0.630079981 -0.900538761 #>  [386] -0.571036275 -0.056238505  0.805870026 -0.519202933 -0.964572300 #>  [391] -0.167850017  0.601660194  0.106801164 -0.477592375 -0.707116909 #>  [396] -1.482699032 -1.119770830 -0.790999598 -0.054729865  0.920840314 #>  [401]  0.519604760 -0.006954011 -0.229893355  1.324448661  0.966347275 #>  [406]  0.239209294  0.009484321  0.108349524 -0.189242491 -0.827693711 #>  [411] -0.237388742 -0.751979170 -0.590612642 -0.724077395 -0.469723551 #>  [416] -1.019943163 -1.017529922 -0.687032163 -0.517350425 -0.353411803 #>  [421] -0.138282192 -0.521553176 -1.302437515 -1.451280925 -0.168337393 #>  [426] -0.070958694 -0.260756669 -1.854292078 -1.791605557 -1.291360509 #>  [431]  0.076963468  0.806718362  0.367860412  0.407207952 -0.316060094 #>  [436] -0.367206684 -0.581036769  0.328836157 -0.065273916  0.009783737 #>  [441]  0.700460540  1.287552286  0.687420708 -0.807920247 -1.264796429 #>  [446]  0.073961990  1.540412690  1.598925305  0.485536243  0.585876648 #>  [451]  0.738573450  1.105774734  0.517413751  0.008563412  0.443801841 #>  [456] -0.061812212  0.157960276 -0.337810091 -0.297271380 -1.232564064 #>  [461] -1.608192902 -1.225235128 -0.446765600 -0.341415520 -0.596497670 #>  [466] -0.255601661  0.022497845 -0.413502679 -0.007751402  0.218092456 #>  [471]  0.385791711  0.157230656  0.329098719 -0.034610393  0.478383121 #>  [476]  0.839320030  0.201221024 -0.428017833  0.256886403  1.338295526 #>  [481]  0.343840593 -0.075286130  0.819652424  0.792657061 -0.433231567 #>  [486] -1.067566568  0.213899023  0.148074165 -0.115051396  0.485098557 #>  [491]  0.847936826 -0.141566872 -0.848902510 -0.319123279 -0.685314065 #>  [496] -1.552299245 -0.577508543  0.967845108  1.720275370  1.059608068 #>  [501]  0.309577981 -0.631919233 -0.348560476 -0.275283183 -0.654741813 #>  [506] -1.673377110 -0.631623898 -0.526925421  0.507418022 -0.011410846 #>  [511]  0.167199549  0.160344494  1.055953928  1.119066419  0.393762442 #>  [516]  0.310115364 -0.464091235 -0.741164387  0.057593475  0.494221908 #>  [521]  0.904175377  0.469408382  0.873593904 -1.342819712 -1.721286488 #>  [526] -0.737174777  0.025738318 -1.574892173 -1.546721872 -0.588473762 #>  [531] -0.242583669 -0.416390254 -0.768751675 -0.118098693 -0.116754151 #>  [536]  0.006477054 -0.909983486 -0.258850754 -0.074886317  0.273382678 #>  [541]  0.395591624  0.308300111  0.238809445 -0.807491018 -1.227683409 #>  [546] -0.440320975  1.150729352  0.614117098 -0.584051005 -0.792971124 #>  [551] -0.417487432  0.475094417 -0.630822642 -1.382007500 -1.053362607 #>  [556]  0.626073381  0.827639081  0.408127538  0.261527460 -0.726164756 #>  [561] -1.922275369 -0.870301883  1.112184077  2.206904313  0.730748049 #>  [566] -0.750789615 -1.498362323 -0.809942965 -0.314670179  0.083571638 #>  [571]  0.819203950  0.806024450 -0.104302771 -0.430587013  0.754614110 #>  [576]  1.298526102  0.917392926  0.695810457  0.492922296  0.766892773 #>  [581]  0.781835828  0.669856161  0.111057180 -0.441879420  0.165444222 #>  [586]  0.622295730 -0.064457855 -0.927905045 -0.843536946  0.191005256 #>  [591]  0.733361835  0.228004157 -0.187420871 -0.009217352  0.556563253 #>  [596] -0.070857507 -0.106299352  0.851851680  1.274869345  1.614901862 #>  [601]  1.347576188  0.640295961  0.126057853 -0.623869172 -1.030010319 #>  [606] -1.206604354 -0.836308390 -0.647802857 -0.002357711  0.501613250 #>  [611] -0.257232444 -1.328070356 -0.973080585 -1.017893617 -1.340644575 #>  [616] -1.137655171 -0.429717891 -0.271420609 -0.501798048  0.057296128 #>  [621] -0.830141787  0.085528526  0.292314179  0.419326604 -0.590566058 #>  [626] -0.016927466 -0.385920502 -1.003771088 -0.810002176 -0.321194619 #>  [631]  0.105441427 -1.000759339 -1.164519809 -1.172530479  0.081290903 #>  [636] -0.057619025  0.001805063  0.287466817 -0.132962804 -0.247126091 #>  [641] -0.903050921 -0.109491574 -0.093825021  0.459755252  0.379930235 #>  [646] -0.341976266  0.053530105  0.616575992  0.796542188 -0.114217999 #>  [651] -0.318632346 -0.038351892  0.799334280  0.503128627  0.172924707 #>  [656]  0.021971202 -0.287501404 -0.767259121 -0.741157152  0.625730974 #>  [661]  0.509151225 -0.223361425 -0.783966293 -0.276546411 -0.421816868 #>  [666] -1.507322240 -1.124457710 -0.314594371 -0.400913804  0.466072619 #>  [671]  0.876825176  0.720704069  0.105554468  0.708388067  1.576062625 #>  [676]  0.094860066 -0.834605975 -0.701582083  0.793607946  0.183048534 #>  [681]  0.233551624  0.488075287 -0.085122655  0.577452153  1.257633515 #>  [686]  2.026682503  0.900376992  0.377848597 -0.318644937 -0.306349634 #>  [691] -0.325721092  0.053884071  1.530025832  0.894874848  0.075865794 #>  [696] -1.017004665 -0.738592599 -0.454879208  0.911643039  0.241130472 #>  [701] -0.106174964  0.032596265  0.341569175 -0.536896590 -0.743523547 #>  [706] -0.211295665 -0.482136228 -0.047815090 -0.605258993 -0.454369552 #>  [711] -0.407407514 -0.102767382 -1.133900089 -1.688854045 -1.250265883 #>  [716] -0.368800265  0.271391814  0.308362655 -0.561715793 -0.819655778 #>  [721] -0.550434667 -0.180002425  0.329700697  0.423378788  0.276432156 #>  [726] -0.054553192 -0.485227065  0.169243707  0.844641064  0.978261874 #>  [731] -0.192651232 -0.671941807 -0.847638190 -0.310603119  0.235513253 #>  [736]  0.455876643  0.579668745  0.968199977  1.265375033  0.489800543 #>  [741]  0.212946633  0.702236932  0.500098820 -0.456443297 -0.102964275 #>  [746]  0.048866689 -0.341407696 -0.974455599 -0.256220334 -0.773737361 #>  [751] -0.034858201  0.275905410  1.152769167  0.498159634 -0.672899598 #>  [756] -1.579404226 -1.852950943 -1.311698987 -0.774268218  0.102788984 #>  [761]  0.109155667  0.107746248 -0.759278301 -0.865796296 -0.968432810 #>  [766] -1.499809837 -0.781666107  0.770371055  1.102352285 -0.592473763 #>  [771] -1.243165649 -0.956364215 -0.479114012 -0.704396704 -0.272890111 #>  [776]  0.226635825  0.091421409 -0.535744644 -0.447492776 -0.194018116 #>  [781] -0.582800155 -0.327136596  0.556863209  0.416367978 -0.585469370 #>  [786] -1.528458255 -0.567762699  0.136924008  0.461902211 -0.013099947 #>  [791]  0.056648263 -0.698715079 -0.604052822 -0.355102558  0.099269451 #>  [796] -0.978129219 -0.371714162  1.220335970  0.923399946 -0.098759685 #>  [801] -0.428688759  0.424591039  0.276893602 -0.207203704  0.202899701 #>  [806]  0.718794851  1.074454721  0.576007628  0.095311653  0.858168840 #>  [811]  1.305134328  0.794502137 -0.835220758 -0.726017089  0.362694442 #>  [816]  1.483260514  1.675189186 -0.219427411 -1.604197624 -0.929734578 #>  [821] -0.153320155 -0.905907987 -0.849364176  0.119500960  0.367574254 #>  [826]  0.252296830  0.387772960 -0.316764293 -0.362587426 -0.732748344 #>  [831]  0.044611742 -0.538110229 -0.109142534  0.417394504  1.080543480 #>  [836]  0.947496004  0.816491527  1.255164299  1.189888577  1.217076825 #>  [841]  0.883319204  0.402945367 -0.296520834  0.279789729  0.202260765 #>  [846]  0.992477241  0.352735292  0.301934012 -0.480090628 -1.047805008 #>  [851] -1.477358547 -0.726063435  0.365975275  0.091915232  0.214546621 #>  [856]  0.640776669  0.927925421  0.183282802 -0.039394394 -0.641768223 #>  [861] -0.975201585 -0.448622784  0.647999141  0.734197052  0.056605156 #>  [866]  0.042760404 -0.861066837 -1.311528515 -0.182949175  0.742877338 #>  [871]  1.074543866  0.771812592  0.397812209 -0.392818165  0.617283901 #>  [876]  1.407253374  2.100142225  1.893351638  1.216434179  0.388930338 #>  [881]  0.301048393 -0.386801572 -0.340986692 -0.029270361 -0.766490199 #>  [886] -0.976056069 -0.553687657  1.089275397  1.005732176  1.043003667 #>  [891]  0.316851114 -0.898822536 -0.618453866 -0.036070662  1.203501335 #>  [896]  0.986530238  1.223970846  0.763295576 -0.420038810  0.353353871 #>  [901] -0.006734185  0.430048545  0.369201598  0.019012780 -1.336699556 #>  [906] -1.517922388 -0.329574801 -0.227393543 -0.507272006 -0.147229529 #>  [911]  0.447908859  0.494126399 -0.108200326  0.233031486  0.154098474 #>  [916]  0.196368353 -0.255340148 -0.790005244 -1.113613501 -1.176409219 #>  [921] -0.579576472 -1.259904835 -0.601857684  0.270100837  1.044487085 #>  [926]  0.837247452  0.858289805  0.369441159 -0.138887241  0.172719574 #>  [931]  1.110554952  0.913212993  0.378232993  0.573040635  0.367622897 #>  [936] -0.810492156 -1.667359526 -0.301955165  0.378771765  0.494831545 #>  [941]  0.690240032  0.211681859 -0.889311630 -0.905635404  0.343312339 #>  [946]  0.892622714  0.876635154  0.499510819 -0.371854682 -0.575300068 #>  [951] -0.628664642  0.771851396  0.340790171  0.043942040 -1.148196035 #>  [956] -0.429096534 -0.023116491  0.351611892  0.418174208  1.111581911 #>  [961]  1.031914132  0.091287717 -0.418604573  0.627429024  0.861859214 #>  [966]  0.536507240 -0.178972875  0.383664242 -0.391478462  0.192658254 #>  [971]  0.191054409  0.490787225 -0.144754112  0.133808689 -0.017641109 #>  [976] -0.705652967 -0.747169608  0.014591125  0.851223992  0.820763254 #>  [981] -0.252699434  0.154561659  0.242618266 -0.401617530 -0.659419123 #>  [986] -0.113194142 -0.031106816 -1.168915582 -0.257797820  0.175328442 #>  [991]  0.251344265 -0.272770563 -0.444068847  0.523004102  0.884295864 #>  [996]  0.411606873 -0.245753781  0.089450010  1.223542675  0.210310522"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts inputs to matrix — input_to_matrix","title":"Converts inputs to matrix — input_to_matrix","text":"Converts inputs (vector, matrix, data.frame/tibble)  matrix preserving number columns","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(x)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts inputs to matrix — input_to_matrix","text":"x vector, matrix, data.frame/tibble","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts inputs to matrix — input_to_matrix","text":"matrix","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/input_to_matrix.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Converts inputs to matrix — input_to_matrix","text":"","code":"input_to_matrix(1:5) #>      [,1] #> [1,]    1 #> [2,]    2 #> [3,]    3 #> [4,]    4 #> [5,]    5"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Extract saccades using algorithm proposed Engbert Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"method_ek(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"Method options, please refer Engbert Kliegl (2003) details parameters rationale default values. ek_velocity_threshold Velocity threshold saccade detection standard deviations. Defaults 6. ek_sd_fun Function used compute standard deviation velocities. Defaults sd_via_median_estimator, per formula #2 Engbert Kliegl (2003). Can replaced mad, sd, etc. ek_minimal_duration_ms Minimal duration saccade milliseconds. Defaults 12. ek_minimal_separation_ms minimal required time gap saccades. Defaults 12.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_ek.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Engbert and Kliegl (2003) doi:10.1016/S0042-6989(03)00084-1 — method_ek","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Extract saccades using algorithm proposed Nyström Holmqvist (2010) doi:10.3758/BRM.42.1.188 .","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"method_nh(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze y coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details  information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"Method options, please refer Nyström Holmqvist (2010) details parameters rationale default values. nh_sg_filter_order Order Savitzky-Golay filter. Defaults 2. nh_max_velocity Maximal physiologically plausible velocity °/s. Defaults 1000. nh_max_acceleration Maximal physiologically plausible acceleration °/s². Defaults 100000. nh_initial_velocity_threshold Initial velocity threshold °/s. Defaults 100.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_nh.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Nyström and Holmqvist (2010) doi:10.3758/BRM.42.1.188\n. — method_nh","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Extract saccades using algorithm proposed Otero-Millan et al. (2014) doi:10.1167/14.2.18.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"method_om(x, y, vel, acc, sample_rate, trial, options)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"x Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. y Gaze x coordinate, _arbitrary units_ threshold velocity computed units standard deviation. vel Velocity data.frame columns x, y, amp. acc Acceleration data.frame columns x, y, amp. sample_rate Sample rate Hz. trial Trial id, trial borders respected computing velocity saccades. options Named list method options. See details information.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"logical vector marking samples belong saccades","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"Method options, please refer Otero-Millan et al. (2014) details parameters rationale default values. om_minimal_inter_peak_time_ms Minimal inter-peak interval milliseconds. Defaults 30. om_maximal_peaks_per_second Maximal allowed number peaks per second. Defaults 5. om_velocity_threshold_deg_per_sec Threshold saccade velocity °/s.  Defaults 3. om_pca_variance_threshold Minimal variance explained retained rotated components. Defaults 0.05.","code":""},{"path":[]},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/method_om.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract saccades using an algorithm proposed by Otero-Millan et al. (2014) doi:10.1167/14.2.18. — method_om","text":"","code":"# Do not run this function directly, use extract_saccades() instead"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":null,"dir":"Reference","previous_headings":"","what":"A monocular multi-trial recording — monocular_ten_trials","title":"A monocular multi-trial recording — monocular_ten_trials","text":"monocular recording, 10 trials, sampling rate 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A monocular multi-trial recording — monocular_ten_trials","text":"","code":"monocular_ten_trials"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/monocular_ten_trials.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A monocular multi-trial recording — monocular_ten_trials","text":"data frame 14353 rows 4 variables: trial Trial index. x X coordinate degrees visual angle. y Y coordinate degrees visual angle. time Sample time milliseconds.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract value for a named list or use default if key is missing — option_or_default","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Extract value named list use default key missing","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(options, key, default)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"options Named list key String key default Default value returned, key missing.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"Value list default value","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/option_or_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract value for a named list or use default if key is missing — option_or_default","text":"","code":"option_or_default(list(\"A\" = 25), \"A\", 20) #> [1] 25 option_or_default(list(\"A\" = 25), \"B\", 20) #> [1] 20"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/saccadr.html","id":null,"dir":"Reference","previous_headings":"","what":"saccadr — saccadr","title":"saccadr — saccadr","text":"Extract (Micro)Saccades Gaze Samples.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute standard deviation via median estimator. — sd_via_median_estimator","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"Compute standard deviation via median estimator. Please refer formula #2 Engbert & Kliegl (2003). Falls back mean estimator, computed standard deviation smaller .Machine$double.eps. Raises error results using mean estimator still smaller .Machine$double.eps.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(x, na.rm = FALSE)"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"x Numeric values na.rm Whether exclude NA values, defaults FALSE.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"float","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/sd_via_median_estimator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute standard deviation via median estimator. — sd_via_median_estimator","text":"","code":"sd_via_median_estimator(rnorm(100)) #> [1] 0.6905712"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial monocular samples recorded at 500 Hz. — single_trial","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"single trial monocular samples recorded 500 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"","code":"single_trial"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial monocular samples recorded at 500 Hz. — single_trial","text":"data frame 1006 rows 2 variables: x X coordinate degrees visual angle. y Y coordinate degrees visual angle.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":null,"dir":"Reference","previous_headings":"","what":"A single trial binocular recording. — single_trial_binocular","title":"A single trial binocular recording. — single_trial_binocular","text":"single trial binocular recording sampled 1000 Hz.","code":""},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single trial binocular recording. — single_trial_binocular","text":"","code":"single_trial_binocular"},{"path":"https://alexander-pastukhov.github.io/saccadr/reference/single_trial_binocular.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A single trial binocular recording. — single_trial_binocular","text":"data frame 2000 rows 6 variables: trial Trial index. time_rel Sample time milliseconds relative trial start. xL X coordinate left eye degrees visual angle. xR X coordinate right eye degrees visual angle. yL Y coordinate left eye degrees visual angle. yR Y coordinate right eye degrees visual angle.","code":""}]
